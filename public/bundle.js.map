{"version":3,"file":"bundle.js","sources":["../node_modules/tslib/tslib.es6.js","../node_modules/rxjs/_esm5/internal/util/isFunction.js","../node_modules/rxjs/_esm5/internal/config.js","../node_modules/rxjs/_esm5/internal/util/hostReportError.js","../node_modules/rxjs/_esm5/internal/Observer.js","../node_modules/rxjs/_esm5/internal/util/isArray.js","../node_modules/rxjs/_esm5/internal/util/isObject.js","../node_modules/rxjs/_esm5/internal/util/errorObject.js","../node_modules/rxjs/_esm5/internal/util/tryCatch.js","../node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js","../node_modules/rxjs/_esm5/internal/Subscription.js","../node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js","../node_modules/rxjs/_esm5/internal/Subscriber.js","../node_modules/rxjs/_esm5/internal/symbol/observable.js","../node_modules/rxjs/_esm5/internal/util/noop.js","../node_modules/rxjs/_esm5/internal/Observable.js","../node_modules/rxjs/_esm5/internal/util/toSubscriber.js","../node_modules/rxjs/_esm5/internal/util/pipe.js","../node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js","../node_modules/rxjs/_esm5/internal/SubjectSubscription.js","../node_modules/rxjs/_esm5/internal/Subject.js","../node_modules/rxjs/_esm5/internal/operators/refCount.js","../node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js","../node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js","../node_modules/rxjs/_esm5/internal/BehaviorSubject.js","../node_modules/rxjs/_esm5/internal/scheduler/Action.js","../node_modules/rxjs/_esm5/internal/scheduler/QueueAction.js","../node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js","../node_modules/rxjs/_esm5/internal/Scheduler.js","../node_modules/rxjs/_esm5/internal/scheduler/queue.js","../node_modules/rxjs/_esm5/internal/scheduler/QueueScheduler.js","../node_modules/rxjs/_esm5/internal/observable/empty.js","../node_modules/rxjs/_esm5/internal/util/isScheduler.js","../node_modules/rxjs/_esm5/internal/util/subscribeToArray.js","../node_modules/rxjs/_esm5/internal/observable/fromArray.js","../node_modules/rxjs/_esm5/internal/Notification.js","../node_modules/rxjs/_esm5/internal/observable/throwError.js","../node_modules/rxjs/_esm5/internal/observable/of.js","../node_modules/rxjs/_esm5/internal/observable/scalar.js","../node_modules/rxjs/_esm5/internal/operators/observeOn.js","../node_modules/rxjs/_esm5/internal/ReplaySubject.js","../node_modules/rxjs/_esm5/internal/util/Immediate.js","../node_modules/rxjs/_esm5/internal/AsyncSubject.js","../node_modules/rxjs/_esm5/internal/scheduler/AsapAction.js","../node_modules/rxjs/_esm5/internal/scheduler/asap.js","../node_modules/rxjs/_esm5/internal/scheduler/AsapScheduler.js","../node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameAction.js","../node_modules/rxjs/_esm5/internal/scheduler/async.js","../node_modules/rxjs/_esm5/internal/scheduler/VirtualTimeScheduler.js","../node_modules/rxjs/_esm5/internal/scheduler/animationFrame.js","../node_modules/rxjs/_esm5/internal/scheduler/AnimationFrameScheduler.js","../node_modules/rxjs/_esm5/internal/util/identity.js","../node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js","../node_modules/rxjs/_esm5/internal/util/TimeoutError.js","../node_modules/rxjs/_esm5/internal/util/EmptyError.js","../node_modules/rxjs/_esm5/internal/OuterSubscriber.js","../node_modules/rxjs/_esm5/internal/InnerSubscriber.js","../node_modules/rxjs/_esm5/internal/symbol/iterator.js","../node_modules/rxjs/_esm5/internal/util/subscribeTo.js","../node_modules/rxjs/_esm5/internal/util/isArrayLike.js","../node_modules/rxjs/_esm5/internal/util/isPromise.js","../node_modules/rxjs/_esm5/internal/util/subscribeToPromise.js","../node_modules/rxjs/_esm5/internal/util/subscribeToIterable.js","../node_modules/rxjs/_esm5/internal/util/subscribeToObservable.js","../node_modules/rxjs/_esm5/internal/util/subscribeToResult.js","../node_modules/rxjs/_esm5/internal/observable/combineLatest.js","../node_modules/rxjs/_esm5/internal/operators/mergeMap.js","../node_modules/rxjs/_esm5/internal/observable/forkJoin.js","../node_modules/rxjs/_esm5/internal/observable/race.js","../node_modules/rxjs/_esm5/internal/observable/zip.js","../node_modules/rxjs/_esm5/internal/operators/bufferTime.js","../node_modules/rxjs/_esm5/internal/operators/audit.js","../node_modules/rxjs/_esm5/internal/operators/buffer.js","../node_modules/rxjs/_esm5/internal/operators/bufferCount.js","../node_modules/rxjs/_esm5/internal/operators/debounceTime.js","../node_modules/rxjs/_esm5/internal/operators/bufferToggle.js","../node_modules/rxjs/_esm5/internal/operators/bufferWhen.js","../node_modules/rxjs/_esm5/internal/operators/catchError.js","../node_modules/rxjs/_esm5/internal/operators/count.js","../node_modules/rxjs/_esm5/internal/operators/debounce.js","../node_modules/rxjs/_esm5/internal/operators/defaultIfEmpty.js","../node_modules/rxjs/_esm5/internal/operators/delay.js","../node_modules/rxjs/_esm5/internal/operators/delayWhen.js","../node_modules/rxjs/_esm5/internal/operators/distinct.js","../node_modules/rxjs/_esm5/internal/operators/dematerialize.js","../node_modules/rxjs/_esm5/internal/operators/groupBy.js","../node_modules/rxjs/_esm5/internal/operators/distinctUntilChanged.js","../node_modules/rxjs/_esm5/internal/operators/elementAt.js","../node_modules/rxjs/_esm5/internal/operators/every.js","../node_modules/rxjs/_esm5/internal/operators/exhaust.js","../node_modules/rxjs/_esm5/internal/operators/exhaustMap.js","../node_modules/rxjs/_esm5/internal/operators/expand.js","../node_modules/rxjs/_esm5/internal/operators/filter.js","../node_modules/rxjs/_esm5/internal/operators/finalize.js","../node_modules/rxjs/_esm5/internal/operators/find.js","../node_modules/rxjs/_esm5/internal/operators/first.js","../node_modules/rxjs/_esm5/internal/operators/sampleTime.js","../node_modules/rxjs/_esm5/internal/operators/ignoreElements.js","../node_modules/rxjs/_esm5/internal/operators/isEmpty.js","../node_modules/rxjs/_esm5/internal/operators/last.js","../node_modules/rxjs/_esm5/internal/operators/map.js","../node_modules/rxjs/_esm5/internal/operators/mapTo.js","../node_modules/rxjs/_esm5/internal/operators/materialize.js","../node_modules/rxjs/_esm5/internal/operators/scan.js","../node_modules/rxjs/_esm5/internal/operators/takeLast.js","../node_modules/rxjs/_esm5/internal/operators/mergeScan.js","../node_modules/rxjs/_esm5/internal/operators/onErrorResumeNext.js","../node_modules/rxjs/_esm5/internal/operators/pairwise.js","../node_modules/rxjs/_esm5/internal/operators/repeat.js","../node_modules/rxjs/_esm5/internal/operators/repeatWhen.js","../node_modules/rxjs/_esm5/internal/operators/retry.js","../node_modules/rxjs/_esm5/internal/operators/retryWhen.js","../node_modules/rxjs/_esm5/internal/operators/sample.js","../node_modules/rxjs/_esm5/internal/operators/sequenceEqual.js","../node_modules/rxjs/_esm5/internal/operators/share.js","../node_modules/rxjs/_esm5/internal/operators/throttleTime.js","../node_modules/rxjs/_esm5/internal/operators/single.js","../node_modules/rxjs/_esm5/internal/operators/skip.js","../node_modules/rxjs/_esm5/internal/operators/skipLast.js","../node_modules/rxjs/_esm5/internal/operators/skipUntil.js","../node_modules/rxjs/_esm5/internal/operators/skipWhile.js","../node_modules/rxjs/_esm5/internal/observable/SubscribeOnObservable.js","../node_modules/rxjs/_esm5/internal/util/isNumeric.js","../node_modules/rxjs/_esm5/internal/operators/switchMap.js","../node_modules/rxjs/_esm5/internal/operators/switchMapTo.js","../node_modules/rxjs/_esm5/internal/operators/take.js","../node_modules/rxjs/_esm5/internal/operators/takeUntil.js","../node_modules/rxjs/_esm5/internal/operators/takeWhile.js","../node_modules/rxjs/_esm5/internal/operators/tap.js","../node_modules/rxjs/_esm5/internal/operators/throttle.js","../node_modules/rxjs/_esm5/internal/operators/timeInterval.js","../node_modules/rxjs/_esm5/internal/operators/windowTime.js","../node_modules/rxjs/_esm5/internal/operators/timeout.js","../node_modules/rxjs/_esm5/internal/operators/timeoutWith.js","../node_modules/rxjs/_esm5/internal/operators/window.js","../node_modules/rxjs/_esm5/internal/operators/windowCount.js","../node_modules/@angular/core/fesm5/core.js","../node_modules/rxjs/_esm5/internal/operators/windowToggle.js","../node_modules/rxjs/_esm5/internal/operators/windowWhen.js","../node_modules/rxjs/_esm5/internal/operators/withLatestFrom.js","../node_modules/rxjs/_esm5/internal/observable/merge.js","../node_modules/rxjs/_esm5/internal/operators/mergeAll.js","../node_modules/rxjs/_esm5/internal/operators/multicast.js","../lib/src/hello-world.js"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map","var _enable_super_gross_mode_that_will_cause_bad_things = false;\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport var config = {\n    /**\n     * The promise constructor used by default for methods such as\n     * {@link toPromise} and {@link forEach}\n     */\n    Promise: undefined,\n    /**\n     * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n     * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n     * call in a try/catch block. It also enables producer interference, a nasty bug\n     * where a multicast can be broken for all observers by a downstream consumer with\n     * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n     * FOR MIGRATION REASONS.\n     */\n    set useDeprecatedSynchronousErrorHandling(value) {\n        if (value) {\n            var error = new Error();\n            console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n        }\n        else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n            console.log('RxJS: Back to a better error behavior. Thank you. <3');\n        }\n        _enable_super_gross_mode_that_will_cause_bad_things = value;\n    },\n    get useDeprecatedSynchronousErrorHandling() {\n        return _enable_super_gross_mode_that_will_cause_bad_things;\n    },\n};\n//# sourceMappingURL=config.js.map","/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\nexport function hostReportError(err) {\n    setTimeout(function () { throw err; });\n}\n//# sourceMappingURL=hostReportError.js.map","import { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport var empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            throw err;\n        }\n        else {\n            hostReportError(err);\n        }\n    },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map","export var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map","export function isObject(x) {\n    return x != null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport var errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map","import { errorObject } from './errorObject';\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n}\nexport function tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n//# sourceMappingURL=tryCatch.js.map","import * as tslib_1 from \"tslib\";\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = /** @class */ (function (_super) {\n    tslib_1.__extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        var _this = _super.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return i + 1 + \") \" + err.toString(); }).join('\\n  ') : '') || this;\n        _this.errors = errors;\n        _this.name = 'UnsubscriptionError';\n        Object.setPrototypeOf(_this, UnsubscriptionError.prototype);\n        return _this;\n    }\n    return UnsubscriptionError;\n}(Error));\nexport { UnsubscriptionError };\n//# sourceMappingURL=UnsubscriptionError.js.map","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = /** @class */ (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        /** @internal */\n        this._parent = null;\n        /** @internal */\n        this._parents = null;\n        /** @internal */\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            var trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    var trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    /** @internal */\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexport { Subscription };\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map","export var rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function')\n    ? Symbol.for('rxSubscriber')\n    : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexport var $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map","import * as tslib_1 from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        /** @internal */ _this.syncErrorValue = null;\n        /** @internal */ _this.syncErrorThrown = false;\n        /** @internal */ _this.syncErrorThrowable = false;\n        _this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                _this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    _this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n                        _this.destination = destinationOrNext;\n                        _this.destination.add(_this);\n                    }\n                    else {\n                        _this.syncErrorThrowable = true;\n                        _this.destination = new SafeSubscriber(_this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                _this.syncErrorThrowable = true;\n                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n                break;\n        }\n        return _this;\n    }\n    Subscriber.prototype[rxSubscriberSymbol] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription));\nexport { Subscriber };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        _this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = _this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    _this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = _this.unsubscribe.bind(_this);\n            }\n        }\n        _this._context = context;\n        _this._next = next;\n        _this._error = error;\n        _this._complete = complete;\n        return _this;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;\n            if (this._error) {\n                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                if (useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                hostReportError(err);\n            }\n            else {\n                if (useDeprecatedSynchronousErrorHandling) {\n                    _parentSubscriber.syncErrorValue = err;\n                    _parentSubscriber.syncErrorThrown = true;\n                }\n                else {\n                    hostReportError(err);\n                }\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                hostReportError(err);\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        if (!config.useDeprecatedSynchronousErrorHandling) {\n            throw new Error('bad call');\n        }\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                parent.syncErrorValue = err;\n                parent.syncErrorThrown = true;\n                return true;\n            }\n            else {\n                hostReportError(err);\n                return true;\n            }\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=Subscriber.js.map","/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n//# sourceMappingURL=observable.js.map","/* tslint:disable:no-empty */\nexport function noop() { }\n//# sourceMappingURL=noop.js.map","import { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        /** @internal */\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    };\n    /** @internal */\n    Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[Symbol_observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/internal/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexport { Observable };\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map","import { noop } from './noop';\n/* tslint:enable:max-line-length */\nexport function pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\n/* @internal */\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map","import * as tslib_1 from \"tslib\";\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = /** @class */ (function (_super) {\n    tslib_1.__extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var _this = _super.call(this, 'object unsubscribed') || this;\n        _this.name = 'ObjectUnsubscribedError';\n        Object.setPrototypeOf(_this, ObjectUnsubscribedError.prototype);\n        return _this;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexport { ObjectUnsubscribedError };\n//# sourceMappingURL=ObjectUnsubscribedError.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscription } from './Subscription';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = /** @class */ (function (_super) {\n    tslib_1.__extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        var _this = _super.call(this) || this;\n        _this.subject = subject;\n        _this.subscriber = subscriber;\n        _this.closed = false;\n        return _this;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription));\nexport { SubjectSubscription };\n//# sourceMappingURL=SubjectSubscription.js.map","import * as tslib_1 from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        return _this;\n    }\n    return SubjectSubscriber;\n}(Subscriber));\nexport { SubjectSubscriber };\n/**\n * @class Subject<T>\n */\nvar Subject = /** @class */ (function (_super) {\n    tslib_1.__extends(Subject, _super);\n    function Subject() {\n        var _this = _super.call(this) || this;\n        _this.observers = [];\n        _this.closed = false;\n        _this.isStopped = false;\n        _this.hasError = false;\n        _this.thrownError = null;\n        return _this;\n    }\n    Subject.prototype[rxSubscriberSymbol] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable));\nexport { Subject };\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = /** @class */ (function (_super) {\n    tslib_1.__extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        var _this = _super.call(this) || this;\n        _this.destination = destination;\n        _this.source = source;\n        return _this;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexport { AnonymousSubject };\n//# sourceMappingURL=Subject.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nvar RefCountOperator = /** @class */ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=refCount.js.map","import * as tslib_1 from \"tslib\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../../internal/operators/refCount';\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subjectFactory = subjectFactory;\n        _this._refCount = 0;\n        /** @internal */\n        _this._isComplete = false;\n        return _this;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return higherOrderRefCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable));\nexport { ConnectableObservable };\nvar connectableProto = ConnectableObservable.prototype;\nexport var connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber));\nvar RefCountOperator = /** @class */ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map","import * as tslib_1 from \"tslib\";\nimport { Action } from './Action';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        _this.pending = false;\n        return _this;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action));\nexport { AsyncAction };\n//# sourceMappingURL=AsyncAction.js.map","import * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n/**\n * @class BehaviorSubject<T>\n */\nvar BehaviorSubject = /** @class */ (function (_super) {\n    tslib_1.__extends(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        var _this = _super.call(this) || this;\n        _this._value = _value;\n        return _this;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function () {\n            return this.getValue();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BehaviorSubject.prototype._subscribe = function (subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        if (subscription && !subscription.closed) {\n            subscriber.next(this._value);\n        }\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function () {\n        if (this.hasError) {\n            throw this.thrownError;\n        }\n        else if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return this._value;\n        }\n    };\n    BehaviorSubject.prototype.next = function (value) {\n        _super.prototype.next.call(this, this._value = value);\n    };\n    return BehaviorSubject;\n}(Subject));\nexport { BehaviorSubject };\n//# sourceMappingURL=BehaviorSubject.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = /** @class */ (function (_super) {\n    tslib_1.__extends(Action, _super);\n    function Action(scheduler, work) {\n        return _super.call(this) || this;\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        return this;\n    };\n    return Action;\n}(Subscription));\nexport { Action };\n//# sourceMappingURL=Action.js.map","import * as tslib_1 from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar QueueAction = /** @class */ (function (_super) {\n    tslib_1.__extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        return _this;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return (delay > 0 || this.closed) ?\n            _super.prototype.execute.call(this, state, delay) :\n            this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction));\nexport { QueueAction };\n//# sourceMappingURL=QueueAction.js.map","import * as tslib_1 from \"tslib\";\nimport { Scheduler } from '../Scheduler';\nvar AsyncScheduler = /** @class */ (function (_super) {\n    tslib_1.__extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        _this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        _this.scheduled = undefined;\n        return _this;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler));\nexport { AsyncScheduler };\n//# sourceMappingURL=AsyncScheduler.js.map","/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = /** @class */ (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) { delay = 0; }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexport { Scheduler };\n//# sourceMappingURL=Scheduler.js.map","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nexport var queue = new QueueScheduler(QueueAction);\n//# sourceMappingURL=queue.js.map","import * as tslib_1 from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\nvar QueueScheduler = /** @class */ (function (_super) {\n    tslib_1.__extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QueueScheduler;\n}(AsyncScheduler));\nexport { QueueScheduler };\n//# sourceMappingURL=QueueScheduler.js.map","import { Observable } from '../Observable';\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * {@link Scheduler}. It is preferrable to use this over `empty()`.\n */\nexport var EMPTY = new Observable(function (subscriber) { return subscriber.complete(); });\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * <img src=\"./img/empty.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * @example <caption>Emit the number 7, then complete.</caption>\n * var result = Rx.Observable.empty().startWith(7);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n * var interval = Rx.Observable.interval(1000);\n * var result = interval.mergeMap(x =>\n *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n *\n * @see {@link create}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throw}\n *\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the complete notification.\n * @return {Observable} An \"empty\" Observable: emits only the complete\n * notification.\n * @static true\n * @name empty\n * @owner Observable\n */\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nexport function emptyScheduled(scheduler) {\n    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });\n}\n//# sourceMappingURL=empty.js.map","export function isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map","/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n * @param subscriber The subscriber to subscribe with.\n */\nexport var subscribeToArray = function (array) { return function (subscriber) {\n    for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n    }\n    if (!subscriber.closed) {\n        subscriber.complete();\n    }\n}; };\n//# sourceMappingURL=subscribeToArray.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\nexport function fromArray(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToArray(input));\n    }\n    else {\n        return new Observable(function (subscriber) {\n            var sub = new Subscription();\n            var i = 0;\n            sub.add(scheduler.schedule(function () {\n                if (i === input.length) {\n                    subscriber.complete();\n                    return;\n                }\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    sub.add(this.schedule());\n                }\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromArray.js.map","import { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = /** @class */ (function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return of(this.value);\n            case 'E':\n                return throwError(this.error);\n            case 'C':\n                return empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\nexport { Notification };\n//# sourceMappingURL=Notification.js.map","import { Observable } from '../Observable';\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * <img src=\"./img/throw.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * @example <caption>Emit the number 7, then emit an error.</caption>\n * import { throwError, concat, of } from 'rxjs/create';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n *\n * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n * import { throwError, interval, of } from 'rxjs/create';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 13 ?\n *     throwError('Thirteens are bad') :\n *     of('a', 'b', 'c')\n *   )\n * ).subscribe(x => console.log(x), e => console.error(e));\n *\n * @see {@link create}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throw\n * @owner Observable\n */\nexport function throwError(error, scheduler) {\n    if (!scheduler) {\n        return new Observable(function (subscriber) { return subscriber.error(error); });\n    }\n    else {\n        return new Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });\n    }\n}\nfunction dispatch(_a) {\n    var error = _a.error, subscriber = _a.subscriber;\n    subscriber.error(error);\n}\n//# sourceMappingURL=throwError.js.map","import { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { empty } from './empty';\nimport { scalar } from './scalar';\nexport function of() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var scheduler = args[args.length - 1];\n    if (isScheduler(scheduler)) {\n        args.pop();\n    }\n    else {\n        scheduler = undefined;\n    }\n    switch (args.length) {\n        case 0:\n            return empty(scheduler);\n        case 1:\n            return scheduler ? fromArray(args, scheduler) : scalar(args[0]);\n        default:\n            return fromArray(args, scheduler);\n    }\n}\n//# sourceMappingURL=of.js.map","import { Observable } from '../Observable';\nexport function scalar(value) {\n    var result = new Observable(function (subscriber) {\n        subscriber.next(value);\n        subscriber.complete();\n    });\n    result._isScalar = true;\n    result.value = value;\n    return result;\n}\n//# sourceMappingURL=scalar.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nvar ObserveOnOperator = /** @class */ (function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\nexport { ObserveOnOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ObserveOnSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        var _this = _super.call(this, destination) || this;\n        _this.scheduler = scheduler;\n        _this.delay = delay;\n        return _this;\n    }\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber));\nexport { ObserveOnSubscriber };\nvar ObserveOnMessage = /** @class */ (function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\nexport { ObserveOnMessage };\n//# sourceMappingURL=observeOn.js.map","import * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { queue } from './scheduler/queue';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nvar ReplaySubject = /** @class */ (function (_super) {\n    tslib_1.__extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n        var _this = _super.call(this) || this;\n        _this.scheduler = scheduler;\n        _this._events = [];\n        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        _this._windowTime = windowTime < 1 ? 1 : windowTime;\n        return _this;\n    }\n    ReplaySubject.prototype.next = function (value) {\n        var now = this._getNow();\n        this._events.push(new ReplayEvent(now, value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    ReplaySubject.prototype._subscribe = function (subscriber) {\n        var _events = this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscription = Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscription = Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));\n        }\n        var len = _events.length;\n        for (var i = 0; i < len && !subscriber.closed; i++) {\n            subscriber.next(_events[i].value);\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject));\nexport { ReplaySubject };\nvar ReplayEvent = /** @class */ (function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n//# sourceMappingURL=ReplaySubject.js.map","var nextHandle = 0;\nvar tasksByHandle = {};\nfunction runIfPresent(handle) {\n    var cb = tasksByHandle[handle];\n    if (cb) {\n        cb();\n    }\n}\nexport var Immediate = {\n    setImmediate: function (cb) {\n        var handle = nextHandle++;\n        tasksByHandle[handle] = cb;\n        Promise.resolve().then(function () { return runIfPresent(handle); });\n        return handle;\n    },\n    clearImmediate: function (handle) {\n        delete tasksByHandle[handle];\n    },\n};\n//# sourceMappingURL=Immediate.js.map","import * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { Subscription } from './Subscription';\n/**\n * @class AsyncSubject<T>\n */\nvar AsyncSubject = /** @class */ (function (_super) {\n    tslib_1.__extends(AsyncSubject, _super);\n    function AsyncSubject() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.value = null;\n        _this.hasNext = false;\n        _this.hasCompleted = false;\n        return _this;\n    }\n    AsyncSubject.prototype._subscribe = function (subscriber) {\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.hasCompleted && this.hasNext) {\n            subscriber.next(this.value);\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    AsyncSubject.prototype.next = function (value) {\n        if (!this.hasCompleted) {\n            this.value = value;\n            this.hasNext = true;\n        }\n    };\n    AsyncSubject.prototype.error = function (error) {\n        if (!this.hasCompleted) {\n            _super.prototype.error.call(this, error);\n        }\n    };\n    AsyncSubject.prototype.complete = function () {\n        this.hasCompleted = true;\n        if (this.hasNext) {\n            _super.prototype.next.call(this, this.value);\n        }\n        _super.prototype.complete.call(this);\n    };\n    return AsyncSubject;\n}(Subject));\nexport { AsyncSubject };\n//# sourceMappingURL=AsyncSubject.js.map","import * as tslib_1 from \"tslib\";\nimport { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsapAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AsapAction, _super);\n    function AsapAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        return _this;\n    }\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If a microtask has already been scheduled, don't schedule another\n        // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n        // the current scheduled microtask id.\n        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    };\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested microtask and\n        // set the scheduled flag to undefined so the next AsapAction will schedule\n        // its own.\n        if (scheduler.actions.length === 0) {\n            Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AsapAction;\n}(AsyncAction));\nexport { AsapAction };\n//# sourceMappingURL=AsapAction.js.map","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\nexport var asap = new AsapScheduler(AsapAction);\n//# sourceMappingURL=asap.js.map","import * as tslib_1 from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\nvar AsapScheduler = /** @class */ (function (_super) {\n    tslib_1.__extends(AsapScheduler, _super);\n    function AsapScheduler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AsapScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsapScheduler;\n}(AsyncScheduler));\nexport { AsapScheduler };\n//# sourceMappingURL=AsapScheduler.js.map","import * as tslib_1 from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AnimationFrameAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AnimationFrameAction, _super);\n    function AnimationFrameAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        return _this;\n    }\n    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If an animation frame has already been requested, don't request another\n        // one. If an animation frame hasn't been requested yet, request one. Return\n        // the current animation frame request id.\n        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));\n    };\n    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested animation frame and\n        // set the scheduled flag to undefined so the next AnimationFrameAction will\n        // request its own.\n        if (scheduler.actions.length === 0) {\n            cancelAnimationFrame(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AnimationFrameAction;\n}(AsyncAction));\nexport { AnimationFrameAction };\n//# sourceMappingURL=AnimationFrameAction.js.map","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexport var async = new AsyncScheduler(AsyncAction);\n//# sourceMappingURL=async.js.map","import * as tslib_1 from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nvar VirtualTimeScheduler = /** @class */ (function (_super) {\n    tslib_1.__extends(VirtualTimeScheduler, _super);\n    function VirtualTimeScheduler(SchedulerAction, maxFrames) {\n        if (SchedulerAction === void 0) { SchedulerAction = VirtualAction; }\n        if (maxFrames === void 0) { maxFrames = Number.POSITIVE_INFINITY; }\n        var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;\n        _this.maxFrames = maxFrames;\n        _this.frame = 0;\n        _this.index = -1;\n        return _this;\n    }\n    /**\n     * Prompt the Scheduler to execute all of its queued actions, therefore\n     * clearing its queue.\n     * @return {void}\n     */\n    VirtualTimeScheduler.prototype.flush = function () {\n        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;\n        var error, action;\n        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        }\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    VirtualTimeScheduler.frameTimeFactor = 10;\n    return VirtualTimeScheduler;\n}(AsyncScheduler));\nexport { VirtualTimeScheduler };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar VirtualAction = /** @class */ (function (_super) {\n    tslib_1.__extends(VirtualAction, _super);\n    function VirtualAction(scheduler, work, index) {\n        if (index === void 0) { index = scheduler.index += 1; }\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        _this.index = index;\n        _this.active = true;\n        _this.index = scheduler.index = index;\n        return _this;\n    }\n    VirtualAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (!this.id) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.active = false;\n        // If an action is rescheduled, we save allocations by mutating its state,\n        // pushing it to the end of the scheduler queue, and recycling the action.\n        // But since the VirtualTimeScheduler is used for testing, VirtualActions\n        // must be immutable so they can be inspected later.\n        var action = new VirtualAction(this.scheduler, this.work);\n        this.add(action);\n        return action.schedule(state, delay);\n    };\n    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.delay = scheduler.frame + delay;\n        var actions = scheduler.actions;\n        actions.push(this);\n        actions.sort(VirtualAction.sortActions);\n        return true;\n    };\n    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return undefined;\n    };\n    VirtualAction.prototype._execute = function (state, delay) {\n        if (this.active === true) {\n            return _super.prototype._execute.call(this, state, delay);\n        }\n    };\n    VirtualAction.sortActions = function (a, b) {\n        if (a.delay === b.delay) {\n            if (a.index === b.index) {\n                return 0;\n            }\n            else if (a.index > b.index) {\n                return 1;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (a.delay > b.delay) {\n            return 1;\n        }\n        else {\n            return -1;\n        }\n    };\n    return VirtualAction;\n}(AsyncAction));\nexport { VirtualAction };\n//# sourceMappingURL=VirtualTimeScheduler.js.map","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.animationFrame.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\nexport var animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n//# sourceMappingURL=animationFrame.js.map","import * as tslib_1 from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\nvar AnimationFrameScheduler = /** @class */ (function (_super) {\n    tslib_1.__extends(AnimationFrameScheduler, _super);\n    function AnimationFrameScheduler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AnimationFrameScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AnimationFrameScheduler;\n}(AsyncScheduler));\nexport { AnimationFrameScheduler };\n//# sourceMappingURL=AnimationFrameScheduler.js.map","export function identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map","import * as tslib_1 from \"tslib\";\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nvar ArgumentOutOfRangeError = /** @class */ (function (_super) {\n    tslib_1.__extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var _this = _super.call(this, 'argument out of range') || this;\n        _this.name = 'ArgumentOutOfRangeError';\n        Object.setPrototypeOf(_this, ArgumentOutOfRangeError.prototype);\n        return _this;\n    }\n    return ArgumentOutOfRangeError;\n}(Error));\nexport { ArgumentOutOfRangeError };\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map","import * as tslib_1 from \"tslib\";\n/**\n * An error thrown when duetime elapses.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nvar TimeoutError = /** @class */ (function (_super) {\n    tslib_1.__extends(TimeoutError, _super);\n    function TimeoutError() {\n        var _this = _super.call(this, 'Timeout has occurred') || this;\n        Object.setPrototypeOf(_this, TimeoutError.prototype);\n        return _this;\n    }\n    return TimeoutError;\n}(Error));\nexport { TimeoutError };\n//# sourceMappingURL=TimeoutError.js.map","import * as tslib_1 from \"tslib\";\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nvar EmptyError = /** @class */ (function (_super) {\n    tslib_1.__extends(EmptyError, _super);\n    function EmptyError() {\n        var _this = _super.call(this, 'no elements in sequence') || this;\n        _this.name = 'EmptyError';\n        Object.setPrototypeOf(_this, EmptyError.prototype);\n        return _this;\n    }\n    return EmptyError;\n}(Error));\nexport { EmptyError };\n//# sourceMappingURL=EmptyError.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber));\nexport { OuterSubscriber };\n//# sourceMappingURL=OuterSubscriber.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this.outerValue = outerValue;\n        _this.outerIndex = outerIndex;\n        _this.index = 0;\n        return _this;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber));\nexport { InnerSubscriber };\n//# sourceMappingURL=InnerSubscriber.js.map","export function getSymbolIterator() {\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\n        return '@@iterator';\n    }\n    return Symbol.iterator;\n}\nexport var iterator = getSymbolIterator();\n/**\n * @deprecated use {@link iterator} instead\n */\nexport var $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map","import { Observable } from '../Observable';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function (result) {\n    if (result instanceof Observable) {\n        return function (subscriber) {\n            if (result._isScalar) {\n                subscriber.next(result.value);\n                subscriber.complete();\n                return undefined;\n            }\n            else {\n                return result.subscribe(subscriber);\n            }\n        };\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else if (result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else {\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = \"You provided \" + value + \" where a stream was expected.\"\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map","export var isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArrayLike.js.map","export function isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map","import { hostReportError } from './hostReportError';\nexport var subscribeToPromise = function (promise) { return function (subscriber) {\n    promise.then(function (value) {\n        if (!subscriber.closed) {\n            subscriber.next(value);\n            subscriber.complete();\n        }\n    }, function (err) { return subscriber.error(err); })\n        .then(null, hostReportError);\n    return subscriber;\n}; };\n//# sourceMappingURL=subscribeToPromise.js.map","import { iterator as Symbol_iterator } from '../symbol/iterator';\nexport var subscribeToIterable = function (iterable) { return function (subscriber) {\n    var iterator = iterable[Symbol_iterator]();\n    do {\n        var item = iterator.next();\n        if (item.done) {\n            subscriber.complete();\n            break;\n        }\n        subscriber.next(item.value);\n        if (subscriber.closed) {\n            break;\n        }\n    } while (true);\n    // Finalize the iterator if it happens to be a Generator\n    if (typeof iterator.return === 'function') {\n        subscriber.add(function () {\n            if (iterator.return) {\n                iterator.return();\n            }\n        });\n    }\n    return subscriber;\n}; };\n//# sourceMappingURL=subscribeToIterable.js.map","import { observable as Symbol_observable } from '../symbol/observable';\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n * @param subscriber The Subscriber to use to subscribe to the observable\n */\nexport var subscribeToObservable = function (obj) { return function (subscriber) {\n    var obs = obj[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n        // Should be caught by observable subscribe function error handling.\n        throw new TypeError('Provided object does not correctly implement Symbol.observable');\n    }\n    else {\n        return obs.subscribe(subscriber);\n    }\n}; };\n//# sourceMappingURL=subscribeToObservable.js.map","import { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeTo } from './subscribeTo';\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    return subscribeTo(result)(destination);\n}\n//# sourceMappingURL=subscribeToResult.js.map","import * as tslib_1 from \"tslib\";\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\nvar NONE = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var project = null;\n    var scheduler = null;\n    if (isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return fromArray(observables, scheduler).lift(new CombineLatestOperator(project));\n}\nvar CombineLatestOperator = /** @class */ (function () {\n    function CombineLatestOperator(project) {\n        this.project = project;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n    };\n    return CombineLatestOperator;\n}());\nexport { CombineLatestOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CombineLatestSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.active = 0;\n        _this.values = [];\n        _this.observables = [];\n        return _this;\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(NONE);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === NONE ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.project) {\n                this._tryProject(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\n        var result;\n        try {\n            result = this.project.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber));\nexport { CombineLatestSubscriber };\n//# sourceMappingURL=combineLatest.js.map","import * as tslib_1 from \"tslib\";\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap(project, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function mergeMapOperatorFunction(source) {\n        return source.lift(new MergeMapOperator(project, concurrent));\n    };\n}\nvar MergeMapOperator = /** @class */ (function () {\n    function MergeMapOperator(project, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexport { MergeMapOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber));\nexport { MergeMapSubscriber };\n//# sourceMappingURL=mergeMap.js.map","import * as tslib_1 from \"tslib\";\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/* tslint:enable:max-line-length */\n/**\n * Joins last values emitted by passed Observables.\n *\n * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n *\n * <img src=\"./img/forkJoin.png\" width=\"100%\">\n *\n * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n * or directly as arguments. If no input Observables are provided, resulting stream will complete\n * immediately.\n *\n * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n * array will have `n` values, where first value is the last thing emitted by the first Observable,\n * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n * not emit more than once and it will complete after that. If you need to emit combined values not only\n * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n * or {@link zip} instead.\n *\n * In order for resulting array to have the same length as the number of input Observables, whenever any of\n * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n * and it will not emit anything either, even if it already has some last values from other Observables.\n * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n * unless at any point some other Observable completes without emitting value, which brings us back to\n * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n * have to emit something at least once and complete.\n *\n * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n * will be immediately unsubscribed.\n *\n * Optionally `forkJoin` accepts project function, that will be called with values which normally\n * would land in emitted array. Whatever is returned by project function, will appear in output\n * Observable instead. This means that default project can be thought of as a function that takes\n * all its arguments and puts them into an array. Note that project function will be called only\n * when output Observable is supposed to emit a result.\n *\n * @example <caption>Use forkJoin with operator emitting immediately</caption>\n * import { forkJoin, of } from 'rxjs/create';\n *\n * const observable = forkJoin(\n *   of(1, 2, 3, 4),\n *   of(5, 6, 7, 8)\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!')\n * );\n *\n * // Logs:\n * // [4, 8]\n * // \"This is how it ends!\"\n *\n *\n * @example <caption>Use forkJoin with operator emitting after some time</caption>\n * import { forkJoin, interval } from 'rxjs/create';\n * import { take } from 'rxjs/operators';\n *\n * const observable = forkJoin(\n *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete\n *   interval(500).pipe(take(4)) // emit 0, 1, 2, 3 every half a second and complete\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!')\n * );\n *\n * // Logs:\n * // [2, 3] after 3 seconds\n * // \"This is how it ends!\" immediately after\n *\n *\n * @example <caption>Use forkJoin with project function</caption>\n * import { jorkJoin, interval } from 'rxjs/create';\n * import { take } from 'rxjs/operators';\n *\n * const observable = forkJoin(\n *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete\n *   interval(500).pipe(take(4)), // emit 0, 1, 2, 3 every half a second and complete\n *   (n, m) => n + m\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!')\n * );\n *\n * // Logs:\n * // 5 after 3 seconds\n * // \"This is how it ends!\" immediately after\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n *\n * @param {...ObservableInput} sources Any number of Observables provided either as an array or as an arguments\n * passed directly to the operator.\n * @param {function} [project] Function that takes values emitted by input Observables and returns value\n * that will appear in resulting Observable instead of default array.\n * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n * or value from project function.\n * @static true\n * @name forkJoin\n * @owner Observable\n */\nexport function forkJoin() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    // if the first and only other argument is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3])`\n    if (sources.length === 1 && isArray(sources[0])) {\n        sources = sources[0];\n    }\n    if (sources.length === 0) {\n        return EMPTY;\n    }\n    return new Observable(function (subscriber) {\n        return new ForkJoinSubscriber(subscriber, sources);\n    });\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ForkJoinSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(ForkJoinSubscriber, _super);\n    function ForkJoinSubscriber(destination, sources) {\n        var _this = _super.call(this, destination) || this;\n        _this.sources = sources;\n        _this.completed = 0;\n        _this.haveValues = 0;\n        var len = sources.length;\n        _this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            var source = sources[i];\n            var innerSubscription = subscribeToResult(_this, source, null, i);\n            if (innerSubscription) {\n                _this.add(innerSubscription);\n            }\n        }\n        return _this;\n    }\n    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    };\n    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n        var _a = this, destination = _a.destination, haveValues = _a.haveValues, values = _a.values;\n        var len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            destination.next(values);\n        }\n        destination.complete();\n    };\n    return ForkJoinSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=forkJoin.js.map","import * as tslib_1 from \"tslib\";\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    // if the only argument is an array, it was most likely called with\n    // `race([obs1, obs2, ...])`\n    if (observables.length === 1) {\n        if (isArray(observables[0])) {\n            observables = observables[0];\n        }\n        else {\n            return observables[0];\n        }\n    }\n    return fromArray(observables, undefined).lift(new RaceOperator());\n}\nvar RaceOperator = /** @class */ (function () {\n    function RaceOperator() {\n    }\n    RaceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RaceSubscriber(subscriber));\n    };\n    return RaceOperator;\n}());\nexport { RaceOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RaceSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(RaceSubscriber, _super);\n    function RaceSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasFirst = false;\n        _this.observables = [];\n        _this.subscriptions = [];\n        return _this;\n    }\n    RaceSubscriber.prototype._next = function (observable) {\n        this.observables.push(observable);\n    };\n    RaceSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            for (var i = 0; i < len && !this.hasFirst; i++) {\n                var observable = observables[i];\n                var subscription = subscribeToResult(this, observable, observable, i);\n                if (this.subscriptions) {\n                    this.subscriptions.push(subscription);\n                }\n                this.add(subscription);\n            }\n            this.observables = null;\n        }\n    };\n    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (!this.hasFirst) {\n            this.hasFirst = true;\n            for (var i = 0; i < this.subscriptions.length; i++) {\n                if (i !== outerIndex) {\n                    var subscription = this.subscriptions[i];\n                    subscription.unsubscribe();\n                    this.remove(subscription);\n                }\n            }\n            this.subscriptions = null;\n        }\n        this.destination.next(innerValue);\n    };\n    return RaceSubscriber;\n}(OuterSubscriber));\nexport { RaceSubscriber };\n//# sourceMappingURL=race.js.map","import * as tslib_1 from \"tslib\";\nimport { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zip() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var project = observables[observables.length - 1];\n    if (typeof project === 'function') {\n        observables.pop();\n    }\n    return fromArray(observables, undefined).lift(new ZipOperator(project));\n}\nvar ZipOperator = /** @class */ (function () {\n    function ZipOperator(project) {\n        this.project = project;\n    }\n    ZipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.project));\n    };\n    return ZipOperator;\n}());\nexport { ZipOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(ZipSubscriber, _super);\n    function ZipSubscriber(destination, project, values) {\n        if (values === void 0) { values = Object.create(null); }\n        var _this = _super.call(this, destination) || this;\n        _this.iterators = [];\n        _this.active = 0;\n        _this.project = (typeof project === 'function') ? project : null;\n        _this.values = values;\n        return _this;\n    }\n    ZipSubscriber.prototype._next = function (value) {\n        var iterators = this.iterators;\n        if (isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[Symbol_iterator] === 'function') {\n            iterators.push(new StaticIterator(value[Symbol_iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    };\n    ZipSubscriber.prototype._complete = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                this.add(iterator.subscribe(iterator, i));\n            }\n            else {\n                this.active--; // not an observable\n            }\n        }\n    };\n    ZipSubscriber.prototype.notifyInactive = function () {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ZipSubscriber.prototype.checkIterators = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        var destination = this.destination;\n        // abort if not all of them have values\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        var shouldComplete = false;\n        var args = [];\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            var result = iterator.next();\n            // check to see if it's completed now that you've gotten\n            // the next value.\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.project) {\n            this._tryProject(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    };\n    ZipSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return ZipSubscriber;\n}(Subscriber));\nexport { ZipSubscriber };\nvar StaticIterator = /** @class */ (function () {\n    function StaticIterator(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    StaticIterator.prototype.hasValue = function () {\n        return true;\n    };\n    StaticIterator.prototype.next = function () {\n        var result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    };\n    StaticIterator.prototype.hasCompleted = function () {\n        var nextResult = this.nextResult;\n        return nextResult && nextResult.done;\n    };\n    return StaticIterator;\n}());\nvar StaticArrayIterator = /** @class */ (function () {\n    function StaticArrayIterator(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    StaticArrayIterator.prototype[Symbol_iterator] = function () {\n        return this;\n    };\n    StaticArrayIterator.prototype.next = function (value) {\n        var i = this.index++;\n        var array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    };\n    StaticArrayIterator.prototype.hasValue = function () {\n        return this.array.length > this.index;\n    };\n    StaticArrayIterator.prototype.hasCompleted = function () {\n        return this.array.length === this.index;\n    };\n    return StaticArrayIterator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipBufferIterator = /** @class */ (function (_super) {\n    tslib_1.__extends(ZipBufferIterator, _super);\n    function ZipBufferIterator(destination, parent, observable) {\n        var _this = _super.call(this, destination) || this;\n        _this.parent = parent;\n        _this.observable = observable;\n        _this.stillUnsubscribed = true;\n        _this.buffer = [];\n        _this.isComplete = false;\n        return _this;\n    }\n    ZipBufferIterator.prototype[Symbol_iterator] = function () {\n        return this;\n    };\n    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n    //    this is legit because `next()` will never be called by a subscription in this case.\n    ZipBufferIterator.prototype.next = function () {\n        var buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    };\n    ZipBufferIterator.prototype.hasValue = function () {\n        return this.buffer.length > 0;\n    };\n    ZipBufferIterator.prototype.hasCompleted = function () {\n        return this.buffer.length === 0 && this.isComplete;\n    };\n    ZipBufferIterator.prototype.notifyComplete = function () {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    };\n    ZipBufferIterator.prototype.subscribe = function (value, index) {\n        return subscribeToResult(this, this.observable, this, index);\n    };\n    return ZipBufferIterator;\n}(OuterSubscriber));\n//# sourceMappingURL=zip.js.map","import * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async;\n    if (isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return function bufferTimeOperatorFunction(source) {\n        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n    };\n}\nvar BufferTimeOperator = /** @class */ (function () {\n    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n    }\n    BufferTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    };\n    return BufferTimeOperator;\n}());\nvar Context = /** @class */ (function () {\n    function Context() {\n        this.buffer = [];\n    }\n    return Context;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferTimeSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(BufferTimeSubscriber, _super);\n    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferTimeSpan = bufferTimeSpan;\n        _this.bufferCreationInterval = bufferCreationInterval;\n        _this.maxBufferSize = maxBufferSize;\n        _this.scheduler = scheduler;\n        _this.contexts = [];\n        var context = _this.openContext();\n        _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n        if (_this.timespanOnly) {\n            var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };\n            _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n        else {\n            var closeState = { subscriber: _this, context: context };\n            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };\n            _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n            _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n        }\n        return _this;\n    }\n    BufferTimeSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        var filledBufferContext;\n        for (var i = 0; i < len; i++) {\n            var context_1 = contexts[i];\n            var buffer = context_1.buffer;\n            buffer.push(value);\n            if (buffer.length == this.maxBufferSize) {\n                filledBufferContext = context_1;\n            }\n        }\n        if (filledBufferContext) {\n            this.onBufferFull(filledBufferContext);\n        }\n    };\n    BufferTimeSubscriber.prototype._error = function (err) {\n        this.contexts.length = 0;\n        _super.prototype._error.call(this, err);\n    };\n    BufferTimeSubscriber.prototype._complete = function () {\n        var _a = this, contexts = _a.contexts, destination = _a.destination;\n        while (contexts.length > 0) {\n            var context_2 = contexts.shift();\n            destination.next(context_2.buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    BufferTimeSubscriber.prototype._unsubscribe = function () {\n        this.contexts = null;\n    };\n    BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n        this.closeContext(context);\n        var closeAction = context.closeAction;\n        closeAction.unsubscribe();\n        this.remove(closeAction);\n        if (!this.closed && this.timespanOnly) {\n            context = this.openContext();\n            var bufferTimeSpan = this.bufferTimeSpan;\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n    };\n    BufferTimeSubscriber.prototype.openContext = function () {\n        var context = new Context();\n        this.contexts.push(context);\n        return context;\n    };\n    BufferTimeSubscriber.prototype.closeContext = function (context) {\n        this.destination.next(context.buffer);\n        var contexts = this.contexts;\n        var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n        if (spliceIndex >= 0) {\n            contexts.splice(contexts.indexOf(context), 1);\n        }\n    };\n    return BufferTimeSubscriber;\n}(Subscriber));\nfunction dispatchBufferTimeSpanOnly(state) {\n    var subscriber = state.subscriber;\n    var prevContext = state.context;\n    if (prevContext) {\n        subscriber.closeContext(prevContext);\n    }\n    if (!subscriber.closed) {\n        state.context = subscriber.openContext();\n        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n    }\n}\nfunction dispatchBufferCreation(state) {\n    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;\n    var context = subscriber.openContext();\n    var action = this;\n    if (!subscriber.closed) {\n        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));\n        action.schedule(state, bufferCreationInterval);\n    }\n}\nfunction dispatchBufferClose(arg) {\n    var subscriber = arg.subscriber, context = arg.context;\n    subscriber.closeContext(context);\n}\n//# sourceMappingURL=bufferTime.js.map","import * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nvar AuditOperator = /** @class */ (function () {\n    function AuditOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    AuditOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    };\n    return AuditOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AuditSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(AuditSubscriber, _super);\n    function AuditSubscriber(destination, durationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.durationSelector = durationSelector;\n        _this.hasValue = false;\n        return _this;\n    }\n    AuditSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            var duration = tryCatch(this.durationSelector)(value);\n            if (duration === errorObject) {\n                this.destination.error(errorObject.e);\n            }\n            else {\n                var innerSubscription = subscribeToResult(this, duration);\n                if (innerSubscription.closed) {\n                    this.clearThrottle();\n                }\n                else {\n                    this.add(this.throttled = innerSubscription);\n                }\n            }\n        }\n    };\n    AuditSubscriber.prototype.clearThrottle = function () {\n        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    };\n    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    };\n    AuditSubscriber.prototype.notifyComplete = function () {\n        this.clearThrottle();\n    };\n    return AuditSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=audit.js.map","import * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer(closingNotifier) {\n    return function bufferOperatorFunction(source) {\n        return source.lift(new BufferOperator(closingNotifier));\n    };\n}\nvar BufferOperator = /** @class */ (function () {\n    function BufferOperator(closingNotifier) {\n        this.closingNotifier = closingNotifier;\n    }\n    BufferOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n    };\n    return BufferOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(BufferSubscriber, _super);\n    function BufferSubscriber(destination, closingNotifier) {\n        var _this = _super.call(this, destination) || this;\n        _this.buffer = [];\n        _this.add(subscribeToResult(_this, closingNotifier));\n        return _this;\n    }\n    BufferSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var buffer = this.buffer;\n        this.buffer = [];\n        this.destination.next(buffer);\n    };\n    return BufferSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=buffer.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) { startBufferEvery = null; }\n    return function bufferCountOperatorFunction(source) {\n        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n    };\n}\nvar BufferCountOperator = /** @class */ (function () {\n    function BufferCountOperator(bufferSize, startBufferEvery) {\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        if (!startBufferEvery || bufferSize === startBufferEvery) {\n            this.subscriberClass = BufferCountSubscriber;\n        }\n        else {\n            this.subscriberClass = BufferSkipCountSubscriber;\n        }\n    }\n    BufferCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n    };\n    return BufferCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferCountSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(BufferCountSubscriber, _super);\n    function BufferCountSubscriber(destination, bufferSize) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferSize = bufferSize;\n        _this.buffer = [];\n        return _this;\n    }\n    BufferCountSubscriber.prototype._next = function (value) {\n        var buffer = this.buffer;\n        buffer.push(value);\n        if (buffer.length == this.bufferSize) {\n            this.destination.next(buffer);\n            this.buffer = [];\n        }\n    };\n    BufferCountSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer.length > 0) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferCountSubscriber;\n}(Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSkipCountSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(BufferSkipCountSubscriber, _super);\n    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferSize = bufferSize;\n        _this.startBufferEvery = startBufferEvery;\n        _this.buffers = [];\n        _this.count = 0;\n        return _this;\n    }\n    BufferSkipCountSubscriber.prototype._next = function (value) {\n        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;\n        this.count++;\n        if (count % startBufferEvery === 0) {\n            buffers.push([]);\n        }\n        for (var i = buffers.length; i--;) {\n            var buffer = buffers[i];\n            buffer.push(value);\n            if (buffer.length === bufferSize) {\n                buffers.splice(i, 1);\n                this.destination.next(buffer);\n            }\n        }\n    };\n    BufferSkipCountSubscriber.prototype._complete = function () {\n        var _a = this, buffers = _a.buffers, destination = _a.destination;\n        while (buffers.length > 0) {\n            var buffer = buffers.shift();\n            if (buffer.length > 0) {\n                destination.next(buffer);\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferSkipCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=bufferCount.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = async; }\n    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };\n}\nvar DebounceTimeOperator = /** @class */ (function () {\n    function DebounceTimeOperator(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    };\n    return DebounceTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceTimeSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(DebounceTimeSubscriber, _super);\n    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.dueTime = dueTime;\n        _this.scheduler = scheduler;\n        _this.debouncedSubscription = null;\n        _this.lastValue = null;\n        _this.hasValue = false;\n        return _this;\n    }\n    DebounceTimeSubscriber.prototype._next = function (value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    };\n    DebounceTimeSubscriber.prototype._complete = function () {\n        this.debouncedNext();\n        this.destination.complete();\n    };\n    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n        this.clearDebounce();\n        if (this.hasValue) {\n            var lastValue = this.lastValue;\n            // This must be done *before* passing the value\n            // along to the destination because it's possible for\n            // the value to synchronously re-enter this operator\n            // recursively when scheduled with things like\n            // VirtualScheduler/TestScheduler.\n            this.lastValue = null;\n            this.hasValue = false;\n            this.destination.next(lastValue);\n        }\n    };\n    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n        var debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    };\n    return DebounceTimeSubscriber;\n}(Subscriber));\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n//# sourceMappingURL=debounceTime.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle(openings, closingSelector) {\n    return function bufferToggleOperatorFunction(source) {\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\n    };\n}\nvar BufferToggleOperator = /** @class */ (function () {\n    function BufferToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    BufferToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return BufferToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferToggleSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(BufferToggleSubscriber, _super);\n    function BufferToggleSubscriber(destination, openings, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.openings = openings;\n        _this.closingSelector = closingSelector;\n        _this.contexts = [];\n        _this.add(subscribeToResult(_this, openings));\n        return _this;\n    }\n    BufferToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        for (var i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    };\n    BufferToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context_1 = contexts.shift();\n            context_1.subscription.unsubscribe();\n            context_1.buffer = null;\n            context_1.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._error.call(this, err);\n    };\n    BufferToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context_2 = contexts.shift();\n            this.destination.next(context_2.buffer);\n            context_2.subscription.unsubscribe();\n            context_2.buffer = null;\n            context_2.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._complete.call(this);\n    };\n    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    };\n    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.closeBuffer(innerSub.context);\n    };\n    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n        try {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n        var contexts = this.contexts;\n        if (contexts && context) {\n            var buffer = context.buffer, subscription = context.subscription;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    };\n    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n        var contexts = this.contexts;\n        var buffer = [];\n        var subscription = new Subscription();\n        var context = { buffer: buffer, subscription: subscription };\n        contexts.push(context);\n        var innerSubscription = subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    };\n    return BufferToggleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=bufferToggle.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nvar BufferWhenOperator = /** @class */ (function () {\n    function BufferWhenOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    BufferWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    };\n    return BufferWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferWhenSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(BufferWhenSubscriber, _super);\n    function BufferWhenSubscriber(destination, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.closingSelector = closingSelector;\n        _this.subscribing = false;\n        _this.openBuffer();\n        return _this;\n    }\n    BufferWhenSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferWhenSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    BufferWhenSubscriber.prototype._unsubscribe = function () {\n        this.buffer = null;\n        this.subscribing = false;\n    };\n    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openBuffer();\n    };\n    BufferWhenSubscriber.prototype.notifyComplete = function () {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    };\n    BufferWhenSubscriber.prototype.openBuffer = function () {\n        var closingSubscription = this.closingSubscription;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        var buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        var closingNotifier = tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject) {\n            this.error(errorObject.e);\n        }\n        else {\n            closingSubscription = new Subscription();\n            this.closingSubscription = closingSubscription;\n            this.add(closingSubscription);\n            this.subscribing = true;\n            closingSubscription.add(subscribeToResult(this, closingNotifier));\n            this.subscribing = false;\n        }\n    };\n    return BufferWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=bufferWhen.js.map","import * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError(selector) {\n    return function catchErrorOperatorFunction(source) {\n        var operator = new CatchOperator(selector);\n        var caught = source.lift(operator);\n        return (operator.caught = caught);\n    };\n}\nvar CatchOperator = /** @class */ (function () {\n    function CatchOperator(selector) {\n        this.selector = selector;\n    }\n    CatchOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n    };\n    return CatchOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CatchSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(CatchSubscriber, _super);\n    function CatchSubscriber(destination, selector, caught) {\n        var _this = _super.call(this, destination) || this;\n        _this.selector = selector;\n        _this.caught = caught;\n        return _this;\n    }\n    // NOTE: overriding `error` instead of `_error` because we don't want\n    // to have this flag this subscriber as `isStopped`. We can mimic the\n    // behavior of the RetrySubscriber (from the `retry` operator), where\n    // we unsubscribe from our source chain, reset our Subscriber flags,\n    // then subscribe to the selector result.\n    CatchSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var result = void 0;\n            try {\n                result = this.selector(err, this.caught);\n            }\n            catch (err2) {\n                _super.prototype.error.call(this, err2);\n                return;\n            }\n            this._unsubscribeAndRecycle();\n            this.add(subscribeToResult(this, result));\n        }\n    };\n    return CatchSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=catchError.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count(predicate) {\n    return function (source) { return source.lift(new CountOperator(predicate, source)); };\n}\nvar CountOperator = /** @class */ (function () {\n    function CountOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    CountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    };\n    return CountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CountSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(CountSubscriber, _super);\n    function CountSubscriber(destination, predicate, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.count = 0;\n        _this.index = 0;\n        return _this;\n    }\n    CountSubscriber.prototype._next = function (value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._tryPredicate = function (value) {\n        var result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._complete = function () {\n        this.destination.next(this.count);\n        this.destination.complete();\n    };\n    return CountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=count.js.map","import * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce(durationSelector) {\n    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };\n}\nvar DebounceOperator = /** @class */ (function () {\n    function DebounceOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    DebounceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n    };\n    return DebounceOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(DebounceSubscriber, _super);\n    function DebounceSubscriber(destination, durationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.durationSelector = durationSelector;\n        _this.hasValue = false;\n        _this.durationSubscription = null;\n        return _this;\n    }\n    DebounceSubscriber.prototype._next = function (value) {\n        try {\n            var result = this.durationSelector.call(this, value);\n            if (result) {\n                this._tryNext(value, result);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DebounceSubscriber.prototype._complete = function () {\n        this.emitValue();\n        this.destination.complete();\n    };\n    DebounceSubscriber.prototype._tryNext = function (value, duration) {\n        var subscription = this.durationSubscription;\n        this.value = value;\n        this.hasValue = true;\n        if (subscription) {\n            subscription.unsubscribe();\n            this.remove(subscription);\n        }\n        subscription = subscribeToResult(this, duration);\n        if (subscription && !subscription.closed) {\n            this.add(this.durationSubscription = subscription);\n        }\n    };\n    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            var value = this.value;\n            var subscription = this.durationSubscription;\n            if (subscription) {\n                this.durationSubscription = null;\n                subscription.unsubscribe();\n                this.remove(subscription);\n            }\n            // This must be done *before* passing the value\n            // along to the destination because it's possible for\n            // the value to synchronously re-enter this operator\n            // recursively if the duration selector Observable\n            // emits synchronously\n            this.value = null;\n            this.hasValue = false;\n            _super.prototype._next.call(this, value);\n        }\n    };\n    return DebounceSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=debounce.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) { defaultValue = null; }\n    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };\n}\nvar DefaultIfEmptyOperator = /** @class */ (function () {\n    function DefaultIfEmptyOperator(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n    };\n    return DefaultIfEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DefaultIfEmptySubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(DefaultIfEmptySubscriber, _super);\n    function DefaultIfEmptySubscriber(destination, defaultValue) {\n        var _this = _super.call(this, destination) || this;\n        _this.defaultValue = defaultValue;\n        _this.isEmpty = true;\n        return _this;\n    }\n    DefaultIfEmptySubscriber.prototype._next = function (value) {\n        this.isEmpty = false;\n        this.destination.next(value);\n    };\n    DefaultIfEmptySubscriber.prototype._complete = function () {\n        if (this.isEmpty) {\n            this.destination.next(this.defaultValue);\n        }\n        this.destination.complete();\n    };\n    return DefaultIfEmptySubscriber;\n}(Subscriber));\n//# sourceMappingURL=defaultIfEmpty.js.map","import * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay(delay, scheduler) {\n    if (scheduler === void 0) { scheduler = async; }\n    var absoluteDelay = isDate(delay);\n    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };\n}\nvar DelayOperator = /** @class */ (function () {\n    function DelayOperator(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    DelayOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    };\n    return DelayOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelaySubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(DelaySubscriber, _super);\n    function DelaySubscriber(destination, delay, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.delay = delay;\n        _this.scheduler = scheduler;\n        _this.queue = [];\n        _this.active = false;\n        _this.errored = false;\n        return _this;\n    }\n    DelaySubscriber.dispatch = function (state) {\n        var source = state.source;\n        var queue = source.queue;\n        var scheduler = state.scheduler;\n        var destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay_1);\n        }\n        else {\n            source.active = false;\n        }\n    };\n    DelaySubscriber.prototype._schedule = function (scheduler) {\n        this.active = true;\n        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    };\n    DelaySubscriber.prototype.scheduleNotification = function (notification) {\n        if (this.errored === true) {\n            return;\n        }\n        var scheduler = this.scheduler;\n        var message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    };\n    DelaySubscriber.prototype._next = function (value) {\n        this.scheduleNotification(Notification.createNext(value));\n    };\n    DelaySubscriber.prototype._error = function (err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n    };\n    DelaySubscriber.prototype._complete = function () {\n        this.scheduleNotification(Notification.createComplete());\n    };\n    return DelaySubscriber;\n}(Subscriber));\nvar DelayMessage = /** @class */ (function () {\n    function DelayMessage(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n    return DelayMessage;\n}());\n//# sourceMappingURL=delay.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return function (source) {\n            return new SubscriptionDelayObservable(source, subscriptionDelay)\n                .lift(new DelayWhenOperator(delayDurationSelector));\n        };\n    }\n    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };\n}\nvar DelayWhenOperator = /** @class */ (function () {\n    function DelayWhenOperator(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    DelayWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    };\n    return DelayWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelayWhenSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(DelayWhenSubscriber, _super);\n    function DelayWhenSubscriber(destination, delayDurationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.delayDurationSelector = delayDurationSelector;\n        _this.completed = false;\n        _this.delayNotifierSubscriptions = [];\n        _this.values = [];\n        return _this;\n    }\n    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        var value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype._next = function (value) {\n        try {\n            var delayNotifier = this.delayDurationSelector(value);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DelayWhenSubscriber.prototype._complete = function () {\n        this.completed = true;\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n        subscription.unsubscribe();\n        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        var value = null;\n        if (subscriptionIdx !== -1) {\n            value = this.values[subscriptionIdx];\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n            this.values.splice(subscriptionIdx, 1);\n        }\n        return value;\n    };\n    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n        var notifierSubscription = subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            this.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n        this.values.push(value);\n    };\n    DelayWhenSubscriber.prototype.tryComplete = function () {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    };\n    return DelayWhenSubscriber;\n}(OuterSubscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelayObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(SubscriptionDelayObservable, _super);\n    function SubscriptionDelayObservable(source, subscriptionDelay) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subscriptionDelay = subscriptionDelay;\n        return _this;\n    }\n    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    };\n    return SubscriptionDelayObservable;\n}(Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelaySubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SubscriptionDelaySubscriber, _super);\n    function SubscriptionDelaySubscriber(parent, source) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this.source = source;\n        _this.sourceSubscribed = false;\n        return _this;\n    }\n    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype._error = function (err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    };\n    SubscriptionDelaySubscriber.prototype._complete = function () {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    };\n    return SubscriptionDelaySubscriber;\n}(Subscriber));\n//# sourceMappingURL=delayWhen.js.map","import * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nif (!Set) {\n    throw new Error('Set is not present, please polyfill');\n}\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct(keySelector, flushes) {\n    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };\n}\nvar DistinctOperator = /** @class */ (function () {\n    function DistinctOperator(keySelector, flushes) {\n        this.keySelector = keySelector;\n        this.flushes = flushes;\n    }\n    DistinctOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    };\n    return DistinctOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(DistinctSubscriber, _super);\n    function DistinctSubscriber(destination, keySelector, flushes) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.values = new Set();\n        if (flushes) {\n            _this.add(subscribeToResult(_this, flushes));\n        }\n        return _this;\n    }\n    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values.clear();\n    };\n    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DistinctSubscriber.prototype._next = function (value) {\n        if (this.keySelector) {\n            this._useKeySelector(value);\n        }\n        else {\n            this._finalizeNext(value, value);\n        }\n    };\n    DistinctSubscriber.prototype._useKeySelector = function (value) {\n        var key;\n        var destination = this.destination;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this._finalizeNext(key, value);\n    };\n    DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n        var values = this.values;\n        if (!values.has(key)) {\n            values.add(key);\n            this.destination.next(value);\n        }\n    };\n    return DistinctSubscriber;\n}(OuterSubscriber));\nexport { DistinctSubscriber };\n//# sourceMappingURL=distinct.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize() {\n    return function dematerializeOperatorFunction(source) {\n        return source.lift(new DeMaterializeOperator());\n    };\n}\nvar DeMaterializeOperator = /** @class */ (function () {\n    function DeMaterializeOperator() {\n    }\n    DeMaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DeMaterializeSubscriber(subscriber));\n    };\n    return DeMaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DeMaterializeSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(DeMaterializeSubscriber, _super);\n    function DeMaterializeSubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    DeMaterializeSubscriber.prototype._next = function (value) {\n        value.observe(this.destination);\n    };\n    return DeMaterializeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=dematerialize.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n/** Assert that map is present for this operator */\nif (!Map) {\n    throw new Error('Map not found, please polyfill');\n}\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return function (source) {\n        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n    };\n}\nvar GroupByOperator = /** @class */ (function () {\n    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    GroupByOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    };\n    return GroupByOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupBySubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(GroupBySubscriber, _super);\n    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.elementSelector = elementSelector;\n        _this.durationSelector = durationSelector;\n        _this.subjectSelector = subjectSelector;\n        _this.groups = null;\n        _this.attemptedToUnsubscribe = false;\n        _this.count = 0;\n        return _this;\n    }\n    GroupBySubscriber.prototype._next = function (value) {\n        var key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    };\n    GroupBySubscriber.prototype._group = function (value, key) {\n        var groups = this.groups;\n        if (!groups) {\n            groups = this.groups = new Map();\n        }\n        var group = groups.get(key);\n        var element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = (this.subjectSelector ? this.subjectSelector() : new Subject());\n            groups.set(key, group);\n            var groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                var duration = void 0;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    };\n    GroupBySubscriber.prototype._error = function (err) {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    };\n    GroupBySubscriber.prototype._complete = function () {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    };\n    GroupBySubscriber.prototype.removeGroup = function (key) {\n        this.groups.delete(key);\n    };\n    GroupBySubscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                _super.prototype.unsubscribe.call(this);\n            }\n        }\n    };\n    return GroupBySubscriber;\n}(Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupDurationSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(GroupDurationSubscriber, _super);\n    function GroupDurationSubscriber(key, group, parent) {\n        var _this = _super.call(this, group) || this;\n        _this.key = key;\n        _this.group = group;\n        _this.parent = parent;\n        return _this;\n    }\n    GroupDurationSubscriber.prototype._next = function (value) {\n        this.complete();\n    };\n    GroupDurationSubscriber.prototype._unsubscribe = function () {\n        var _a = this, parent = _a.parent, key = _a.key;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    };\n    return GroupDurationSubscriber;\n}(Subscriber));\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nvar GroupedObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(GroupedObservable, _super);\n    function GroupedObservable(key, groupSubject, refCountSubscription) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.groupSubject = groupSubject;\n        _this.refCountSubscription = refCountSubscription;\n        return _this;\n    }\n    GroupedObservable.prototype._subscribe = function (subscriber) {\n        var subscription = new Subscription();\n        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    };\n    return GroupedObservable;\n}(Observable));\nexport { GroupedObservable };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerRefCountSubscription = /** @class */ (function (_super) {\n    tslib_1.__extends(InnerRefCountSubscription, _super);\n    function InnerRefCountSubscription(parent) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        parent.count++;\n        return _this;\n    }\n    InnerRefCountSubscription.prototype.unsubscribe = function () {\n        var parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            _super.prototype.unsubscribe.call(this);\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    };\n    return InnerRefCountSubscription;\n}(Subscription));\n//# sourceMappingURL=groupBy.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged(compare, keySelector) {\n    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };\n}\nvar DistinctUntilChangedOperator = /** @class */ (function () {\n    function DistinctUntilChangedOperator(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    };\n    return DistinctUntilChangedOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctUntilChangedSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(DistinctUntilChangedSubscriber, _super);\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.hasKey = false;\n        if (typeof compare === 'function') {\n            _this.compare = compare;\n        }\n        return _this;\n    }\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n        return x === y;\n    };\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n        var keySelector = this.keySelector;\n        var key = value;\n        if (keySelector) {\n            key = tryCatch(this.keySelector)(value);\n            if (key === errorObject) {\n                return this.destination.error(errorObject.e);\n            }\n        }\n        var result = false;\n        if (this.hasKey) {\n            result = tryCatch(this.compare)(this.key, key);\n            if (result === errorObject) {\n                return this.destination.error(errorObject.e);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (Boolean(result) === false) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    };\n    return DistinctUntilChangedSubscriber;\n}(Subscriber));\n//# sourceMappingURL=distinctUntilChanged.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt(index, defaultValue) {\n    return function (source) { return source.lift(new ElementAtOperator(index, defaultValue)); };\n}\nvar ElementAtOperator = /** @class */ (function () {\n    function ElementAtOperator(index, defaultValue) {\n        this.index = index;\n        this.defaultValue = defaultValue;\n        if (index < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    ElementAtOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n    };\n    return ElementAtOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ElementAtSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(ElementAtSubscriber, _super);\n    function ElementAtSubscriber(destination, index, defaultValue) {\n        var _this = _super.call(this, destination) || this;\n        _this.index = index;\n        _this.defaultValue = defaultValue;\n        return _this;\n    }\n    ElementAtSubscriber.prototype._next = function (x) {\n        if (this.index-- === 0) {\n            this.destination.next(x);\n            this.destination.complete();\n        }\n    };\n    ElementAtSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index >= 0) {\n            if (typeof this.defaultValue !== 'undefined') {\n                destination.next(this.defaultValue);\n            }\n            else {\n                destination.error(new ArgumentOutOfRangeError);\n            }\n        }\n        destination.complete();\n    };\n    return ElementAtSubscriber;\n}(Subscriber));\n//# sourceMappingURL=elementAt.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every(predicate, thisArg) {\n    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };\n}\nvar EveryOperator = /** @class */ (function () {\n    function EveryOperator(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    EveryOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    };\n    return EveryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar EverySubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(EverySubscriber, _super);\n    function EverySubscriber(destination, predicate, thisArg, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.thisArg = thisArg;\n        _this.source = source;\n        _this.index = 0;\n        _this.thisArg = thisArg || _this;\n        return _this;\n    }\n    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    };\n    EverySubscriber.prototype._next = function (value) {\n        var result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    };\n    EverySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return EverySubscriber;\n}(Subscriber));\n//# sourceMappingURL=every.js.map","import * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust() {\n    return function (source) { return source.lift(new SwitchFirstOperator()); };\n}\nvar SwitchFirstOperator = /** @class */ (function () {\n    function SwitchFirstOperator() {\n    }\n    SwitchFirstOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstSubscriber(subscriber));\n    };\n    return SwitchFirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SwitchFirstSubscriber, _super);\n    function SwitchFirstSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasCompleted = false;\n        _this.hasSubscription = false;\n        return _this;\n    }\n    SwitchFirstSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.hasSubscription = true;\n            this.add(subscribeToResult(this, value));\n        }\n    };\n    SwitchFirstSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=exhaust.js.map","import * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap(project) {\n    return function (source) {\n        return source.lift(new SwitchFirstMapOperator(project));\n    };\n}\nvar SwitchFirstMapOperator = /** @class */ (function () {\n    function SwitchFirstMapOperator(project) {\n        this.project = project;\n    }\n    SwitchFirstMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project));\n    };\n    return SwitchFirstMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstMapSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SwitchFirstMapSubscriber, _super);\n    function SwitchFirstMapSubscriber(destination, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.hasSubscription = false;\n        _this.hasCompleted = false;\n        _this.index = 0;\n        return _this;\n    }\n    SwitchFirstMapSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.tryNext(value);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.tryNext = function (value) {\n        var index = this.index++;\n        var destination = this.destination;\n        try {\n            var result = this.project(value, index);\n            this.hasSubscription = true;\n            this.add(subscribeToResult(this, result, value, index));\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    SwitchFirstMapSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=exhaustMap.js.map","import * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (scheduler === void 0) { scheduler = undefined; }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };\n}\nvar ExpandOperator = /** @class */ (function () {\n    function ExpandOperator(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    ExpandOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    };\n    return ExpandOperator;\n}());\nexport { ExpandOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ExpandSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(ExpandSubscriber, _super);\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.scheduler = scheduler;\n        _this.index = 0;\n        _this.active = 0;\n        _this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            _this.buffer = [];\n        }\n        return _this;\n    }\n    ExpandSubscriber.dispatch = function (arg) {\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n        subscriber.subscribeToProjection(result, value, index);\n    };\n    ExpandSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        var index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            var result = tryCatch(this.project)(value, index);\n            if (result === errorObject) {\n                destination.error(errorObject.e);\n            }\n            else if (!this.scheduler) {\n                this.subscribeToProjection(result, value, index);\n            }\n            else {\n                var state = { subscriber: this, result: result, value: value, index: index };\n                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n        this.active++;\n        this.add(subscribeToResult(this, result, value, index));\n    };\n    ExpandSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._next(innerValue);\n    };\n    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    return ExpandSubscriber;\n}(OuterSubscriber));\nexport { ExpandSubscriber };\n//# sourceMappingURL=expand.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nvar FilterOperator = /** @class */ (function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.thisArg = thisArg;\n        _this.count = 0;\n        return _this;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber));\n//# sourceMappingURL=filter.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize(callback) {\n    return function (source) { return source.lift(new FinallyOperator(callback)); };\n}\nvar FinallyOperator = /** @class */ (function () {\n    function FinallyOperator(callback) {\n        this.callback = callback;\n    }\n    FinallyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n    };\n    return FinallyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FinallySubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(FinallySubscriber, _super);\n    function FinallySubscriber(destination, callback) {\n        var _this = _super.call(this, destination) || this;\n        _this.add(new Subscription(callback));\n        return _this;\n    }\n    return FinallySubscriber;\n}(Subscriber));\n//# sourceMappingURL=finalize.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find(predicate, thisArg) {\n    if (typeof predicate !== 'function') {\n        throw new TypeError('predicate is not a function');\n    }\n    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };\n}\nvar FindValueOperator = /** @class */ (function () {\n    function FindValueOperator(predicate, source, yieldIndex, thisArg) {\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n    }\n    FindValueOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n    };\n    return FindValueOperator;\n}());\nexport { FindValueOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FindValueSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(FindValueSubscriber, _super);\n    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.yieldIndex = yieldIndex;\n        _this.thisArg = thisArg;\n        _this.index = 0;\n        return _this;\n    }\n    FindValueSubscriber.prototype.notifyComplete = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    FindValueSubscriber.prototype._next = function (value) {\n        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;\n        var index = this.index++;\n        try {\n            var result = predicate.call(thisArg || this, value, index, this.source);\n            if (result) {\n                this.notifyComplete(this.yieldIndex ? index : value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    FindValueSubscriber.prototype._complete = function () {\n        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n    };\n    return FindValueSubscriber;\n}(Subscriber));\nexport { FindValueSubscriber };\n//# sourceMappingURL=find.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first(predicate, defaultValue) {\n    return function (source) { return source.lift(new FirstOperator(predicate, defaultValue, source)); };\n}\nvar FirstOperator = /** @class */ (function () {\n    function FirstOperator(predicate, defaultValue, source) {\n        this.predicate = predicate;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    FirstOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FirstSubscriber(observer, this.predicate, this.defaultValue, this.source));\n    };\n    return FirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FirstSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(FirstSubscriber, _super);\n    function FirstSubscriber(destination, predicate, defaultValue, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.defaultValue = defaultValue;\n        _this.source = source;\n        _this.index = 0;\n        _this.hasCompleted = false;\n        _this._emitted = false;\n        return _this;\n    }\n    FirstSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            this._emit(value);\n        }\n    };\n    FirstSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this._emit(value);\n        }\n    };\n    FirstSubscriber.prototype._emit = function (value) {\n        var destination = this.destination;\n        if (!this._emitted) {\n            this._emitted = true;\n            destination.next(value);\n            destination.complete();\n            this.hasCompleted = true;\n        }\n    };\n    FirstSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n            destination.next(this.defaultValue);\n            destination.complete();\n        }\n        else if (!this.hasCompleted) {\n            destination.error(new EmptyError());\n        }\n    };\n    return FirstSubscriber;\n}(Subscriber));\n//# sourceMappingURL=first.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime(period, scheduler) {\n    if (scheduler === void 0) { scheduler = async; }\n    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };\n}\nvar SampleTimeOperator = /** @class */ (function () {\n    function SampleTimeOperator(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    SampleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    };\n    return SampleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleTimeSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SampleTimeSubscriber, _super);\n    function SampleTimeSubscriber(destination, period, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.period = period;\n        _this.scheduler = scheduler;\n        _this.hasValue = false;\n        _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));\n        return _this;\n    }\n    SampleTimeSubscriber.prototype._next = function (value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    };\n    SampleTimeSubscriber.prototype.notifyNext = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    };\n    return SampleTimeSubscriber;\n}(Subscriber));\nfunction dispatchNotification(state) {\n    var subscriber = state.subscriber, period = state.period;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n//# sourceMappingURL=sampleTime.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements() {\n    return function ignoreElementsOperatorFunction(source) {\n        return source.lift(new IgnoreElementsOperator());\n    };\n}\nvar IgnoreElementsOperator = /** @class */ (function () {\n    function IgnoreElementsOperator() {\n    }\n    IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n    };\n    return IgnoreElementsOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IgnoreElementsSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(IgnoreElementsSubscriber, _super);\n    function IgnoreElementsSubscriber() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    IgnoreElementsSubscriber.prototype._next = function (unused) {\n        // Do nothing\n    };\n    return IgnoreElementsSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ignoreElements.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function isEmpty() {\n    return function (source) { return source.lift(new IsEmptyOperator()); };\n}\nvar IsEmptyOperator = /** @class */ (function () {\n    function IsEmptyOperator() {\n    }\n    IsEmptyOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new IsEmptySubscriber(observer));\n    };\n    return IsEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IsEmptySubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(IsEmptySubscriber, _super);\n    function IsEmptySubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n        var destination = this.destination;\n        destination.next(isEmpty);\n        destination.complete();\n    };\n    IsEmptySubscriber.prototype._next = function (value) {\n        this.notifyComplete(false);\n    };\n    IsEmptySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return IsEmptySubscriber;\n}(Subscriber));\n//# sourceMappingURL=isEmpty.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} [predicate] - The condition any source emitted item has to satisfy.\n * @param {any} [defaultValue] - An optional default value to provide if last\n * predicate isn't met or no values were emitted.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n */\nexport function last(predicate, defaultValue) {\n    return function (source) { return source.lift(new LastOperator(predicate, defaultValue, source)); };\n}\nvar LastOperator = /** @class */ (function () {\n    function LastOperator(predicate, defaultValue, source) {\n        this.predicate = predicate;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    LastOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new LastSubscriber(observer, this.predicate, this.defaultValue, this.source));\n    };\n    return LastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar LastSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(LastSubscriber, _super);\n    function LastSubscriber(destination, predicate, defaultValue, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.defaultValue = defaultValue;\n        _this.source = source;\n        _this.hasValue = false;\n        _this.index = 0;\n        if (typeof defaultValue !== 'undefined') {\n            _this.lastValue = defaultValue;\n            _this.hasValue = true;\n        }\n        return _this;\n    }\n    LastSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.hasValue) {\n            destination.next(this.lastValue);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError);\n        }\n    };\n    return LastSubscriber;\n}(Subscriber));\n//# sourceMappingURL=last.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nvar MapOperator = /** @class */ (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexport { MapOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.count = 0;\n        _this.thisArg = thisArg || _this;\n        return _this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber));\n//# sourceMappingURL=map.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo(value) {\n    return function (source) { return source.lift(new MapToOperator(value)); };\n}\nvar MapToOperator = /** @class */ (function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapToSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        var _this = _super.call(this, destination) || this;\n        _this.value = value;\n        return _this;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber));\n//# sourceMappingURL=mapTo.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize() {\n    return function materializeOperatorFunction(source) {\n        return source.lift(new MaterializeOperator());\n    };\n}\nvar MaterializeOperator = /** @class */ (function () {\n    function MaterializeOperator() {\n    }\n    MaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MaterializeSubscriber(subscriber));\n    };\n    return MaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MaterializeSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(MaterializeSubscriber, _super);\n    function MaterializeSubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    MaterializeSubscriber.prototype._next = function (value) {\n        this.destination.next(Notification.createNext(value));\n    };\n    MaterializeSubscriber.prototype._error = function (err) {\n        var destination = this.destination;\n        destination.next(Notification.createError(err));\n        destination.complete();\n    };\n    MaterializeSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        destination.next(Notification.createComplete());\n        destination.complete();\n    };\n    return MaterializeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=materialize.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan(accumulator, seed) {\n    var hasSeed = false;\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nvar ScanOperator = /** @class */ (function () {\n    function ScanOperator(accumulator, seed, hasSeed) {\n        if (hasSeed === void 0) { hasSeed = false; }\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    };\n    return ScanOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ScanSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n        var _this = _super.call(this, destination) || this;\n        _this.accumulator = accumulator;\n        _this._seed = _seed;\n        _this.hasSeed = hasSeed;\n        _this.index = 0;\n        return _this;\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.hasSeed = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber));\n//# sourceMappingURL=scan.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nvar TakeLastOperator = /** @class */ (function () {\n    function TakeLastOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeLastOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    };\n    return TakeLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeLastSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(TakeLastSubscriber, _super);\n    function TakeLastSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.ring = new Array();\n        _this.count = 0;\n        return _this;\n    }\n    TakeLastSubscriber.prototype._next = function (value) {\n        var ring = this.ring;\n        var total = this.total;\n        var count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            var index = count % total;\n            ring[index] = value;\n        }\n    };\n    TakeLastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        var count = this.count;\n        if (count > 0) {\n            var total = this.count >= this.total ? this.total : this.count;\n            var ring = this.ring;\n            for (var i = 0; i < total; i++) {\n                var idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    };\n    return TakeLastSubscriber;\n}(Subscriber));\n//# sourceMappingURL=takeLast.js.map","import * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };\n}\nvar MergeScanOperator = /** @class */ (function () {\n    function MergeScanOperator(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    MergeScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    };\n    return MergeScanOperator;\n}());\nexport { MergeScanOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeScanSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(MergeScanSubscriber, _super);\n    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n        var _this = _super.call(this, destination) || this;\n        _this.accumulator = accumulator;\n        _this.acc = acc;\n        _this.concurrent = concurrent;\n        _this.hasValue = false;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeScanSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var index = this.index++;\n            var ish = tryCatch(this.accumulator)(this.acc, value);\n            var destination = this.destination;\n            if (ish === errorObject) {\n                destination.error(errorObject.e);\n            }\n            else {\n                this.active++;\n                this._innerSub(ish, value, index);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeScanSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var destination = this.destination;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    };\n    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    return MergeScanSubscriber;\n}(OuterSubscriber));\nexport { MergeScanSubscriber };\n//# sourceMappingURL=mergeScan.js.map","import * as tslib_1 from \"tslib\";\nimport { from } from '../observable/from';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nexport function onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i] = arguments[_i];\n    }\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };\n}\n/* tslint:enable:max-line-length */\nexport function onErrorResumeNextStatic() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i] = arguments[_i];\n    }\n    var source = null;\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return from(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\nvar OnErrorResumeNextOperator = /** @class */ (function () {\n    function OnErrorResumeNextOperator(nextSources) {\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    };\n    return OnErrorResumeNextOperator;\n}());\nvar OnErrorResumeNextSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(OnErrorResumeNextSubscriber, _super);\n    function OnErrorResumeNextSubscriber(destination, nextSources) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.nextSources = nextSources;\n        return _this;\n    }\n    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._error = function (err) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._complete = function () {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n        var next = this.nextSources.shift();\n        if (next) {\n            this.add(subscribeToResult(this, next));\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return OnErrorResumeNextSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=onErrorResumeNext.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise() {\n    return function (source) { return source.lift(new PairwiseOperator()); };\n}\nvar PairwiseOperator = /** @class */ (function () {\n    function PairwiseOperator() {\n    }\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasPrev = false;\n        return _this;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        }\n        else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber));\n//# sourceMappingURL=pairwise.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { empty } from '../observable/empty';\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat(count) {\n    if (count === void 0) { count = -1; }\n    return function (source) {\n        if (count === 0) {\n            return empty();\n        }\n        else if (count < 0) {\n            return source.lift(new RepeatOperator(-1, source));\n        }\n        else {\n            return source.lift(new RepeatOperator(count - 1, source));\n        }\n    };\n}\nvar RepeatOperator = /** @class */ (function () {\n    function RepeatOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RepeatOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n    };\n    return RepeatOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(RepeatSubscriber, _super);\n    function RepeatSubscriber(destination, count, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.count = count;\n        _this.source = source;\n        return _this;\n    }\n    RepeatSubscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.complete.call(this);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RepeatSubscriber;\n}(Subscriber));\n//# sourceMappingURL=repeat.js.map","import * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen(notifier) {\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\n}\nvar RepeatWhenOperator = /** @class */ (function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatWhenSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.notifier = notifier;\n        _this.source = source;\n        _this.sourceIsBeingSubscribedTo = true;\n        return _this;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            else if (this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    };\n    RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.notifications = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this.notifications = notifications;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject();\n        var retries = tryCatch(this.notifier)(this.notifications);\n        if (retries === errorObject) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult(this, retries);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=repeatWhen.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry(count) {\n    if (count === void 0) { count = -1; }\n    return function (source) { return source.lift(new RetryOperator(count, source)); };\n}\nvar RetryOperator = /** @class */ (function () {\n    function RetryOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RetryOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    };\n    return RetryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetrySubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(RetrySubscriber, _super);\n    function RetrySubscriber(destination, count, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.count = count;\n        _this.source = source;\n        return _this;\n    }\n    RetrySubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.error.call(this, err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RetrySubscriber;\n}(Subscriber));\n//# sourceMappingURL=retry.js.map","import * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen(notifier) {\n    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };\n}\nvar RetryWhenOperator = /** @class */ (function () {\n    function RetryWhenOperator(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    };\n    return RetryWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetryWhenSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(RetryWhenSubscriber, _super);\n    function RetryWhenSubscriber(destination, notifier, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.notifier = notifier;\n        _this.source = source;\n        return _this;\n    }\n    RetryWhenSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var errors = this.errors;\n            var retries = this.retries;\n            var retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                retries = tryCatch(this.notifier)(errors);\n                if (retries === errorObject) {\n                    return _super.prototype.error.call(this, errorObject.e);\n                }\n                retriesSubscription = subscribeToResult(this, retries);\n            }\n            else {\n                this.errors = null;\n                this.retriesSubscription = null;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    };\n    RetryWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.errors = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        this._unsubscribeAndRecycle();\n        this.errors = errors;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        this.source.subscribe(this);\n    };\n    return RetryWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=retryWhen.js.map","import * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample(notifier) {\n    return function (source) { return source.lift(new SampleOperator(notifier)); };\n}\nvar SampleOperator = /** @class */ (function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.hasValue = false;\n        return _this;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=sample.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual(compareTo, comparor) {\n    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparor)); };\n}\nvar SequenceEqualOperator = /** @class */ (function () {\n    function SequenceEqualOperator(compareTo, comparor) {\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n    }\n    SequenceEqualOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n    };\n    return SequenceEqualOperator;\n}());\nexport { SequenceEqualOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SequenceEqualSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SequenceEqualSubscriber, _super);\n    function SequenceEqualSubscriber(destination, compareTo, comparor) {\n        var _this = _super.call(this, destination) || this;\n        _this.compareTo = compareTo;\n        _this.comparor = comparor;\n        _this._a = [];\n        _this._b = [];\n        _this._oneComplete = false;\n        _this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));\n        return _this;\n    }\n    SequenceEqualSubscriber.prototype._next = function (value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    };\n    SequenceEqualSubscriber.prototype._complete = function () {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    };\n    SequenceEqualSubscriber.prototype.checkValues = function () {\n        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;\n        while (_a.length > 0 && _b.length > 0) {\n            var a = _a.shift();\n            var b = _b.shift();\n            var areEqual = false;\n            if (comparor) {\n                areEqual = tryCatch(comparor)(a, b);\n                if (areEqual === errorObject) {\n                    this.destination.error(errorObject.e);\n                }\n            }\n            else {\n                areEqual = a === b;\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    };\n    SequenceEqualSubscriber.prototype.emit = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    SequenceEqualSubscriber.prototype.nextB = function (value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    };\n    return SequenceEqualSubscriber;\n}(Subscriber));\nexport { SequenceEqualSubscriber };\nvar SequenceEqualCompareToSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SequenceEqualCompareToSubscriber, _super);\n    function SequenceEqualCompareToSubscriber(destination, parent) {\n        var _this = _super.call(this, destination) || this;\n        _this.parent = parent;\n        return _this;\n    }\n    SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n        this.parent.nextB(value);\n    };\n    SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n        this.parent.error(err);\n    };\n    SequenceEqualCompareToSubscriber.prototype._complete = function () {\n        this.parent._complete();\n    };\n    return SequenceEqualCompareToSubscriber;\n}(Subscriber));\n//# sourceMappingURL=sequenceEqual.js.map","import { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\nfunction shareSubjectFactory() {\n    return new Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share() {\n    return function (source) { return refCount()(multicast(shareSubjectFactory)(source)); };\n}\n//# sourceMappingURL=share.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { defaultThrottleConfig } from './throttle';\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) { scheduler = async; }\n    if (config === void 0) { config = defaultThrottleConfig; }\n    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };\n}\nvar ThrottleTimeOperator = /** @class */ (function () {\n    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    };\n    return ThrottleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleTimeSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(ThrottleTimeSubscriber, _super);\n    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\n        var _this = _super.call(this, destination) || this;\n        _this.duration = duration;\n        _this.scheduler = scheduler;\n        _this.leading = leading;\n        _this.trailing = trailing;\n        _this._hasTrailingValue = false;\n        _this._trailingValue = null;\n        return _this;\n    }\n    ThrottleTimeSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n        }\n    };\n    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n        var throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    };\n    return ThrottleTimeSubscriber;\n}(Subscriber));\nfunction dispatchNext(arg) {\n    var subscriber = arg.subscriber;\n    subscriber.clearThrottle();\n}\n//# sourceMappingURL=throttleTime.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * items, notify of an IllegalArgumentException or NoSuchElementException respectively. If the source Observable\n * emits items but none match the specified predicate then `undefined` is emiited.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate or `undefined` when no items match.\n *\n * @method single\n * @owner Observable\n */\nexport function single(predicate) {\n    return function (source) { return source.lift(new SingleOperator(predicate, source)); };\n}\nvar SingleOperator = /** @class */ (function () {\n    function SingleOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    SingleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n    };\n    return SingleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SingleSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SingleSubscriber, _super);\n    function SingleSubscriber(destination, predicate, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.seenValue = false;\n        _this.index = 0;\n        return _this;\n    }\n    SingleSubscriber.prototype.applySingleValue = function (value) {\n        if (this.seenValue) {\n            this.destination.error('Sequence contains more than one element');\n        }\n        else {\n            this.seenValue = true;\n            this.singleValue = value;\n        }\n    };\n    SingleSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this.tryNext(value, index);\n        }\n        else {\n            this.applySingleValue(value);\n        }\n    };\n    SingleSubscriber.prototype.tryNext = function (value, index) {\n        try {\n            if (this.predicate(value, index, this.source)) {\n                this.applySingleValue(value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    SingleSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index > 0) {\n            destination.next(this.seenValue ? this.singleValue : undefined);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError);\n        }\n    };\n    return SingleSubscriber;\n}(Subscriber));\n//# sourceMappingURL=single.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip(count) {\n    return function (source) { return source.lift(new SkipOperator(count)); };\n}\nvar SkipOperator = /** @class */ (function () {\n    function SkipOperator(total) {\n        this.total = total;\n    }\n    SkipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    };\n    return SkipOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SkipSubscriber, _super);\n    function SkipSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.count = 0;\n        return _this;\n    }\n    SkipSubscriber.prototype._next = function (x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    };\n    return SkipSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skip.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast(count) {\n    return function (source) { return source.lift(new SkipLastOperator(count)); };\n}\nvar SkipLastOperator = /** @class */ (function () {\n    function SkipLastOperator(_skipCount) {\n        this._skipCount = _skipCount;\n        if (this._skipCount < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    SkipLastOperator.prototype.call = function (subscriber, source) {\n        if (this._skipCount === 0) {\n            // If we don't want to skip any values then just subscribe\n            // to Subscriber without any further logic.\n            return source.subscribe(new Subscriber(subscriber));\n        }\n        else {\n            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n        }\n    };\n    return SkipLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipLastSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SkipLastSubscriber, _super);\n    function SkipLastSubscriber(destination, _skipCount) {\n        var _this = _super.call(this, destination) || this;\n        _this._skipCount = _skipCount;\n        _this._count = 0;\n        _this._ring = new Array(_skipCount);\n        return _this;\n    }\n    SkipLastSubscriber.prototype._next = function (value) {\n        var skipCount = this._skipCount;\n        var count = this._count++;\n        if (count < skipCount) {\n            this._ring[count] = value;\n        }\n        else {\n            var currentIndex = count % skipCount;\n            var ring = this._ring;\n            var oldValue = ring[currentIndex];\n            ring[currentIndex] = value;\n            this.destination.next(oldValue);\n        }\n    };\n    return SkipLastSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skipLast.js.map","import * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil(notifier) {\n    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };\n}\nvar SkipUntilOperator = /** @class */ (function () {\n    function SkipUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SkipUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n    };\n    return SkipUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipUntilSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SkipUntilSubscriber, _super);\n    function SkipUntilSubscriber(destination, notifier) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasValue = false;\n        _this.isInnerStopped = false;\n        _this.add(subscribeToResult(_this, notifier));\n        return _this;\n    }\n    SkipUntilSubscriber.prototype._next = function (value) {\n        if (this.hasValue) {\n            _super.prototype._next.call(this, value);\n        }\n    };\n    SkipUntilSubscriber.prototype._complete = function () {\n        if (this.isInnerStopped) {\n            _super.prototype._complete.call(this);\n        }\n        else {\n            this.unsubscribe();\n        }\n    };\n    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.hasValue = true;\n    };\n    SkipUntilSubscriber.prototype.notifyComplete = function () {\n        this.isInnerStopped = true;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    return SkipUntilSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=skipUntil.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile(predicate) {\n    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };\n}\nvar SkipWhileOperator = /** @class */ (function () {\n    function SkipWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    SkipWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    };\n    return SkipWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipWhileSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SkipWhileSubscriber, _super);\n    function SkipWhileSubscriber(destination, predicate) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.skipping = true;\n        _this.index = 0;\n        return _this;\n    }\n    SkipWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    };\n    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n        try {\n            var result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    return SkipWhileSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skipWhile.js.map","import * as tslib_1 from \"tslib\";\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar SubscribeOnObservable = /** @class */ (function (_super) {\n    tslib_1.__extends(SubscribeOnObservable, _super);\n    function SubscribeOnObservable(source, delayTime, scheduler) {\n        if (delayTime === void 0) { delayTime = 0; }\n        if (scheduler === void 0) { scheduler = asap; }\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.delayTime = delayTime;\n        _this.scheduler = scheduler;\n        if (!isNumeric(delayTime) || delayTime < 0) {\n            _this.delayTime = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            _this.scheduler = asap;\n        }\n        return _this;\n    }\n    SubscribeOnObservable.create = function (source, delay, scheduler) {\n        if (delay === void 0) { delay = 0; }\n        if (scheduler === void 0) { scheduler = asap; }\n        return new SubscribeOnObservable(source, delay, scheduler);\n    };\n    SubscribeOnObservable.dispatch = function (arg) {\n        var source = arg.source, subscriber = arg.subscriber;\n        return this.add(source.subscribe(subscriber));\n    };\n    SubscribeOnObservable.prototype._subscribe = function (subscriber) {\n        var delay = this.delayTime;\n        var source = this.source;\n        var scheduler = this.scheduler;\n        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n            source: source, subscriber: subscriber\n        });\n    };\n    return SubscribeOnObservable;\n}(Observable));\nexport { SubscribeOnObservable };\n//# sourceMappingURL=SubscribeOnObservable.js.map","import { isArray } from './isArray';\nexport function isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n//# sourceMappingURL=isNumeric.js.map","import * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap(project) {\n    return function switchMapOperatorFunction(source) {\n        return source.lift(new SwitchMapOperator(project));\n    };\n}\nvar SwitchMapOperator = /** @class */ (function () {\n    function SwitchMapOperator(project) {\n        this.project = project;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.index = 0;\n        return _this;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=switchMap.js.map","import * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo(innerObservable) {\n    return function (source) { return source.lift(new SwitchMapToOperator(innerObservable)); };\n}\nvar SwitchMapToOperator = /** @class */ (function () {\n    function SwitchMapToOperator(observable) {\n        this.observable = observable;\n    }\n    SwitchMapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable));\n    };\n    return SwitchMapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapToSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(SwitchMapToSubscriber, _super);\n    function SwitchMapToSubscriber(destination, inner) {\n        var _this = _super.call(this, destination) || this;\n        _this.inner = inner;\n        _this.index = 0;\n        return _this;\n    }\n    SwitchMapToSubscriber.prototype._next = function (value) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n    };\n    SwitchMapToSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    return SwitchMapToSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=switchMapTo.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take(count) {\n    return function (source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nvar TakeOperator = /** @class */ (function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.count = 0;\n        return _this;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=take.js.map","import * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nvar TakeUntilOperator = /** @class */ (function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination, notifier) {\n        var _this = _super.call(this, destination) || this;\n        _this.notifier = notifier;\n        _this.add(subscribeToResult(_this, notifier));\n        return _this;\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=takeUntil.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile(predicate) {\n    return function (source) { return source.lift(new TakeWhileOperator(predicate)); };\n}\nvar TakeWhileOperator = /** @class */ (function () {\n    function TakeWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    TakeWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n    };\n    return TakeWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeWhileSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(TakeWhileSubscriber, _super);\n    function TakeWhileSubscriber(destination, predicate) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.index = 0;\n        return _this;\n    }\n    TakeWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        var result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    };\n    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n        var destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            destination.complete();\n        }\n    };\n    return TakeWhileSubscriber;\n}(Subscriber));\n//# sourceMappingURL=takeWhile.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nvar DoOperator = /** @class */ (function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TapSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(TapSubscriber, _super);\n    function TapSubscriber(destination, observerOrNext, error, complete) {\n        var _this = _super.call(this, destination) || this;\n        _this._tapNext = noop;\n        _this._tapError = noop;\n        _this._tapComplete = noop;\n        _this._tapError = error || noop;\n        _this._tapComplete = complete || noop;\n        if (isFunction(observerOrNext)) {\n            _this._context = _this;\n            _this._tapNext = observerOrNext;\n        }\n        else if (observerOrNext) {\n            _this._context = observerOrNext;\n            _this._tapNext = observerOrNext.next || noop;\n            _this._tapError = observerOrNext.error || noop;\n            _this._tapComplete = observerOrNext.complete || noop;\n        }\n        return _this;\n    }\n    TapSubscriber.prototype._next = function (value) {\n        try {\n            this._tapNext.call(this._context, value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(value);\n    };\n    TapSubscriber.prototype._error = function (err) {\n        try {\n            this._tapError.call(this._context, err);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.error(err);\n    };\n    TapSubscriber.prototype._complete = function () {\n        try {\n            this._tapComplete.call(this._context);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        return this.destination.complete();\n    };\n    return TapSubscriber;\n}(Subscriber));\n//# sourceMappingURL=tap.js.map","import * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport var defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle(durationSelector, config) {\n    if (config === void 0) { config = defaultThrottleConfig; }\n    return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };\n}\nvar ThrottleOperator = /** @class */ (function () {\n    function ThrottleOperator(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    };\n    return ThrottleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(ThrottleSubscriber, _super);\n    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.durationSelector = durationSelector;\n        _this._leading = _leading;\n        _this._trailing = _trailing;\n        _this._hasTrailingValue = false;\n        return _this;\n    }\n    ThrottleSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this._trailing) {\n                this._hasTrailingValue = true;\n                this._trailingValue = value;\n            }\n        }\n        else {\n            var duration = this.tryDurationSelector(value);\n            if (duration) {\n                this.add(this.throttled = subscribeToResult(this, duration));\n            }\n            if (this._leading) {\n                this.destination.next(value);\n                if (this._trailing) {\n                    this._hasTrailingValue = true;\n                    this._trailingValue = value;\n                }\n            }\n        }\n    };\n    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    };\n    ThrottleSubscriber.prototype._unsubscribe = function () {\n        var _a = this, throttled = _a.throttled, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue, _trailing = _a._trailing;\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n    };\n    ThrottleSubscriber.prototype._sendTrailing = function () {\n        var _a = this, destination = _a.destination, throttled = _a.throttled, _trailing = _a._trailing, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue;\n        if (throttled && _trailing && _hasTrailingValue) {\n            destination.next(_trailingValue);\n            this._trailingValue = null;\n            this._hasTrailingValue = false;\n        }\n    };\n    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    ThrottleSubscriber.prototype.notifyComplete = function () {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    return ThrottleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=throttle.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nexport function timeInterval(scheduler) {\n    if (scheduler === void 0) { scheduler = async; }\n    return function (source) { return source.lift(new TimeIntervalOperator(scheduler)); };\n}\nvar TimeInterval = /** @class */ (function () {\n    function TimeInterval(value, interval) {\n        this.value = value;\n        this.interval = interval;\n    }\n    return TimeInterval;\n}());\nexport { TimeInterval };\nvar TimeIntervalOperator = /** @class */ (function () {\n    function TimeIntervalOperator(scheduler) {\n        this.scheduler = scheduler;\n    }\n    TimeIntervalOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n    };\n    return TimeIntervalOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeIntervalSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(TimeIntervalSubscriber, _super);\n    function TimeIntervalSubscriber(destination, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.scheduler = scheduler;\n        _this.lastTime = 0;\n        _this.lastTime = scheduler.now();\n        return _this;\n    }\n    TimeIntervalSubscriber.prototype._next = function (value) {\n        var now = this.scheduler.now();\n        var span = now - this.lastTime;\n        this.lastTime = now;\n        this.destination.next(new TimeInterval(value, span));\n    };\n    return TimeIntervalSubscriber;\n}(Subscriber));\n//# sourceMappingURL=timeInterval.js.map","import * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function windowTime(windowTimeSpan) {\n    var scheduler = async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return function windowTimeOperatorFunction(source) {\n        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n    };\n}\nvar WindowTimeOperator = /** @class */ (function () {\n    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n    }\n    WindowTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n    };\n    return WindowTimeOperator;\n}());\nvar CountedSubject = /** @class */ (function (_super) {\n    tslib_1.__extends(CountedSubject, _super);\n    function CountedSubject() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._numberOfNextedValues = 0;\n        return _this;\n    }\n    CountedSubject.prototype.next = function (value) {\n        this._numberOfNextedValues++;\n        _super.prototype.next.call(this, value);\n    };\n    Object.defineProperty(CountedSubject.prototype, \"numberOfNextedValues\", {\n        get: function () {\n            return this._numberOfNextedValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CountedSubject;\n}(Subject));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowTimeSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(WindowTimeSubscriber, _super);\n    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.windowTimeSpan = windowTimeSpan;\n        _this.windowCreationInterval = windowCreationInterval;\n        _this.maxWindowSize = maxWindowSize;\n        _this.scheduler = scheduler;\n        _this.windows = [];\n        var window = _this.openWindow();\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            var closeState = { subscriber: _this, window: window, context: null };\n            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };\n            _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n            _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n        }\n        else {\n            var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };\n            _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n        }\n        return _this;\n    }\n    WindowTimeSubscriber.prototype._next = function (value) {\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len; i++) {\n            var window_1 = windows[i];\n            if (!window_1.closed) {\n                window_1.next(value);\n                if (window_1.numberOfNextedValues >= this.maxWindowSize) {\n                    this.closeWindow(window_1);\n                }\n            }\n        }\n    };\n    WindowTimeSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            windows.shift().error(err);\n        }\n        this.destination.error(err);\n    };\n    WindowTimeSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            var window_2 = windows.shift();\n            if (!window_2.closed) {\n                window_2.complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowTimeSubscriber.prototype.openWindow = function () {\n        var window = new CountedSubject();\n        this.windows.push(window);\n        var destination = this.destination;\n        destination.next(window);\n        return window;\n    };\n    WindowTimeSubscriber.prototype.closeWindow = function (window) {\n        window.complete();\n        var windows = this.windows;\n        windows.splice(windows.indexOf(window), 1);\n    };\n    return WindowTimeSubscriber;\n}(Subscriber));\nfunction dispatchWindowTimeSpanOnly(state) {\n    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;\n    if (window) {\n        subscriber.closeWindow(window);\n    }\n    state.window = subscriber.openWindow();\n    this.schedule(state, windowTimeSpan);\n}\nfunction dispatchWindowCreation(state) {\n    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;\n    var window = subscriber.openWindow();\n    var action = this;\n    var context = { action: action, subscription: null };\n    var timeSpanState = { subscriber: subscriber, window: window, context: context };\n    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n    action.add(context.subscription);\n    action.schedule(state, windowCreationInterval);\n}\nfunction dispatchWindowClose(state) {\n    var subscriber = state.subscriber, window = state.window, context = state.context;\n    if (context && context.action && context.subscription) {\n        context.action.remove(context.subscription);\n    }\n    subscriber.closeWindow(window);\n}\n//# sourceMappingURL=windowTime.js.map","import * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { TimeoutError } from '../util/TimeoutError';\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout(due, scheduler) {\n    if (scheduler === void 0) { scheduler = async; }\n    var absoluteTimeout = isDate(due);\n    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n    return function (source) { return source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError())); };\n}\nvar TimeoutOperator = /** @class */ (function () {\n    function TimeoutOperator(waitFor, absoluteTimeout, scheduler, errorInstance) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.scheduler = scheduler;\n        this.errorInstance = errorInstance;\n    }\n    TimeoutOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance));\n    };\n    return TimeoutOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(TimeoutSubscriber, _super);\n    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, scheduler, errorInstance) {\n        var _this = _super.call(this, destination) || this;\n        _this.absoluteTimeout = absoluteTimeout;\n        _this.waitFor = waitFor;\n        _this.scheduler = scheduler;\n        _this.errorInstance = errorInstance;\n        _this.action = null;\n        _this.scheduleTimeout();\n        return _this;\n    }\n    TimeoutSubscriber.dispatchTimeout = function (subscriber) {\n        subscriber.error(subscriber.errorInstance);\n    };\n    TimeoutSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    TimeoutSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.errorInstance = null;\n    };\n    return TimeoutSubscriber;\n}(Subscriber));\n//# sourceMappingURL=timeout.js.map","import * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) { scheduler = async; }\n    return function (source) {\n        var absoluteTimeout = isDate(due);\n        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n    };\n}\nvar TimeoutWithOperator = /** @class */ (function () {\n    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n    }\n    TimeoutWithOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n    };\n    return TimeoutWithOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutWithSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(TimeoutWithSubscriber, _super);\n    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.absoluteTimeout = absoluteTimeout;\n        _this.waitFor = waitFor;\n        _this.withObservable = withObservable;\n        _this.scheduler = scheduler;\n        _this.action = null;\n        _this.scheduleTimeout();\n        return _this;\n    }\n    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {\n        var withObservable = subscriber.withObservable;\n        subscriber._unsubscribeAndRecycle();\n        subscriber.add(subscribeToResult(subscriber, withObservable));\n    };\n    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutWithSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    TimeoutWithSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.withObservable = null;\n    };\n    return TimeoutWithSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=timeoutWith.js.map","import * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window(windowBoundaries) {\n    return function windowOperatorFunction(source) {\n        return source.lift(new WindowOperator(windowBoundaries));\n    };\n}\nvar WindowOperator = /** @class */ (function () {\n    function WindowOperator(windowBoundaries) {\n        this.windowBoundaries = windowBoundaries;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        var windowSubscriber = new WindowSubscriber(subscriber);\n        var sourceSubscription = source.subscribe(windowSubscriber);\n        if (!sourceSubscription.closed) {\n            windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n        }\n        return sourceSubscription;\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.window = new Subject();\n        destination.next(_this.window);\n        return _this;\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow();\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this._complete();\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n    };\n    WindowSubscriber.prototype._unsubscribe = function () {\n        this.window = null;\n    };\n    WindowSubscriber.prototype.openWindow = function () {\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var destination = this.destination;\n        var newWindow = this.window = new Subject();\n        destination.next(newWindow);\n    };\n    return WindowSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=window.js.map","import * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n    return function windowCountOperatorFunction(source) {\n        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\n    };\n}\nvar WindowCountOperator = /** @class */ (function () {\n    function WindowCountOperator(windowSize, startWindowEvery) {\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n    }\n    WindowCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n    };\n    return WindowCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowCountSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(WindowCountSubscriber, _super);\n    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.windowSize = windowSize;\n        _this.startWindowEvery = startWindowEvery;\n        _this.windows = [new Subject()];\n        _this.count = 0;\n        destination.next(_this.windows[0]);\n        return _this;\n    }\n    WindowCountSubscriber.prototype._next = function (value) {\n        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n        var destination = this.destination;\n        var windowSize = this.windowSize;\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len && !this.closed; i++) {\n            windows[i].next(value);\n        }\n        var c = this.count - windowSize + 1;\n        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n            windows.shift().complete();\n        }\n        if (++this.count % startWindowEvery === 0 && !this.closed) {\n            var window_1 = new Subject();\n            windows.push(window_1);\n            destination.next(window_1);\n        }\n    };\n    WindowCountSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().error(err);\n            }\n        }\n        this.destination.error(err);\n    };\n    WindowCountSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowCountSubscriber.prototype._unsubscribe = function () {\n        this.count = 0;\n        this.windows = null;\n    };\n    return WindowCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=windowCount.js.map","/**\r\n * @license Angular v6.0.0-rc.0-a5f0939\r\n * (c) 2010-2018 Google, Inc. https://angular.io/\r\n * License: MIT\r\n */\r\nimport { __assign, __extends } from 'tslib';\r\nimport { Observable, Subject, Subscription, merge } from 'rxjs';\r\nimport { share } from 'rxjs/operators';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Information about how a type or `InjectionToken` interfaces with the DI system.\r\n *\r\n * At a minimum, this includes a `factory` which defines how to create the given type `T`, possibly\r\n * requesting injection of other types if necessary.\r\n *\r\n * Optionally, a `providedIn` parameter specifies that the given type belongs to a particular\r\n * `InjectorDef`, `NgModule`, or a special scope (e.g. `'root'`). A value of `null` indicates\r\n * that the injectable does not belong to any scope.\r\n *\r\n * This type is typically generated by the Angular compiler, but can be hand-written if needed.\r\n *\r\n * \\@experimental\r\n * @record\r\n * @template T\r\n */\r\n\r\n/**\r\n * Information about the providers to be included in an `Injector` as well as how the given type\r\n * which carries the information should be created by the DI system.\r\n *\r\n * An `InjectorDef` can import other types which have `InjectorDefs`, forming a deep nested\r\n * structure of providers with a defined priority (identically to how `NgModule`s also have\r\n * an import/dependency structure).\r\n *\r\n * \\@experimental\r\n * @record\r\n * @template T\r\n */\r\n\r\n/**\r\n * A `Type` which has an `InjectableDef` static field.\r\n *\r\n * `InjectableDefType`s contain their own Dependency Injection metadata and are usable in an\r\n * `InjectorDef`-based `StaticInjector.\r\n *\r\n * \\@experimental\r\n * @record\r\n * @template T\r\n */\r\n\r\n/**\r\n * A type which has an `InjectorDef` static field.\r\n *\r\n * `InjectorDefTypes` can be used to configure a `StaticInjector`.\r\n *\r\n * \\@experimental\r\n * @record\r\n * @template T\r\n */\r\n\r\n/**\r\n * Describes the `InjectorDef` equivalent of a `ModuleWithProviders`, an `InjectorDefType` with an\r\n * associated array of providers.\r\n *\r\n * Objects of this type can be listed in the imports section of an `InjectorDef`.\r\n *\r\n * \\@experimental\r\n * @record\r\n * @template T\r\n */\r\n\r\n/**\r\n * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\r\n * in which injectors (if any) it will be available.\r\n *\r\n * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an\r\n * `InjectableType`.\r\n *\r\n * Options:\r\n * * `providedIn` determines which injectors will include the injectable, by either associating it\r\n *   with an `\\@NgModule` or other `InjectorType`, or by specifying that this injectable should be\r\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\r\n * * `factory` gives the zero argument function which will create an instance of the injectable.\r\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\r\n *\r\n * \\@experimental\r\n * @template T\r\n * @param {?} opts\r\n * @return {?}\r\n */\r\nfunction defineInjectable(opts) {\r\n    return {\r\n        providedIn: (/** @type {?} */ (opts.providedIn)) || null,\r\n        factory: opts.factory,\r\n    };\r\n}\r\n/**\r\n * Construct an `InjectorDef` which configures an injector.\r\n *\r\n * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an\r\n * `InjectorType`.\r\n *\r\n * Options:\r\n *\r\n * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\r\n *   create the type must be provided. If that factory function needs to inject arguments, it can\r\n *   use the `inject` function.\r\n * * `providers`: an optional array of providers to add to the injector. Each provider must\r\n *   either have a factory or point to a type which has an `ngInjectableDef` static property (the\r\n *   type must be an `InjectableType`).\r\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\r\n *   whose providers will also be added to the injector. Locally provided types will override\r\n *   providers from imports.\r\n *\r\n * \\@experimental\r\n * @param {?} options\r\n * @return {?}\r\n */\r\nfunction defineInjector(options) {\r\n    return {\r\n        factory: options.factory,\r\n        providers: options.providers || [],\r\n        imports: options.imports || [],\r\n    };\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Creates a token that can be used in a DI Provider.\r\n *\r\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\r\n * runtime representation) such as when injecting an interface, callable type, array or\r\n * parametrized type.\r\n *\r\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\r\n * the `Injector`. This provides additional level of type safety.\r\n *\r\n * ```\r\n * interface MyInterface {...}\r\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\r\n * // myInterface is inferred to be MyInterface.\r\n * ```\r\n *\r\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\r\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\r\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\r\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\r\n * dependencies, it can do so using the `inject` function. See below for an example.\r\n *\r\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\r\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\r\n * mentioned above, `'root'` is the default value for `providedIn`.\r\n *\r\n * ### Example\r\n *\r\n * #### Tree-shakeable InjectionToken\r\n *\r\n * {\\@example core/di/ts/injector_spec.ts region='ShakeableInjectionToken'}\r\n *\r\n * #### Plain InjectionToken\r\n *\r\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\r\n *\r\n * \\@stable\r\n * @template T\r\n */\r\nvar InjectionToken = /** @class */ (function () {\r\n    function InjectionToken(_desc, options) {\r\n        this._desc = _desc;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this.ngMetadataName = 'InjectionToken';\r\n        if (options !== undefined) {\r\n            /** @nocollapse */ this.ngInjectableDef = defineInjectable({\r\n                providedIn: options.providedIn || 'root',\r\n                factory: options.factory,\r\n            });\r\n        }\r\n        else {\r\n            /** @nocollapse */ this.ngInjectableDef = undefined;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    InjectionToken.prototype.toString = /**\r\n     * @return {?}\r\n     */\r\n    function () { return \"InjectionToken \" + this._desc; };\r\n    return InjectionToken;\r\n}());\r\n/**\r\n * @record\r\n * @template T\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An interface implemented by all Angular type decorators, which allows them to be used as ES7\r\n * decorators as well as\r\n * Angular DSL syntax.\r\n *\r\n * ES7 syntax:\r\n *\r\n * ```\r\n * \\@ng.Component({...})\r\n * class MyClass {...}\r\n * ```\r\n * \\@stable\r\n * @record\r\n */\r\n\r\nvar ANNOTATIONS = '__annotations__';\r\nvar PARAMETERS = '__parameters__';\r\nvar PROP_METADATA = '__prop__metadata__';\r\n/**\r\n * @suppress {globalThis}\r\n * @param {?} name\r\n * @param {?=} props\r\n * @param {?=} parentClass\r\n * @param {?=} chainFn\r\n * @param {?=} typeFn\r\n * @return {?}\r\n */\r\nfunction makeDecorator(name, props, parentClass, chainFn, typeFn) {\r\n    var /** @type {?} */ metaCtor = makeMetadataCtor(props);\r\n    /**\r\n     * @param {...?} args\r\n     * @return {?}\r\n     */\r\n    function DecoratorFactory() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (this instanceof DecoratorFactory) {\r\n            metaCtor.call.apply(metaCtor, [this].concat(args));\r\n            return this;\r\n        }\r\n        var /** @type {?} */ annotationInstance = new ((_a = (/** @type {?} */ (DecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\r\n        var /** @type {?} */ TypeDecorator = /** @type {?} */ (function TypeDecorator(cls) {\r\n            typeFn && typeFn.apply(void 0, [cls].concat(args));\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            var /** @type {?} */ annotations = cls.hasOwnProperty(ANNOTATIONS) ?\r\n                (/** @type {?} */ (cls))[ANNOTATIONS] :\r\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\r\n            annotations.push(annotationInstance);\r\n            return cls;\r\n        });\r\n        if (chainFn)\r\n            chainFn(TypeDecorator);\r\n        return TypeDecorator;\r\n        var _a;\r\n    }\r\n    if (parentClass) {\r\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n    DecoratorFactory.prototype.ngMetadataName = name;\r\n    (/** @type {?} */ (DecoratorFactory)).annotationCls = DecoratorFactory;\r\n    return /** @type {?} */ (DecoratorFactory);\r\n}\r\n/**\r\n * @param {?=} props\r\n * @return {?}\r\n */\r\nfunction makeMetadataCtor(props) {\r\n    return function ctor() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (props) {\r\n            var /** @type {?} */ values = props.apply(void 0, args);\r\n            for (var /** @type {?} */ propName in values) {\r\n                this[propName] = values[propName];\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * @param {?} name\r\n * @param {?=} props\r\n * @param {?=} parentClass\r\n * @return {?}\r\n */\r\nfunction makeParamDecorator(name, props, parentClass) {\r\n    var /** @type {?} */ metaCtor = makeMetadataCtor(props);\r\n    /**\r\n     * @param {...?} args\r\n     * @return {?}\r\n     */\r\n    function ParamDecoratorFactory() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (this instanceof ParamDecoratorFactory) {\r\n            metaCtor.apply(this, args);\r\n            return this;\r\n        }\r\n        var /** @type {?} */ annotationInstance = new ((_a = (/** @type {?} */ (ParamDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\r\n        (/** @type {?} */ (ParamDecorator)).annotation = annotationInstance;\r\n        return ParamDecorator;\r\n        /**\r\n         * @param {?} cls\r\n         * @param {?} unusedKey\r\n         * @param {?} index\r\n         * @return {?}\r\n         */\r\n        function ParamDecorator(cls, unusedKey, index) {\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            var /** @type {?} */ parameters = cls.hasOwnProperty(PARAMETERS) ?\r\n                (/** @type {?} */ (cls))[PARAMETERS] :\r\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\r\n            // there might be gaps if some in between parameters do not have annotations.\r\n            // we pad with nulls.\r\n            while (parameters.length <= index) {\r\n                parameters.push(null);\r\n            }\r\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\r\n            return cls;\r\n        }\r\n        var _a;\r\n    }\r\n    if (parentClass) {\r\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\r\n    (/** @type {?} */ (ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;\r\n    return ParamDecoratorFactory;\r\n}\r\n/**\r\n * @param {?} name\r\n * @param {?=} props\r\n * @param {?=} parentClass\r\n * @return {?}\r\n */\r\nfunction makePropDecorator(name, props, parentClass) {\r\n    var /** @type {?} */ metaCtor = makeMetadataCtor(props);\r\n    /**\r\n     * @param {...?} args\r\n     * @return {?}\r\n     */\r\n    function PropDecoratorFactory() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (this instanceof PropDecoratorFactory) {\r\n            metaCtor.apply(this, args);\r\n            return this;\r\n        }\r\n        var /** @type {?} */ decoratorInstance = new ((_a = (/** @type {?} */ (PropDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\r\n        return function PropDecorator(target, name) {\r\n            var /** @type {?} */ constructor = target.constructor;\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            var /** @type {?} */ meta = constructor.hasOwnProperty(PROP_METADATA) ?\r\n                (/** @type {?} */ (constructor))[PROP_METADATA] :\r\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\r\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\r\n            meta[name].unshift(decoratorInstance);\r\n        };\r\n        var _a;\r\n    }\r\n    if (parentClass) {\r\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n    PropDecoratorFactory.prototype.ngMetadataName = name;\r\n    (/** @type {?} */ (PropDecoratorFactory)).annotationCls = PropDecoratorFactory;\r\n    return PropDecoratorFactory;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * This token can be used to create a virtual provider that will populate the\r\n * `entryComponents` fields of components and ng modules based on its `useValue`.\r\n * All components that are referenced in the `useValue` value (either directly\r\n * or in a nested array or map) will be added to the `entryComponents` property.\r\n *\r\n * ### Example\r\n * The following example shows how the router can populate the `entryComponents`\r\n * field of an NgModule based on the router configuration which refers\r\n * to components.\r\n *\r\n * ```typescript\r\n * // helper function inside the router\r\n * function provideRoutes(routes) {\r\n *   return [\r\n *     {provide: ROUTES, useValue: routes},\r\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\r\n *   ];\r\n * }\r\n *\r\n * // user code\r\n * let routes = [\r\n *   {path: '/root', component: RootComp},\r\n *   {path: '/teams', component: TeamsComp}\r\n * ];\r\n *\r\n * \\@NgModule({\r\n *   providers: [provideRoutes(routes)]\r\n * })\r\n * class ModuleWithRoutes {}\r\n * ```\r\n *\r\n * \\@experimental\r\n */\r\nvar ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');\r\n/**\r\n * Type of the Attribute decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Attribute decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nvar Attribute = makeParamDecorator('Attribute', function (attributeName) { return ({ attributeName: attributeName }); });\r\n/**\r\n * Base class for query metadata.\r\n *\r\n * See {\\@link ContentChildren}, {\\@link ContentChild}, {\\@link ViewChildren}, {\\@link ViewChild} for\r\n * more information.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nvar Query = /** @class */ (function () {\r\n    function Query() {\r\n    }\r\n    return Query;\r\n}());\r\n/**\r\n * Type of the ContentChildren decorator / constructor function.\r\n *\r\n * See {\\@link ContentChildren}.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * ContentChildren decorator and metadata.\r\n *\r\n *  \\@stable\r\n *  \\@Annotation\r\n */\r\nvar ContentChildren = makePropDecorator('ContentChildren', function (selector, data) {\r\n    if (data === void 0) { data = {}; }\r\n    return (__assign({ selector: selector, first: false, isViewQuery: false, descendants: false }, data));\r\n}, Query);\r\n/**\r\n * Type of the ContentChild decorator / constructor function.\r\n *\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * ContentChild decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nvar ContentChild = makePropDecorator('ContentChild', function (selector, data) {\r\n    if (data === void 0) { data = {}; }\r\n    return (__assign({ selector: selector, first: true, isViewQuery: false, descendants: true }, data));\r\n}, Query);\r\n/**\r\n * Type of the ViewChildren decorator / constructor function.\r\n *\r\n * See {\\@link ViewChildren}.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * ViewChildren decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nvar ViewChildren = makePropDecorator('ViewChildren', function (selector, data) {\r\n    if (data === void 0) { data = {}; }\r\n    return (__assign({ selector: selector, first: false, isViewQuery: true, descendants: true }, data));\r\n}, Query);\r\n/**\r\n * Type of the ViewChild decorator / constructor function.\r\n *\r\n * See {\\@link ViewChild}\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * ViewChild decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nvar ViewChild = makePropDecorator('ViewChild', function (selector, data) {\r\n    return (__assign({ selector: selector, first: true, isViewQuery: true, descendants: true }, data));\r\n}, Query);\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @enum {number} */\r\nvar ChangeDetectionStrategy = {\r\n    /**\r\n       * `OnPush` means that the change detector's mode will be initially set to `CheckOnce`.\r\n       */\r\n    OnPush: 0,\r\n    /**\r\n       * `Default` means that the change detector's mode will be initially set to `CheckAlways`.\r\n       */\r\n    Default: 1,\r\n};\r\nChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = \"OnPush\";\r\nChangeDetectionStrategy[ChangeDetectionStrategy.Default] = \"Default\";\r\n/** @enum {number} */\r\nvar ChangeDetectorStatus = {\r\n    /**\r\n       * `CheckOnce` means that after calling detectChanges the mode of the change detector\r\n       * will become `Checked`.\r\n       */\r\n    CheckOnce: 0,\r\n    /**\r\n       * `Checked` means that the change detector should be skipped until its mode changes to\r\n       * `CheckOnce`.\r\n       */\r\n    Checked: 1,\r\n    /**\r\n       * `CheckAlways` means that after calling detectChanges the mode of the change detector\r\n       * will remain `CheckAlways`.\r\n       */\r\n    CheckAlways: 2,\r\n    /**\r\n       * `Detached` means that the change detector sub tree is not a part of the main tree and\r\n       * should be skipped.\r\n       */\r\n    Detached: 3,\r\n    /**\r\n       * `Errored` means that the change detector encountered an error checking a binding\r\n       * or calling a directive lifecycle method and is now in an inconsistent state. Change\r\n       * detectors in this state will no longer detect changes.\r\n       */\r\n    Errored: 4,\r\n    /**\r\n       * `Destroyed` means that the change detector is destroyed.\r\n       */\r\n    Destroyed: 5,\r\n};\r\nChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = \"CheckOnce\";\r\nChangeDetectorStatus[ChangeDetectorStatus.Checked] = \"Checked\";\r\nChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = \"CheckAlways\";\r\nChangeDetectorStatus[ChangeDetectorStatus.Detached] = \"Detached\";\r\nChangeDetectorStatus[ChangeDetectorStatus.Errored] = \"Errored\";\r\nChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = \"Destroyed\";\r\n/**\r\n * @param {?} changeDetectionStrategy\r\n * @return {?}\r\n */\r\nfunction isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\r\n    return changeDetectionStrategy == null ||\r\n        changeDetectionStrategy === ChangeDetectionStrategy.Default;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Type of the Directive decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Directive decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nvar Directive = makeDecorator('Directive', function (dir) {\r\n    if (dir === void 0) { dir = {}; }\r\n    return dir;\r\n});\r\n/**\r\n * Type of the Component decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Component decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nvar Component = makeDecorator('Component', function (c) {\r\n    if (c === void 0) { c = {}; }\r\n    return (__assign({ changeDetection: ChangeDetectionStrategy.Default }, c));\r\n}, Directive);\r\n/**\r\n * Type of the Pipe decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Pipe decorator and metadata.\r\n *\r\n * Use the `\\@Pipe` annotation to declare that a given class is a pipe. A pipe\r\n * class must also implement {\\@link PipeTransform} interface.\r\n *\r\n * To use the pipe include a reference to the pipe class in\r\n * {\\@link NgModule#declarations}.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nvar Pipe = makeDecorator('Pipe', function (p) { return (__assign({ pure: true }, p)); });\r\n/**\r\n * Type of the Input decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Input decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nvar Input = makePropDecorator('Input', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });\r\n/**\r\n * Type of the Output decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Output decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nvar Output = makePropDecorator('Output', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });\r\n/**\r\n * Type of the HostBinding decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * HostBinding decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nvar HostBinding = makePropDecorator('HostBinding', function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); });\r\n/**\r\n * Type of the HostListener decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * HostListener decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nvar HostListener = makePropDecorator('HostListener', function (eventName, args) { return ({ eventName: eventName, args: args }); });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Represents a type that a Component or other object is instances of.\r\n *\r\n * \\@description\r\n *\r\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\r\n * the `MyCustomComponent` constructor function.\r\n *\r\n * \\@stable\r\n */\r\nvar Type = Function;\r\n/**\r\n * @param {?} v\r\n * @return {?}\r\n */\r\nfunction isType(v) {\r\n    return typeof v === 'function';\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar __window = typeof window !== 'undefined' && window;\r\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\r\n    self instanceof WorkerGlobalScope && self;\r\nvar __global = typeof global !== 'undefined' && global;\r\nvar _global = __window || __global || __self;\r\nvar promise = Promise.resolve(0);\r\nvar _symbolIterator = null;\r\n/**\r\n * @return {?}\r\n */\r\nfunction getSymbolIterator() {\r\n    if (!_symbolIterator) {\r\n        var /** @type {?} */ Symbol_1 = _global['Symbol'];\r\n        if (Symbol_1 && Symbol_1.iterator) {\r\n            _symbolIterator = Symbol_1.iterator;\r\n        }\r\n        else {\r\n            // es6-shim specific logic\r\n            var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);\r\n            for (var /** @type {?} */ i = 0; i < keys.length; ++i) {\r\n                var /** @type {?} */ key = keys[i];\r\n                if (key !== 'entries' && key !== 'size' &&\r\n                    (/** @type {?} */ (Map)).prototype[key] === Map.prototype['entries']) {\r\n                    _symbolIterator = key;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return _symbolIterator;\r\n}\r\n/**\r\n * @param {?} fn\r\n * @return {?}\r\n */\r\nfunction scheduleMicroTask(fn) {\r\n    if (typeof Zone === 'undefined') {\r\n        // use promise to schedule microTask instead of use Zone\r\n        promise.then(function () { fn && fn.apply(null, null); });\r\n    }\r\n    else {\r\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\r\n    }\r\n}\r\n/**\r\n * @param {?} a\r\n * @param {?} b\r\n * @return {?}\r\n */\r\nfunction looseIdentical(a, b) {\r\n    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\r\n}\r\n/**\r\n * @param {?} token\r\n * @return {?}\r\n */\r\nfunction stringify(token) {\r\n    if (typeof token === 'string') {\r\n        return token;\r\n    }\r\n    if (token instanceof Array) {\r\n        return '[' + token.map(stringify).join(', ') + ']';\r\n    }\r\n    if (token == null) {\r\n        return '' + token;\r\n    }\r\n    if (token.overriddenName) {\r\n        return \"\" + token.overriddenName;\r\n    }\r\n    if (token.name) {\r\n        return \"\" + token.name;\r\n    }\r\n    var /** @type {?} */ res = token.toString();\r\n    if (res == null) {\r\n        return '' + res;\r\n    }\r\n    var /** @type {?} */ newLineIndex = res.indexOf('\\n');\r\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Attention: These regex has to hold even if the code is minified!\r\n */\r\nvar DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\r\nvar INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[A-Za-z\\d$_]+\\s*{/;\r\nvar INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[A-Za-z\\d$_]+\\s*{[\\s\\S]*constructor\\s*\\(/;\r\nvar ReflectionCapabilities = /** @class */ (function () {\r\n    function ReflectionCapabilities(reflect) {\r\n        this._reflect = reflect || _global['Reflect'];\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ReflectionCapabilities.prototype.isReflectionEnabled = /**\r\n     * @return {?}\r\n     */\r\n    function () { return true; };\r\n    /**\r\n     * @template T\r\n     * @param {?} t\r\n     * @return {?}\r\n     */\r\n    ReflectionCapabilities.prototype.factory = /**\r\n     * @template T\r\n     * @param {?} t\r\n     * @return {?}\r\n     */\r\n    function (t) { return function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return new (t.bind.apply(t, [void 0].concat(args)))();\r\n    }; };\r\n    /** @internal */\r\n    /**\r\n     * \\@internal\r\n     * @param {?} paramTypes\r\n     * @param {?} paramAnnotations\r\n     * @return {?}\r\n     */\r\n    ReflectionCapabilities.prototype._zipTypesAndAnnotations = /**\r\n     * \\@internal\r\n     * @param {?} paramTypes\r\n     * @param {?} paramAnnotations\r\n     * @return {?}\r\n     */\r\n    function (paramTypes, paramAnnotations) {\r\n        var /** @type {?} */ result;\r\n        if (typeof paramTypes === 'undefined') {\r\n            result = new Array(paramAnnotations.length);\r\n        }\r\n        else {\r\n            result = new Array(paramTypes.length);\r\n        }\r\n        for (var /** @type {?} */ i = 0; i < result.length; i++) {\r\n            // TS outputs Object for parameters without types, while Traceur omits\r\n            // the annotations. For now we preserve the Traceur behavior to aid\r\n            // migration, but this can be revisited.\r\n            if (typeof paramTypes === 'undefined') {\r\n                result[i] = [];\r\n            }\r\n            else if (paramTypes[i] != Object) {\r\n                result[i] = [paramTypes[i]];\r\n            }\r\n            else {\r\n                result[i] = [];\r\n            }\r\n            if (paramAnnotations && paramAnnotations[i] != null) {\r\n                result[i] = result[i].concat(paramAnnotations[i]);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} parentCtor\r\n     * @return {?}\r\n     */\r\n    ReflectionCapabilities.prototype._ownParameters = /**\r\n     * @param {?} type\r\n     * @param {?} parentCtor\r\n     * @return {?}\r\n     */\r\n    function (type, parentCtor) {\r\n        var /** @type {?} */ typeStr = type.toString();\r\n        // If we have no decorators, we only have function.length as metadata.\r\n        // In that case, to detect whether a child class declared an own constructor or not,\r\n        // we need to look inside of that constructor to check whether it is\r\n        // just calling the parent.\r\n        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\r\n        // that sets 'design:paramtypes' to []\r\n        // if a class inherits from another class but has no ctor declared itself.\r\n        if (DELEGATE_CTOR.exec(typeStr) ||\r\n            (INHERITED_CLASS.exec(typeStr) && !INHERITED_CLASS_WITH_CTOR.exec(typeStr))) {\r\n            return null;\r\n        }\r\n        // Prefer the direct API.\r\n        if ((/** @type {?} */ (type)).parameters && (/** @type {?} */ (type)).parameters !== parentCtor.parameters) {\r\n            return (/** @type {?} */ (type)).parameters;\r\n        }\r\n        // API of tsickle for lowering decorators to properties on the class.\r\n        var /** @type {?} */ tsickleCtorParams = (/** @type {?} */ (type)).ctorParameters;\r\n        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\r\n            // Newer tsickle uses a function closure\r\n            // Retain the non-function case for compatibility with older tsickle\r\n            var /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\r\n            var /** @type {?} */ paramTypes_1 = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });\r\n            var /** @type {?} */ paramAnnotations_1 = ctorParameters.map(function (ctorParam) {\r\n                return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);\r\n            });\r\n            return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);\r\n        }\r\n        // API for metadata created by invoking the decorators.\r\n        var /** @type {?} */ paramAnnotations = type.hasOwnProperty(PARAMETERS) && (/** @type {?} */ (type))[PARAMETERS];\r\n        var /** @type {?} */ paramTypes = this._reflect && this._reflect.getOwnMetadata &&\r\n            this._reflect.getOwnMetadata('design:paramtypes', type);\r\n        if (paramTypes || paramAnnotations) {\r\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\r\n        }\r\n        // If a class has no decorators, at least create metadata\r\n        // based on function.length.\r\n        // Note: We know that this is a real constructor as we checked\r\n        // the content of the constructor above.\r\n        return new Array((/** @type {?} */ (type.length))).fill(undefined);\r\n    };\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    ReflectionCapabilities.prototype.parameters = /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    function (type) {\r\n        // Note: only report metadata if we have at least one class decorator\r\n        // to stay in sync with the static reflector.\r\n        if (!isType(type)) {\r\n            return [];\r\n        }\r\n        var /** @type {?} */ parentCtor = getParentCtor(type);\r\n        var /** @type {?} */ parameters = this._ownParameters(type, parentCtor);\r\n        if (!parameters && parentCtor !== Object) {\r\n            parameters = this.parameters(parentCtor);\r\n        }\r\n        return parameters || [];\r\n    };\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @param {?} parentCtor\r\n     * @return {?}\r\n     */\r\n    ReflectionCapabilities.prototype._ownAnnotations = /**\r\n     * @param {?} typeOrFunc\r\n     * @param {?} parentCtor\r\n     * @return {?}\r\n     */\r\n    function (typeOrFunc, parentCtor) {\r\n        // Prefer the direct API.\r\n        if ((/** @type {?} */ (typeOrFunc)).annotations && (/** @type {?} */ (typeOrFunc)).annotations !== parentCtor.annotations) {\r\n            var /** @type {?} */ annotations = (/** @type {?} */ (typeOrFunc)).annotations;\r\n            if (typeof annotations === 'function' && annotations.annotations) {\r\n                annotations = annotations.annotations;\r\n            }\r\n            return annotations;\r\n        }\r\n        // API of tsickle for lowering decorators to properties on the class.\r\n        if ((/** @type {?} */ (typeOrFunc)).decorators && (/** @type {?} */ (typeOrFunc)).decorators !== parentCtor.decorators) {\r\n            return convertTsickleDecoratorIntoMetadata((/** @type {?} */ (typeOrFunc)).decorators);\r\n        }\r\n        // API for metadata created by invoking the decorators.\r\n        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\r\n            return (/** @type {?} */ (typeOrFunc))[ANNOTATIONS];\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    ReflectionCapabilities.prototype.annotations = /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    function (typeOrFunc) {\r\n        if (!isType(typeOrFunc)) {\r\n            return [];\r\n        }\r\n        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\r\n        var /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\r\n        var /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\r\n        return parentAnnotations.concat(ownAnnotations);\r\n    };\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @param {?} parentCtor\r\n     * @return {?}\r\n     */\r\n    ReflectionCapabilities.prototype._ownPropMetadata = /**\r\n     * @param {?} typeOrFunc\r\n     * @param {?} parentCtor\r\n     * @return {?}\r\n     */\r\n    function (typeOrFunc, parentCtor) {\r\n        // Prefer the direct API.\r\n        if ((/** @type {?} */ (typeOrFunc)).propMetadata &&\r\n            (/** @type {?} */ (typeOrFunc)).propMetadata !== parentCtor.propMetadata) {\r\n            var /** @type {?} */ propMetadata = (/** @type {?} */ (typeOrFunc)).propMetadata;\r\n            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\r\n                propMetadata = propMetadata.propMetadata;\r\n            }\r\n            return propMetadata;\r\n        }\r\n        // API of tsickle for lowering decorators to properties on the class.\r\n        if ((/** @type {?} */ (typeOrFunc)).propDecorators &&\r\n            (/** @type {?} */ (typeOrFunc)).propDecorators !== parentCtor.propDecorators) {\r\n            var /** @type {?} */ propDecorators_1 = (/** @type {?} */ (typeOrFunc)).propDecorators;\r\n            var /** @type {?} */ propMetadata_1 = /** @type {?} */ ({});\r\n            Object.keys(propDecorators_1).forEach(function (prop) {\r\n                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);\r\n            });\r\n            return propMetadata_1;\r\n        }\r\n        // API for metadata created by invoking the decorators.\r\n        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\r\n            return (/** @type {?} */ (typeOrFunc))[PROP_METADATA];\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    ReflectionCapabilities.prototype.propMetadata = /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    function (typeOrFunc) {\r\n        if (!isType(typeOrFunc)) {\r\n            return {};\r\n        }\r\n        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\r\n        var /** @type {?} */ propMetadata = {};\r\n        if (parentCtor !== Object) {\r\n            var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentCtor);\r\n            Object.keys(parentPropMetadata_1).forEach(function (propName) {\r\n                propMetadata[propName] = parentPropMetadata_1[propName];\r\n            });\r\n        }\r\n        var /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\r\n        if (ownPropMetadata) {\r\n            Object.keys(ownPropMetadata).forEach(function (propName) {\r\n                var /** @type {?} */ decorators = [];\r\n                if (propMetadata.hasOwnProperty(propName)) {\r\n                    decorators.push.apply(decorators, propMetadata[propName]);\r\n                }\r\n                decorators.push.apply(decorators, ownPropMetadata[propName]);\r\n                propMetadata[propName] = decorators;\r\n            });\r\n        }\r\n        return propMetadata;\r\n    };\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} lcProperty\r\n     * @return {?}\r\n     */\r\n    ReflectionCapabilities.prototype.hasLifecycleHook = /**\r\n     * @param {?} type\r\n     * @param {?} lcProperty\r\n     * @return {?}\r\n     */\r\n    function (type, lcProperty) {\r\n        return type instanceof Type && lcProperty in type.prototype;\r\n    };\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    ReflectionCapabilities.prototype.guards = /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    function (type) { return {}; };\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    ReflectionCapabilities.prototype.getter = /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    function (name) { return /** @type {?} */ (new Function('o', 'return o.' + name + ';')); };\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    ReflectionCapabilities.prototype.setter = /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    function (name) {\r\n        return /** @type {?} */ (new Function('o', 'v', 'return o.' + name + ' = v;'));\r\n    };\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    ReflectionCapabilities.prototype.method = /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    function (name) {\r\n        var /** @type {?} */ functionBody = \"if (!o.\" + name + \") throw new Error('\\\"\" + name + \"\\\" is undefined');\\n        return o.\" + name + \".apply(o, args);\";\r\n        return /** @type {?} */ (new Function('o', 'args', functionBody));\r\n    };\r\n    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    ReflectionCapabilities.prototype.importUri = /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    function (type) {\r\n        // StaticSymbol\r\n        if (typeof type === 'object' && type['filePath']) {\r\n            return type['filePath'];\r\n        }\r\n        // Runtime type\r\n        return \"./\" + stringify(type);\r\n    };\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    ReflectionCapabilities.prototype.resourceUri = /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    function (type) { return \"./\" + stringify(type); };\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} moduleUrl\r\n     * @param {?} members\r\n     * @param {?} runtime\r\n     * @return {?}\r\n     */\r\n    ReflectionCapabilities.prototype.resolveIdentifier = /**\r\n     * @param {?} name\r\n     * @param {?} moduleUrl\r\n     * @param {?} members\r\n     * @param {?} runtime\r\n     * @return {?}\r\n     */\r\n    function (name, moduleUrl, members, runtime) {\r\n        return runtime;\r\n    };\r\n    /**\r\n     * @param {?} enumIdentifier\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    ReflectionCapabilities.prototype.resolveEnum = /**\r\n     * @param {?} enumIdentifier\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    function (enumIdentifier, name) { return enumIdentifier[name]; };\r\n    return ReflectionCapabilities;\r\n}());\r\n/**\r\n * @param {?} decoratorInvocations\r\n * @return {?}\r\n */\r\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\r\n    if (!decoratorInvocations) {\r\n        return [];\r\n    }\r\n    return decoratorInvocations.map(function (decoratorInvocation) {\r\n        var /** @type {?} */ decoratorType = decoratorInvocation.type;\r\n        var /** @type {?} */ annotationCls = decoratorType.annotationCls;\r\n        var /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\r\n        return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();\r\n    });\r\n}\r\n/**\r\n * @param {?} ctor\r\n * @return {?}\r\n */\r\nfunction getParentCtor(ctor) {\r\n    var /** @type {?} */ parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\r\n    var /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;\r\n    // Note: We always use `Object` as the null value\r\n    // to simplify checking later on.\r\n    return parentCtor || Object;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @template T\r\n * @param {?} objWithPropertyToExtract\r\n * @param {?} target\r\n * @return {?}\r\n */\r\nfunction getClosureSafeProperty(objWithPropertyToExtract, target) {\r\n    for (var /** @type {?} */ key in objWithPropertyToExtract) {\r\n        if (objWithPropertyToExtract[key] === target) {\r\n            return key;\r\n        }\r\n    }\r\n    throw Error('Could not find renamed property on target object.');\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An interface that a function passed into {\\@link forwardRef} has to implement.\r\n *\r\n * ### Example\r\n *\r\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\r\n * \\@experimental\r\n * @record\r\n */\r\n\r\n/**\r\n * Allows to refer to references which are not yet defined.\r\n *\r\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\r\n * DI is declared,\r\n * but not yet defined. It is also used when the `token` which we use when creating a query is not\r\n * yet defined.\r\n *\r\n * ### Example\r\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\r\n * \\@experimental\r\n * @param {?} forwardRefFn\r\n * @return {?}\r\n */\r\nfunction forwardRef(forwardRefFn) {\r\n    (/** @type {?} */ (forwardRefFn)).__forward_ref__ = forwardRef;\r\n    (/** @type {?} */ (forwardRefFn)).toString = function () { return stringify(this()); };\r\n    return (/** @type {?} */ (/** @type {?} */ (forwardRefFn)));\r\n}\r\n/**\r\n * Lazily retrieves the reference value from a forwardRef.\r\n *\r\n * Acts as the identity function when given a non-forward-ref value.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))\r\n *\r\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\r\n *\r\n * See: {\\@link forwardRef}\r\n * \\@experimental\r\n * @param {?} type\r\n * @return {?}\r\n */\r\nfunction resolveForwardRef(type) {\r\n    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&\r\n        type.__forward_ref__ === forwardRef) {\r\n        return (/** @type {?} */ (type))();\r\n    }\r\n    else {\r\n        return type;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Type of the Inject decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Inject decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nvar Inject = makeParamDecorator('Inject', function (token) { return ({ token: token }); });\r\n/**\r\n * Type of the Optional decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Optional decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nvar Optional = makeParamDecorator('Optional');\r\n/**\r\n * Type of the Self decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Self decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nvar Self = makeParamDecorator('Self');\r\n/**\r\n * Type of the SkipSelf decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * SkipSelf decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nvar SkipSelf = makeParamDecorator('SkipSelf');\r\n/**\r\n * Type of the Host decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Host decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nvar Host = makeParamDecorator('Host');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar SOURCE = '__source';\r\nvar _THROW_IF_NOT_FOUND = new Object();\r\nvar THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\r\n/**\r\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\r\n *\r\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\r\n * project.\r\n *\r\n * \\@experimental\r\n */\r\nvar INJECTOR = new InjectionToken('INJECTOR');\r\nvar NullInjector = /** @class */ (function () {\r\n    function NullInjector() {\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @return {?}\r\n     */\r\n    NullInjector.prototype.get = /**\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @return {?}\r\n     */\r\n    function (token, notFoundValue) {\r\n        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }\r\n        if (notFoundValue === _THROW_IF_NOT_FOUND) {\r\n            throw new Error(\"NullInjectorError: No provider for \" + stringify(token) + \"!\");\r\n        }\r\n        return notFoundValue;\r\n    };\r\n    return NullInjector;\r\n}());\r\n/**\r\n * \\@whatItDoes Injector interface\r\n * \\@howToUse\r\n * ```\r\n * const injector: Injector = ...;\r\n * injector.get(...);\r\n * ```\r\n *\r\n * \\@description\r\n * For more details, see the {\\@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\r\n *\r\n * ### Example\r\n *\r\n * {\\@example core/di/ts/injector_spec.ts region='Injector'}\r\n *\r\n * `Injector` returns itself when given `Injector` as a token:\r\n * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nvar Injector = /** @class */ (function () {\r\n    function Injector() {\r\n    }\r\n    /**\r\n     * Create a new Injector which is configure using `StaticProvider`s.\r\n     *\r\n     * ### Example\r\n     *\r\n     * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\r\n     */\r\n    /**\r\n     * Create a new Injector which is configure using `StaticProvider`s.\r\n     *\r\n     * ### Example\r\n     *\r\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\r\n     * @param {?} options\r\n     * @param {?=} parent\r\n     * @return {?}\r\n     */\r\n    Injector.create = /**\r\n     * Create a new Injector which is configure using `StaticProvider`s.\r\n     *\r\n     * ### Example\r\n     *\r\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\r\n     * @param {?} options\r\n     * @param {?=} parent\r\n     * @return {?}\r\n     */\r\n    function (options, parent) {\r\n        if (Array.isArray(options)) {\r\n            return new StaticInjector(options, parent);\r\n        }\r\n        else {\r\n            return new StaticInjector(options.providers, options.parent, options.name || null);\r\n        }\r\n    };\r\n    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\r\n    Injector.NULL = new NullInjector();\r\n    /** @nocollapse */ Injector.ngInjectableDef = defineInjectable({\r\n        providedIn: /** @type {?} */ ('any'),\r\n        factory: function () { return inject(INJECTOR); },\r\n    });\r\n    return Injector;\r\n}());\r\nvar IDENT = function (value) {\r\n    return value;\r\n};\r\nvar EMPTY = /** @type {?} */ ([]);\r\nvar CIRCULAR = IDENT;\r\nvar MULTI_PROVIDER_FN = function () {\r\n    return Array.prototype.slice.call(arguments);\r\n};\r\nvar GET_PROPERTY_NAME$1 = /** @type {?} */ ({});\r\nvar USE_VALUE$1 = getClosureSafeProperty$1({ provide: String, useValue: GET_PROPERTY_NAME$1 });\r\nvar NG_TOKEN_PATH = 'ngTokenPath';\r\nvar NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\r\nvar NULL_INJECTOR = Injector.NULL;\r\nvar NEW_LINE = /\\n/gm;\r\nvar NO_NEW_LINE = 'ɵ';\r\nvar StaticInjector = /** @class */ (function () {\r\n    function StaticInjector(providers, parent, source) {\r\n        if (parent === void 0) { parent = NULL_INJECTOR; }\r\n        if (source === void 0) { source = null; }\r\n        this.parent = parent;\r\n        this.source = source;\r\n        var /** @type {?} */ records = this._records = new Map();\r\n        records.set(Injector, /** @type {?} */ ({ token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false }));\r\n        records.set(INJECTOR, /** @type {?} */ ({ token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false }));\r\n        recursivelyProcessProviders(records, providers);\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @param {?=} flags\r\n     * @return {?}\r\n     */\r\n    StaticInjector.prototype.get = /**\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @param {?=} flags\r\n     * @return {?}\r\n     */\r\n    function (token, notFoundValue, flags) {\r\n        if (flags === void 0) { flags = 0 /* Default */; }\r\n        var /** @type {?} */ record = this._records.get(token);\r\n        try {\r\n            return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            var /** @type {?} */ tokenPath = e[NG_TEMP_TOKEN_PATH];\r\n            if (token[SOURCE]) {\r\n                tokenPath.unshift(token[SOURCE]);\r\n            }\r\n            e.message = formatError('\\n' + e.message, tokenPath, this.source);\r\n            e[NG_TOKEN_PATH] = tokenPath;\r\n            e[NG_TEMP_TOKEN_PATH] = null;\r\n            throw e;\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    StaticInjector.prototype.toString = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var /** @type {?} */ tokens = /** @type {?} */ ([]), /** @type {?} */ records = this._records;\r\n        records.forEach(function (v, token) { return tokens.push(stringify(token)); });\r\n        return \"StaticInjector[\" + tokens.join(', ') + \"]\";\r\n    };\r\n    return StaticInjector;\r\n}());\r\n/**\r\n * @param {?} provider\r\n * @return {?}\r\n */\r\nfunction resolveProvider(provider) {\r\n    var /** @type {?} */ deps = computeDeps(provider);\r\n    var /** @type {?} */ fn = IDENT;\r\n    var /** @type {?} */ value = EMPTY;\r\n    var /** @type {?} */ useNew = false;\r\n    var /** @type {?} */ provide = resolveForwardRef(provider.provide);\r\n    if (USE_VALUE$1 in provider) {\r\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\r\n        value = (/** @type {?} */ (provider)).useValue;\r\n    }\r\n    else if ((/** @type {?} */ (provider)).useFactory) {\r\n        fn = (/** @type {?} */ (provider)).useFactory;\r\n    }\r\n    else if ((/** @type {?} */ (provider)).useExisting) {\r\n        // Just use IDENT\r\n    }\r\n    else if ((/** @type {?} */ (provider)).useClass) {\r\n        useNew = true;\r\n        fn = resolveForwardRef((/** @type {?} */ (provider)).useClass);\r\n    }\r\n    else if (typeof provide == 'function') {\r\n        useNew = true;\r\n        fn = provide;\r\n    }\r\n    else {\r\n        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);\r\n    }\r\n    return { deps: deps, fn: fn, useNew: useNew, value: value };\r\n}\r\n/**\r\n * @param {?} token\r\n * @return {?}\r\n */\r\nfunction multiProviderMixError(token) {\r\n    return staticError('Cannot mix multi providers and regular providers', token);\r\n}\r\n/**\r\n * @param {?} records\r\n * @param {?} provider\r\n * @return {?}\r\n */\r\nfunction recursivelyProcessProviders(records, provider) {\r\n    if (provider) {\r\n        provider = resolveForwardRef(provider);\r\n        if (provider instanceof Array) {\r\n            // if we have an array recurse into the array\r\n            for (var /** @type {?} */ i = 0; i < provider.length; i++) {\r\n                recursivelyProcessProviders(records, provider[i]);\r\n            }\r\n        }\r\n        else if (typeof provider === 'function') {\r\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\r\n            // error messages\r\n            throw staticError('Function/Class not supported', provider);\r\n        }\r\n        else if (provider && typeof provider === 'object' && provider.provide) {\r\n            // At this point we have what looks like a provider: {provide: ?, ....}\r\n            var /** @type {?} */ token = resolveForwardRef(provider.provide);\r\n            var /** @type {?} */ resolvedProvider = resolveProvider(provider);\r\n            if (provider.multi === true) {\r\n                // This is a multi provider.\r\n                var /** @type {?} */ multiProvider = records.get(token);\r\n                if (multiProvider) {\r\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\r\n                        throw multiProviderMixError(token);\r\n                    }\r\n                }\r\n                else {\r\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\r\n                    records.set(token, multiProvider = /** @type {?} */ ({\r\n                        token: provider.provide,\r\n                        deps: [],\r\n                        useNew: false,\r\n                        fn: MULTI_PROVIDER_FN,\r\n                        value: EMPTY\r\n                    }));\r\n                }\r\n                // Treat the provider as the token.\r\n                token = provider;\r\n                multiProvider.deps.push({ token: token, options: 6 /* Default */ });\r\n            }\r\n            var /** @type {?} */ record = records.get(token);\r\n            if (record && record.fn == MULTI_PROVIDER_FN) {\r\n                throw multiProviderMixError(token);\r\n            }\r\n            records.set(token, resolvedProvider);\r\n        }\r\n        else {\r\n            throw staticError('Unexpected provider', provider);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} token\r\n * @param {?} record\r\n * @param {?} records\r\n * @param {?} parent\r\n * @param {?} notFoundValue\r\n * @param {?} flags\r\n * @return {?}\r\n */\r\nfunction tryResolveToken(token, record, records, parent, notFoundValue, flags) {\r\n    try {\r\n        return resolveToken(token, record, records, parent, notFoundValue, flags);\r\n    }\r\n    catch (/** @type {?} */ e) {\r\n        // ensure that 'e' is of type Error.\r\n        if (!(e instanceof Error)) {\r\n            e = new Error(e);\r\n        }\r\n        var /** @type {?} */ path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\r\n        path.unshift(token);\r\n        if (record && record.value == CIRCULAR) {\r\n            // Reset the Circular flag.\r\n            record.value = EMPTY;\r\n        }\r\n        throw e;\r\n    }\r\n}\r\n/**\r\n * @param {?} token\r\n * @param {?} record\r\n * @param {?} records\r\n * @param {?} parent\r\n * @param {?} notFoundValue\r\n * @param {?} flags\r\n * @return {?}\r\n */\r\nfunction resolveToken(token, record, records, parent, notFoundValue, flags) {\r\n    var /** @type {?} */ value;\r\n    if (record && !(flags & 1 /* SkipSelf */)) {\r\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\r\n        // to resolve it.\r\n        value = record.value;\r\n        if (value == CIRCULAR) {\r\n            throw Error(NO_NEW_LINE + 'Circular dependency');\r\n        }\r\n        else if (value === EMPTY) {\r\n            record.value = CIRCULAR;\r\n            var /** @type {?} */ obj = undefined;\r\n            var /** @type {?} */ useNew = record.useNew;\r\n            var /** @type {?} */ fn = record.fn;\r\n            var /** @type {?} */ depRecords = record.deps;\r\n            var /** @type {?} */ deps = EMPTY;\r\n            if (depRecords.length) {\r\n                deps = [];\r\n                for (var /** @type {?} */ i = 0; i < depRecords.length; i++) {\r\n                    var /** @type {?} */ depRecord = depRecords[i];\r\n                    var /** @type {?} */ options = depRecord.options;\r\n                    var /** @type {?} */ childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;\r\n                    deps.push(tryResolveToken(\r\n                    // Current Token to resolve\r\n                    depRecord.token, childRecord, records, \r\n                    // If we don't know how to resolve dependency and we should not check parent for it,\r\n                    // than pass in Null injector.\r\n                    !childRecord && !(options & 4 /* CheckParent */) ? NULL_INJECTOR : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, 0 /* Default */));\r\n                }\r\n            }\r\n            record.value = value = useNew ? new ((_a = (/** @type {?} */ (fn))).bind.apply(_a, [void 0].concat(deps)))() : fn.apply(obj, deps);\r\n        }\r\n    }\r\n    else if (!(flags & 2 /* Self */)) {\r\n        value = parent.get(token, notFoundValue, 0 /* Default */);\r\n    }\r\n    return value;\r\n    var _a;\r\n}\r\n/**\r\n * @param {?} provider\r\n * @return {?}\r\n */\r\nfunction computeDeps(provider) {\r\n    var /** @type {?} */ deps = EMPTY;\r\n    var /** @type {?} */ providerDeps = (/** @type {?} */ (provider)).deps;\r\n    if (providerDeps && providerDeps.length) {\r\n        deps = [];\r\n        for (var /** @type {?} */ i = 0; i < providerDeps.length; i++) {\r\n            var /** @type {?} */ options = 6;\r\n            var /** @type {?} */ token = resolveForwardRef(providerDeps[i]);\r\n            if (token instanceof Array) {\r\n                for (var /** @type {?} */ j = 0, /** @type {?} */ annotations = token; j < annotations.length; j++) {\r\n                    var /** @type {?} */ annotation = annotations[j];\r\n                    if (annotation instanceof Optional || annotation == Optional) {\r\n                        options = options | 1 /* Optional */;\r\n                    }\r\n                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\r\n                        options = options & ~2 /* CheckSelf */;\r\n                    }\r\n                    else if (annotation instanceof Self || annotation == Self) {\r\n                        options = options & ~4 /* CheckParent */;\r\n                    }\r\n                    else if (annotation instanceof Inject) {\r\n                        token = (/** @type {?} */ (annotation)).token;\r\n                    }\r\n                    else {\r\n                        token = resolveForwardRef(annotation);\r\n                    }\r\n                }\r\n            }\r\n            deps.push({ token: token, options: options });\r\n        }\r\n    }\r\n    else if ((/** @type {?} */ (provider)).useExisting) {\r\n        var /** @type {?} */ token = resolveForwardRef((/** @type {?} */ (provider)).useExisting);\r\n        deps = [{ token: token, options: 6 /* Default */ }];\r\n    }\r\n    else if (!providerDeps && !(USE_VALUE$1 in provider)) {\r\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\r\n        throw staticError('\\'deps\\' required', provider);\r\n    }\r\n    return deps;\r\n}\r\n/**\r\n * @param {?} text\r\n * @param {?} obj\r\n * @param {?=} source\r\n * @return {?}\r\n */\r\nfunction formatError(text, obj, source) {\r\n    if (source === void 0) { source = null; }\r\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\r\n    var /** @type {?} */ context = stringify(obj);\r\n    if (obj instanceof Array) {\r\n        context = obj.map(stringify).join(' -> ');\r\n    }\r\n    else if (typeof obj === 'object') {\r\n        var /** @type {?} */ parts = /** @type {?} */ ([]);\r\n        for (var /** @type {?} */ key in obj) {\r\n            if (obj.hasOwnProperty(key)) {\r\n                var /** @type {?} */ value = obj[key];\r\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\r\n            }\r\n        }\r\n        context = \"{\" + parts.join(', ') + \"}\";\r\n    }\r\n    return \"StaticInjectorError\" + (source ? '(' + source + ')' : '') + \"[\" + context + \"]: \" + text.replace(NEW_LINE, '\\n  ');\r\n}\r\n/**\r\n * @param {?} text\r\n * @param {?} obj\r\n * @return {?}\r\n */\r\nfunction staticError(text, obj) {\r\n    return new Error(formatError(text, obj));\r\n}\r\n/**\r\n * @template T\r\n * @param {?} objWithPropertyToExtract\r\n * @return {?}\r\n */\r\nfunction getClosureSafeProperty$1(objWithPropertyToExtract) {\r\n    for (var /** @type {?} */ key in objWithPropertyToExtract) {\r\n        if (objWithPropertyToExtract[key] === GET_PROPERTY_NAME$1) {\r\n            return key;\r\n        }\r\n    }\r\n    throw Error('!prop');\r\n}\r\nvar _currentInjector = null;\r\n/**\r\n * @param {?} injector\r\n * @return {?}\r\n */\r\nfunction setCurrentInjector(injector) {\r\n    var /** @type {?} */ former = _currentInjector;\r\n    _currentInjector = injector;\r\n    return former;\r\n}\r\n/**\r\n * @template T\r\n * @param {?} token\r\n * @param {?=} notFoundValue\r\n * @param {?=} flags\r\n * @return {?}\r\n */\r\nfunction inject(token, notFoundValue, flags) {\r\n    if (flags === void 0) { flags = 0 /* Default */; }\r\n    if (_currentInjector === null) {\r\n        throw new Error(\"inject() must be called from an injection context\");\r\n    }\r\n    return _currentInjector.get(token, notFoundValue, flags);\r\n}\r\n/**\r\n * @param {?} types\r\n * @return {?}\r\n */\r\nfunction injectArgs(types) {\r\n    var /** @type {?} */ args = [];\r\n    for (var /** @type {?} */ i = 0; i < types.length; i++) {\r\n        var /** @type {?} */ arg = types[i];\r\n        if (Array.isArray(arg)) {\r\n            if (arg.length === 0) {\r\n                throw new Error('Arguments array must have arguments.');\r\n            }\r\n            var /** @type {?} */ type = undefined;\r\n            var /** @type {?} */ defaultValue = undefined;\r\n            var /** @type {?} */ flags = 0;\r\n            for (var /** @type {?} */ j = 0; j < arg.length; j++) {\r\n                var /** @type {?} */ meta = arg[j];\r\n                if (meta instanceof Optional || meta.__proto__.ngMetadataName === 'Optional') {\r\n                    defaultValue = null;\r\n                }\r\n                else if (meta instanceof SkipSelf || meta.__proto__.ngMetadataName === 'SkipSelf') {\r\n                    flags |= 1 /* SkipSelf */;\r\n                }\r\n                else if (meta instanceof Self || meta.__proto__.ngMetadataName === 'Self') {\r\n                    flags |= 2 /* Self */;\r\n                }\r\n                else if (meta instanceof Inject) {\r\n                    type = meta.token;\r\n                }\r\n                else {\r\n                    type = meta;\r\n                }\r\n            }\r\n            args.push(inject(/** @type {?} */ ((type)), defaultValue, 0 /* Default */));\r\n        }\r\n        else {\r\n            args.push(inject(arg));\r\n        }\r\n    }\r\n    return args;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar GET_PROPERTY_NAME = /** @type {?} */ ({});\r\nvar ɵ0 = GET_PROPERTY_NAME;\r\nvar USE_VALUE = getClosureSafeProperty({ provide: String, useValue: ɵ0 }, GET_PROPERTY_NAME);\r\n/**\r\n * Type of the Injectable decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\nvar EMPTY_ARRAY = [];\r\n/**\r\n * @param {?} type\r\n * @param {?=} provider\r\n * @return {?}\r\n */\r\nfunction convertInjectableProviderToFactory(type, provider) {\r\n    if (!provider) {\r\n        var /** @type {?} */ reflectionCapabilities = new ReflectionCapabilities();\r\n        var /** @type {?} */ deps_1 = reflectionCapabilities.parameters(type);\r\n        // TODO - convert to flags.\r\n        return function () { return new (type.bind.apply(type, [void 0].concat(injectArgs(/** @type {?} */ (deps_1)))))(); };\r\n    }\r\n    if (USE_VALUE in provider) {\r\n        var /** @type {?} */ valueProvider_1 = (/** @type {?} */ (provider));\r\n        return function () { return valueProvider_1.useValue; };\r\n    }\r\n    else if ((/** @type {?} */ (provider)).useExisting) {\r\n        var /** @type {?} */ existingProvider_1 = (/** @type {?} */ (provider));\r\n        return function () { return inject(existingProvider_1.useExisting); };\r\n    }\r\n    else if ((/** @type {?} */ (provider)).useFactory) {\r\n        var /** @type {?} */ factoryProvider_1 = (/** @type {?} */ (provider));\r\n        return function () { return factoryProvider_1.useFactory.apply(factoryProvider_1, injectArgs(factoryProvider_1.deps || EMPTY_ARRAY)); };\r\n    }\r\n    else if ((/** @type {?} */ (provider)).useClass) {\r\n        var /** @type {?} */ classProvider_1 = (/** @type {?} */ (provider));\r\n        var /** @type {?} */ deps_2 = (/** @type {?} */ (provider)).deps;\r\n        if (!deps_2) {\r\n            var /** @type {?} */ reflectionCapabilities = new ReflectionCapabilities();\r\n            deps_2 = reflectionCapabilities.parameters(type);\r\n        }\r\n        return function () {\r\n            return new ((_a = classProvider_1.useClass).bind.apply(_a, [void 0].concat(injectArgs(deps_2))))();\r\n            var _a;\r\n        };\r\n    }\r\n    else {\r\n        var /** @type {?} */ deps_3 = (/** @type {?} */ (provider)).deps;\r\n        if (!deps_3) {\r\n            var /** @type {?} */ reflectionCapabilities = new ReflectionCapabilities();\r\n            deps_3 = reflectionCapabilities.parameters(type);\r\n        }\r\n        return function () { return new (type.bind.apply(type, [void 0].concat(injectArgs(/** @type {?} */ ((deps_3))))))(); };\r\n    }\r\n}\r\n/**\r\n * Injectable decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nvar Injectable = makeDecorator('Injectable', undefined, undefined, undefined, function (injectableType, options) {\r\n    if (options && options.providedIn !== undefined &&\r\n        injectableType.ngInjectableDef === undefined) {\r\n        /** @nocollapse */ injectableType.ngInjectableDef = defineInjectable({\r\n            providedIn: options.providedIn,\r\n            factory: convertInjectableProviderToFactory(injectableType, options)\r\n        });\r\n    }\r\n});\r\n/**\r\n * Type representing injectable service.\r\n *\r\n * \\@experimental\r\n * @record\r\n * @template T\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A wrapper around a module that also includes the providers.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Interface for schema definitions in \\@NgModules.\r\n *\r\n * \\@experimental\r\n * @record\r\n */\r\n\r\n/**\r\n * Defines a schema that will allow:\r\n * - any non-Angular elements with a `-` in their name,\r\n * - any properties on elements with a `-` in their name which is the common rule for custom\r\n * elements.\r\n *\r\n * \\@stable\r\n */\r\nvar CUSTOM_ELEMENTS_SCHEMA = {\r\n    name: 'custom-elements'\r\n};\r\n/**\r\n * Defines a schema that will allow any property on any element.\r\n *\r\n * \\@experimental\r\n */\r\nvar NO_ERRORS_SCHEMA = {\r\n    name: 'no-errors-schema'\r\n};\r\n/**\r\n * Type of the NgModule decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * NgModule decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nvar NgModule = makeDecorator('NgModule', function (ngModule) { return ngModule; }, undefined, undefined, function (moduleType, metadata) {\r\n    var /** @type {?} */ imports = (metadata && metadata.imports) || [];\r\n    if (metadata && metadata.exports) {\r\n        imports = imports.concat([metadata.exports]);\r\n    }\r\n    moduleType.ngInjectorDef = defineInjector({\r\n        factory: convertInjectableProviderToFactory(moduleType, { useClass: moduleType }),\r\n        providers: metadata && metadata.providers,\r\n        imports: imports,\r\n    });\r\n});\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @enum {number} */\r\nvar ViewEncapsulation = {\r\n    /**\r\n       * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\r\n       * Element and pre-processing the style rules provided via {@link Component#styles styles} or\r\n       * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\r\n       * selectors.\r\n       *\r\n       * This is the default option.\r\n       */\r\n    Emulated: 0,\r\n    /**\r\n       * Use the native encapsulation mechanism of the renderer.\r\n       *\r\n       * For the DOM this means using [Shadow DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\r\n       * creating a ShadowRoot for Component's Host Element.\r\n       */\r\n    Native: 1,\r\n    /**\r\n       * Don't provide any template or style encapsulation.\r\n       */\r\n    None: 2,\r\n};\r\nViewEncapsulation[ViewEncapsulation.Emulated] = \"Emulated\";\r\nViewEncapsulation[ViewEncapsulation.Native] = \"Native\";\r\nViewEncapsulation[ViewEncapsulation.None] = \"None\";\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Represents the version of Angular\r\n *\r\n * \\@stable\r\n */\r\nvar Version = /** @class */ (function () {\r\n    function Version(full) {\r\n        this.full = full;\r\n        this.major = full.split('.')[0];\r\n        this.minor = full.split('.')[1];\r\n        this.patch = full.split('.').slice(2).join('.');\r\n    }\r\n    return Version;\r\n}());\r\n/**\r\n * \\@stable\r\n */\r\nvar VERSION = new Version('6.0.0-rc.0-a5f0939');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nvar ERROR_DEBUG_CONTEXT = 'ngDebugContext';\r\nvar ERROR_ORIGINAL_ERROR = 'ngOriginalError';\r\nvar ERROR_LOGGER = 'ngErrorLogger';\r\n/**\r\n * @param {?} error\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * @param {?} error\r\n * @return {?}\r\n */\r\nfunction getDebugContext(error) {\r\n    return (/** @type {?} */ (error))[ERROR_DEBUG_CONTEXT];\r\n}\r\n/**\r\n * @param {?} error\r\n * @return {?}\r\n */\r\nfunction getOriginalError(error) {\r\n    return (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR];\r\n}\r\n/**\r\n * @param {?} error\r\n * @return {?}\r\n */\r\nfunction getErrorLogger(error) {\r\n    return (/** @type {?} */ (error))[ERROR_LOGGER] || defaultErrorLogger;\r\n}\r\n/**\r\n * @param {?} console\r\n * @param {...?} values\r\n * @return {?}\r\n */\r\nfunction defaultErrorLogger(console) {\r\n    var values = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        values[_i - 1] = arguments[_i];\r\n    }\r\n    console.error.apply(console, values);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Provides a hook for centralized exception handling.\r\n *\r\n * \\@description\r\n *\r\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\r\n * intercept error handling, write a custom exception handler that replaces this default as\r\n * appropriate for your app.\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * class MyErrorHandler implements ErrorHandler {\r\n *   handleError(error) {\r\n *     // do something with the exception\r\n *   }\r\n * }\r\n *\r\n * \\@NgModule({\r\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\r\n * })\r\n * class MyModule {}\r\n * ```\r\n *\r\n * \\@stable\r\n */\r\nvar ErrorHandler = /** @class */ (function () {\r\n    function ErrorHandler() {\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._console = console;\r\n    }\r\n    /**\r\n     * @param {?} error\r\n     * @return {?}\r\n     */\r\n    ErrorHandler.prototype.handleError = /**\r\n     * @param {?} error\r\n     * @return {?}\r\n     */\r\n    function (error) {\r\n        var /** @type {?} */ originalError = this._findOriginalError(error);\r\n        var /** @type {?} */ context = this._findContext(error);\r\n        // Note: Browser consoles show the place from where console.error was called.\r\n        // We can use this to give users additional information about the error.\r\n        var /** @type {?} */ errorLogger = getErrorLogger(error);\r\n        errorLogger(this._console, \"ERROR\", error);\r\n        if (originalError) {\r\n            errorLogger(this._console, \"ORIGINAL ERROR\", originalError);\r\n        }\r\n        if (context) {\r\n            errorLogger(this._console, 'ERROR CONTEXT', context);\r\n        }\r\n    };\r\n    /** @internal */\r\n    /**\r\n     * \\@internal\r\n     * @param {?} error\r\n     * @return {?}\r\n     */\r\n    ErrorHandler.prototype._findContext = /**\r\n     * \\@internal\r\n     * @param {?} error\r\n     * @return {?}\r\n     */\r\n    function (error) {\r\n        if (error) {\r\n            return getDebugContext(error) ? getDebugContext(error) :\r\n                this._findContext(getOriginalError(error));\r\n        }\r\n        return null;\r\n    };\r\n    /** @internal */\r\n    /**\r\n     * \\@internal\r\n     * @param {?} error\r\n     * @return {?}\r\n     */\r\n    ErrorHandler.prototype._findOriginalError = /**\r\n     * \\@internal\r\n     * @param {?} error\r\n     * @return {?}\r\n     */\r\n    function (error) {\r\n        var /** @type {?} */ e = getOriginalError(error);\r\n        while (e && getOriginalError(e)) {\r\n            e = getOriginalError(e);\r\n        }\r\n        return e;\r\n    };\r\n    return ErrorHandler;\r\n}());\r\n/**\r\n * @param {?} message\r\n * @param {?} originalError\r\n * @return {?}\r\n */\r\nfunction wrappedError(message, originalError) {\r\n    var /** @type {?} */ msg = message + \" caused by: \" + (originalError instanceof Error ? originalError.message : originalError);\r\n    var /** @type {?} */ error = Error(msg);\r\n    (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR] = originalError;\r\n    return error;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} keys\r\n * @return {?}\r\n */\r\nfunction findFirstClosedCycle(keys) {\r\n    var /** @type {?} */ res = [];\r\n    for (var /** @type {?} */ i = 0; i < keys.length; ++i) {\r\n        if (res.indexOf(keys[i]) > -1) {\r\n            res.push(keys[i]);\r\n            return res;\r\n        }\r\n        res.push(keys[i]);\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * @param {?} keys\r\n * @return {?}\r\n */\r\nfunction constructResolvingPath(keys) {\r\n    if (keys.length > 1) {\r\n        var /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());\r\n        var /** @type {?} */ tokenStrs = reversed.map(function (k) { return stringify(k.token); });\r\n        return ' (' + tokenStrs.join(' -> ') + ')';\r\n    }\r\n    return '';\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @param {?} injector\r\n * @param {?} key\r\n * @param {?} constructResolvingMessage\r\n * @param {?=} originalError\r\n * @return {?}\r\n */\r\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\r\n    var /** @type {?} */ keys = [key];\r\n    var /** @type {?} */ errMsg = constructResolvingMessage(keys);\r\n    var /** @type {?} */ error = /** @type {?} */ ((originalError ? wrappedError(errMsg, originalError) : Error(errMsg)));\r\n    error.addKey = addKey;\r\n    error.keys = keys;\r\n    error.injectors = [injector];\r\n    error.constructResolvingMessage = constructResolvingMessage;\r\n    (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR] = originalError;\r\n    return error;\r\n}\r\n/**\r\n * @this {?}\r\n * @param {?} injector\r\n * @param {?} key\r\n * @return {?}\r\n */\r\nfunction addKey(injector, key) {\r\n    this.injectors.push(injector);\r\n    this.keys.push(key);\r\n    // Note: This updated message won't be reflected in the `.stack` property\r\n    this.message = this.constructResolvingMessage(this.keys);\r\n}\r\n/**\r\n * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\r\n * {\\@link Injector} does not have a {\\@link Provider} for the given key.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))\r\n *\r\n * ```typescript\r\n * class A {\r\n *   constructor(b:B) {}\r\n * }\r\n *\r\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\r\n * ```\r\n * @param {?} injector\r\n * @param {?} key\r\n * @return {?}\r\n */\r\nfunction noProviderError(injector, key) {\r\n    return injectionError(injector, key, function (keys) {\r\n        var /** @type {?} */ first = stringify(keys[0].token);\r\n        return \"No provider for \" + first + \"!\" + constructResolvingPath(keys);\r\n    });\r\n}\r\n/**\r\n * Thrown when dependencies form a cycle.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))\r\n *\r\n * ```typescript\r\n * var injector = Injector.resolveAndCreate([\r\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\r\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\r\n * ]);\r\n *\r\n * expect(() => injector.get(\"one\")).toThrowError();\r\n * ```\r\n *\r\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\r\n * @param {?} injector\r\n * @param {?} key\r\n * @return {?}\r\n */\r\nfunction cyclicDependencyError(injector, key) {\r\n    return injectionError(injector, key, function (keys) {\r\n        return \"Cannot instantiate cyclic dependency!\" + constructResolvingPath(keys);\r\n    });\r\n}\r\n/**\r\n * Thrown when a constructing type returns with an Error.\r\n *\r\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\r\n * this object to be instantiated.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))\r\n *\r\n * ```typescript\r\n * class A {\r\n *   constructor() {\r\n *     throw new Error('message');\r\n *   }\r\n * }\r\n *\r\n * var injector = Injector.resolveAndCreate([A]);\r\n * try {\r\n *   injector.get(A);\r\n * } catch (e) {\r\n *   expect(e instanceof InstantiationError).toBe(true);\r\n *   expect(e.originalException.message).toEqual(\"message\");\r\n *   expect(e.originalStack).toBeDefined();\r\n * }\r\n * ```\r\n * @param {?} injector\r\n * @param {?} originalException\r\n * @param {?} originalStack\r\n * @param {?} key\r\n * @return {?}\r\n */\r\nfunction instantiationError(injector, originalException, originalStack, key) {\r\n    return injectionError(injector, key, function (keys) {\r\n        var /** @type {?} */ first = stringify(keys[0].token);\r\n        return originalException.message + \": Error during instantiation of \" + first + \"!\" + constructResolvingPath(keys) + \".\";\r\n    }, originalException);\r\n}\r\n/**\r\n * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\r\n * creation.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))\r\n *\r\n * ```typescript\r\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\r\n * ```\r\n * @param {?} provider\r\n * @return {?}\r\n */\r\nfunction invalidProviderError(provider) {\r\n    return Error(\"Invalid provider - only instances of Provider and Type are allowed, got: \" + provider);\r\n}\r\n/**\r\n * Thrown when the class has no annotation information.\r\n *\r\n * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\r\n * need to be injected into the constructor.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))\r\n *\r\n * ```typescript\r\n * class A {\r\n *   constructor(b) {}\r\n * }\r\n *\r\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\r\n * ```\r\n *\r\n * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\r\n *\r\n * ```typescript\r\n * class B {}\r\n *\r\n * class A {\r\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\r\n * }\r\n *\r\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\r\n * ```\r\n * \\@stable\r\n * @param {?} typeOrFunc\r\n * @param {?} params\r\n * @return {?}\r\n */\r\nfunction noAnnotationError(typeOrFunc, params) {\r\n    var /** @type {?} */ signature = [];\r\n    for (var /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {\r\n        var /** @type {?} */ parameter = params[i];\r\n        if (!parameter || parameter.length == 0) {\r\n            signature.push('?');\r\n        }\r\n        else {\r\n            signature.push(parameter.map(stringify).join(' '));\r\n        }\r\n    }\r\n    return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\r\n        signature.join(', ') + '). ' +\r\n        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\r\n        stringify(typeOrFunc) + '\\' is decorated with Injectable.');\r\n}\r\n/**\r\n * Thrown when getting an object by index.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))\r\n *\r\n * ```typescript\r\n * class A {}\r\n *\r\n * var injector = Injector.resolveAndCreate([A]);\r\n *\r\n * expect(() => injector.getAt(100)).toThrowError();\r\n * ```\r\n * \\@stable\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction outOfBoundsError(index) {\r\n    return Error(\"Index \" + index + \" is out-of-bounds.\");\r\n}\r\n/**\r\n * Thrown when a multi provider and a regular provider are bound to the same token.\r\n *\r\n * ### Example\r\n *\r\n * ```typescript\r\n * expect(() => Injector.resolveAndCreate([\r\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\r\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\r\n * ])).toThrowError();\r\n * ```\r\n * @param {?} provider1\r\n * @param {?} provider2\r\n * @return {?}\r\n */\r\nfunction mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\r\n    return Error(\"Cannot mix multi providers and regular providers, got: \" + provider1 + \" \" + provider2);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\r\n *\r\n * Keys have:\r\n * - a system-wide unique `id`.\r\n * - a `token`.\r\n *\r\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\r\n * the\r\n * injector to store created objects in a more efficient way.\r\n *\r\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\r\n * resolving\r\n * providers.\r\n * @deprecated No replacement\r\n */\r\nvar ReflectiveKey = /** @class */ (function () {\r\n    /**\r\n     * Private\r\n     */\r\n    function ReflectiveKey(token, id) {\r\n        this.token = token;\r\n        this.id = id;\r\n        if (!token) {\r\n            throw new Error('Token must be defined!');\r\n        }\r\n        this.displayName = stringify(this.token);\r\n    }\r\n    /**\r\n     * Retrieves a `Key` for a token.\r\n     */\r\n    /**\r\n     * Retrieves a `Key` for a token.\r\n     * @param {?} token\r\n     * @return {?}\r\n     */\r\n    ReflectiveKey.get = /**\r\n     * Retrieves a `Key` for a token.\r\n     * @param {?} token\r\n     * @return {?}\r\n     */\r\n    function (token) {\r\n        return _globalKeyRegistry.get(resolveForwardRef(token));\r\n    };\r\n    Object.defineProperty(ReflectiveKey, \"numberOfKeys\", {\r\n        /**\r\n         * @returns the number of keys registered in the system.\r\n         */\r\n        get: /**\r\n         * @return {?} the number of keys registered in the system.\r\n         */\r\n        function () { return _globalKeyRegistry.numberOfKeys; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ReflectiveKey;\r\n}());\r\nvar KeyRegistry = /** @class */ (function () {\r\n    function KeyRegistry() {\r\n        this._allKeys = new Map();\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @return {?}\r\n     */\r\n    KeyRegistry.prototype.get = /**\r\n     * @param {?} token\r\n     * @return {?}\r\n     */\r\n    function (token) {\r\n        if (token instanceof ReflectiveKey)\r\n            return token;\r\n        if (this._allKeys.has(token)) {\r\n            return /** @type {?} */ ((this._allKeys.get(token)));\r\n        }\r\n        var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\r\n        this._allKeys.set(token, newKey);\r\n        return newKey;\r\n    };\r\n    Object.defineProperty(KeyRegistry.prototype, \"numberOfKeys\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return this._allKeys.size; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return KeyRegistry;\r\n}());\r\nvar _globalKeyRegistry = new KeyRegistry();\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Provides access to reflection data about symbols. Used internally by Angular\r\n * to power dependency injection and compilation.\r\n */\r\nvar Reflector = /** @class */ (function () {\r\n    function Reflector(reflectionCapabilities) {\r\n        this.reflectionCapabilities = reflectionCapabilities;\r\n    }\r\n    /**\r\n     * @param {?} caps\r\n     * @return {?}\r\n     */\r\n    Reflector.prototype.updateCapabilities = /**\r\n     * @param {?} caps\r\n     * @return {?}\r\n     */\r\n    function (caps) { this.reflectionCapabilities = caps; };\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    Reflector.prototype.factory = /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    function (type) { return this.reflectionCapabilities.factory(type); };\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    Reflector.prototype.parameters = /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    function (typeOrFunc) {\r\n        return this.reflectionCapabilities.parameters(typeOrFunc);\r\n    };\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    Reflector.prototype.annotations = /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    function (typeOrFunc) {\r\n        return this.reflectionCapabilities.annotations(typeOrFunc);\r\n    };\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    Reflector.prototype.propMetadata = /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    function (typeOrFunc) {\r\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\r\n    };\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} lcProperty\r\n     * @return {?}\r\n     */\r\n    Reflector.prototype.hasLifecycleHook = /**\r\n     * @param {?} type\r\n     * @param {?} lcProperty\r\n     * @return {?}\r\n     */\r\n    function (type, lcProperty) {\r\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\r\n    };\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    Reflector.prototype.getter = /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    function (name) { return this.reflectionCapabilities.getter(name); };\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    Reflector.prototype.setter = /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    function (name) { return this.reflectionCapabilities.setter(name); };\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    Reflector.prototype.method = /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    function (name) { return this.reflectionCapabilities.method(name); };\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    Reflector.prototype.importUri = /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    function (type) { return this.reflectionCapabilities.importUri(type); };\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    Reflector.prototype.resourceUri = /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    function (type) { return this.reflectionCapabilities.resourceUri(type); };\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} moduleUrl\r\n     * @param {?} members\r\n     * @param {?} runtime\r\n     * @return {?}\r\n     */\r\n    Reflector.prototype.resolveIdentifier = /**\r\n     * @param {?} name\r\n     * @param {?} moduleUrl\r\n     * @param {?} members\r\n     * @param {?} runtime\r\n     * @return {?}\r\n     */\r\n    function (name, moduleUrl, members, runtime) {\r\n        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\r\n    };\r\n    /**\r\n     * @param {?} identifier\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    Reflector.prototype.resolveEnum = /**\r\n     * @param {?} identifier\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    function (identifier, name) {\r\n        return this.reflectionCapabilities.resolveEnum(identifier, name);\r\n    };\r\n    return Reflector;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * The {\\@link Reflector} used internally in Angular to access metadata\r\n * about symbols.\r\n */\r\nvar reflector = new Reflector(new ReflectionCapabilities());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * `Dependency` is used by the framework to extend DI.\r\n * This is internal to Angular and should not be used directly.\r\n */\r\nvar ReflectiveDependency = /** @class */ (function () {\r\n    function ReflectiveDependency(key, optional, visibility) {\r\n        this.key = key;\r\n        this.optional = optional;\r\n        this.visibility = visibility;\r\n    }\r\n    /**\r\n     * @param {?} key\r\n     * @return {?}\r\n     */\r\n    ReflectiveDependency.fromKey = /**\r\n     * @param {?} key\r\n     * @return {?}\r\n     */\r\n    function (key) {\r\n        return new ReflectiveDependency(key, false, null);\r\n    };\r\n    return ReflectiveDependency;\r\n}());\r\nvar _EMPTY_LIST = [];\r\n/**\r\n * An internal resolved representation of a {\\@link Provider} used by the {\\@link Injector}.\r\n *\r\n * It is usually created automatically by `Injector.resolveAndCreate`.\r\n *\r\n * It can be created manually, as follows:\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/RfEnhh8kUEI0G3qsnIeT?p%3Dpreview&p=preview))\r\n *\r\n * ```typescript\r\n * var resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);\r\n * var injector = Injector.fromResolvedProviders(resolvedProviders);\r\n *\r\n * expect(injector.get('message')).toEqual('Hello');\r\n * ```\r\n *\r\n * \\@experimental\r\n * @record\r\n */\r\n\r\nvar ResolvedReflectiveProvider_ = /** @class */ (function () {\r\n    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {\r\n        this.key = key;\r\n        this.resolvedFactories = resolvedFactories;\r\n        this.multiProvider = multiProvider;\r\n        this.resolvedFactory = this.resolvedFactories[0];\r\n    }\r\n    return ResolvedReflectiveProvider_;\r\n}());\r\n/**\r\n * An internal resolved representation of a factory function created by resolving {\\@link\r\n * Provider}.\r\n * \\@experimental\r\n */\r\nvar ResolvedReflectiveFactory = /** @class */ (function () {\r\n    function ResolvedReflectiveFactory(factory, dependencies) {\r\n        this.factory = factory;\r\n        this.dependencies = dependencies;\r\n    }\r\n    return ResolvedReflectiveFactory;\r\n}());\r\n/**\r\n * Resolve a single provider.\r\n * @param {?} provider\r\n * @return {?}\r\n */\r\nfunction resolveReflectiveFactory(provider) {\r\n    var /** @type {?} */ factoryFn;\r\n    var /** @type {?} */ resolvedDeps;\r\n    if (provider.useClass) {\r\n        var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);\r\n        factoryFn = reflector.factory(useClass);\r\n        resolvedDeps = _dependenciesFor(useClass);\r\n    }\r\n    else if (provider.useExisting) {\r\n        factoryFn = function (aliasInstance) { return aliasInstance; };\r\n        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\r\n    }\r\n    else if (provider.useFactory) {\r\n        factoryFn = provider.useFactory;\r\n        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\r\n    }\r\n    else {\r\n        factoryFn = function () { return provider.useValue; };\r\n        resolvedDeps = _EMPTY_LIST;\r\n    }\r\n    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\r\n}\r\n/**\r\n * Converts the {\\@link Provider} into {\\@link ResolvedProvider}.\r\n *\r\n * {\\@link Injector} internally only uses {\\@link ResolvedProvider}, {\\@link Provider} contains\r\n * convenience provider syntax.\r\n * @param {?} provider\r\n * @return {?}\r\n */\r\nfunction resolveReflectiveProvider(provider) {\r\n    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\r\n}\r\n/**\r\n * Resolve a list of Providers.\r\n * @param {?} providers\r\n * @return {?}\r\n */\r\nfunction resolveReflectiveProviders(providers) {\r\n    var /** @type {?} */ normalized = _normalizeProviders(providers, []);\r\n    var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);\r\n    var /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\r\n    return Array.from(resolvedProviderMap.values());\r\n}\r\n/**\r\n * Merges a list of ResolvedProviders into a list where\r\n * each key is contained exactly once and multi providers\r\n * have been merged.\r\n * @param {?} providers\r\n * @param {?} normalizedProvidersMap\r\n * @return {?}\r\n */\r\nfunction mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\r\n    for (var /** @type {?} */ i = 0; i < providers.length; i++) {\r\n        var /** @type {?} */ provider = providers[i];\r\n        var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);\r\n        if (existing) {\r\n            if (provider.multiProvider !== existing.multiProvider) {\r\n                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\r\n            }\r\n            if (provider.multiProvider) {\r\n                for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {\r\n                    existing.resolvedFactories.push(provider.resolvedFactories[j]);\r\n                }\r\n            }\r\n            else {\r\n                normalizedProvidersMap.set(provider.key.id, provider);\r\n            }\r\n        }\r\n        else {\r\n            var /** @type {?} */ resolvedProvider = void 0;\r\n            if (provider.multiProvider) {\r\n                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\r\n            }\r\n            else {\r\n                resolvedProvider = provider;\r\n            }\r\n            normalizedProvidersMap.set(provider.key.id, resolvedProvider);\r\n        }\r\n    }\r\n    return normalizedProvidersMap;\r\n}\r\n/**\r\n * @param {?} providers\r\n * @param {?} res\r\n * @return {?}\r\n */\r\nfunction _normalizeProviders(providers, res) {\r\n    providers.forEach(function (b) {\r\n        if (b instanceof Type) {\r\n            res.push({ provide: b, useClass: b });\r\n        }\r\n        else if (b && typeof b == 'object' && (/** @type {?} */ (b)).provide !== undefined) {\r\n            res.push(/** @type {?} */ (b));\r\n        }\r\n        else if (b instanceof Array) {\r\n            _normalizeProviders(b, res);\r\n        }\r\n        else {\r\n            throw invalidProviderError(b);\r\n        }\r\n    });\r\n    return res;\r\n}\r\n/**\r\n * @param {?} typeOrFunc\r\n * @param {?=} dependencies\r\n * @return {?}\r\n */\r\nfunction constructDependencies(typeOrFunc, dependencies) {\r\n    if (!dependencies) {\r\n        return _dependenciesFor(typeOrFunc);\r\n    }\r\n    else {\r\n        var /** @type {?} */ params_1 = dependencies.map(function (t) { return [t]; });\r\n        return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });\r\n    }\r\n}\r\n/**\r\n * @param {?} typeOrFunc\r\n * @return {?}\r\n */\r\nfunction _dependenciesFor(typeOrFunc) {\r\n    var /** @type {?} */ params = reflector.parameters(typeOrFunc);\r\n    if (!params)\r\n        return [];\r\n    if (params.some(function (p) { return p == null; })) {\r\n        throw noAnnotationError(typeOrFunc, params);\r\n    }\r\n    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });\r\n}\r\n/**\r\n * @param {?} typeOrFunc\r\n * @param {?} metadata\r\n * @param {?} params\r\n * @return {?}\r\n */\r\nfunction _extractToken(typeOrFunc, metadata, params) {\r\n    var /** @type {?} */ token = null;\r\n    var /** @type {?} */ optional = false;\r\n    if (!Array.isArray(metadata)) {\r\n        if (metadata instanceof Inject) {\r\n            return _createDependency(metadata.token, optional, null);\r\n        }\r\n        else {\r\n            return _createDependency(metadata, optional, null);\r\n        }\r\n    }\r\n    var /** @type {?} */ visibility = null;\r\n    for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {\r\n        var /** @type {?} */ paramMetadata = metadata[i];\r\n        if (paramMetadata instanceof Type) {\r\n            token = paramMetadata;\r\n        }\r\n        else if (paramMetadata instanceof Inject) {\r\n            token = paramMetadata.token;\r\n        }\r\n        else if (paramMetadata instanceof Optional) {\r\n            optional = true;\r\n        }\r\n        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\r\n            visibility = paramMetadata;\r\n        }\r\n        else if (paramMetadata instanceof InjectionToken) {\r\n            token = paramMetadata;\r\n        }\r\n    }\r\n    token = resolveForwardRef(token);\r\n    if (token != null) {\r\n        return _createDependency(token, optional, visibility);\r\n    }\r\n    else {\r\n        throw noAnnotationError(typeOrFunc, params);\r\n    }\r\n}\r\n/**\r\n * @param {?} token\r\n * @param {?} optional\r\n * @param {?} visibility\r\n * @return {?}\r\n */\r\nfunction _createDependency(token, optional, visibility) {\r\n    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Threshold for the dynamic version\r\nvar UNDEFINED = new Object();\r\n/**\r\n * A ReflectiveDependency injection container used for instantiating objects and resolving\r\n * dependencies.\r\n *\r\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\r\n * constructor dependencies.\r\n *\r\n * In typical use, application code asks for the dependencies in the constructor and they are\r\n * resolved by the `Injector`.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))\r\n *\r\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\r\n *\r\n * ```typescript\r\n * \\@Injectable()\r\n * class Engine {\r\n * }\r\n *\r\n * \\@Injectable()\r\n * class Car {\r\n *   constructor(public engine:Engine) {}\r\n * }\r\n *\r\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\r\n * var car = injector.get(Car);\r\n * expect(car instanceof Car).toBe(true);\r\n * expect(car.engine instanceof Engine).toBe(true);\r\n * ```\r\n *\r\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\r\n * resolve all of the object's dependencies automatically.\r\n *\r\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\r\n * @abstract\r\n */\r\nvar ReflectiveInjector = /** @class */ (function () {\r\n    function ReflectiveInjector() {\r\n    }\r\n    /**\r\n     * Turns an array of provider definitions into an array of resolved providers.\r\n     *\r\n     * A resolution is a process of flattening multiple nested arrays and converting individual\r\n     * providers into an array of {@link ResolvedReflectiveProvider}s.\r\n     *\r\n     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\r\n     *\r\n     * ```typescript\r\n     * @Injectable()\r\n     * class Engine {\r\n     * }\r\n     *\r\n     * @Injectable()\r\n     * class Car {\r\n     *   constructor(public engine:Engine) {}\r\n     * }\r\n     *\r\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\r\n     *\r\n     * expect(providers.length).toEqual(2);\r\n     *\r\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\r\n     * expect(providers[0].key.displayName).toBe(\"Car\");\r\n     * expect(providers[0].dependencies.length).toEqual(1);\r\n     * expect(providers[0].factory).toBeDefined();\r\n     *\r\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\r\n     * });\r\n     * ```\r\n     *\r\n     * See {@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders} for more info.\r\n     */\r\n    /**\r\n     * Turns an array of provider definitions into an array of resolved providers.\r\n     *\r\n     * A resolution is a process of flattening multiple nested arrays and converting individual\r\n     * providers into an array of {\\@link ResolvedReflectiveProvider}s.\r\n     *\r\n     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\r\n     *\r\n     * ```typescript\r\n     * \\@Injectable()\r\n     * class Engine {\r\n     * }\r\n     *\r\n     * \\@Injectable()\r\n     * class Car {\r\n     *   constructor(public engine:Engine) {}\r\n     * }\r\n     *\r\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\r\n     *\r\n     * expect(providers.length).toEqual(2);\r\n     *\r\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\r\n     * expect(providers[0].key.displayName).toBe(\"Car\");\r\n     * expect(providers[0].dependencies.length).toEqual(1);\r\n     * expect(providers[0].factory).toBeDefined();\r\n     *\r\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\r\n     * });\r\n     * ```\r\n     *\r\n     * See {\\@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders} for more info.\r\n     * @param {?} providers\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector.resolve = /**\r\n     * Turns an array of provider definitions into an array of resolved providers.\r\n     *\r\n     * A resolution is a process of flattening multiple nested arrays and converting individual\r\n     * providers into an array of {\\@link ResolvedReflectiveProvider}s.\r\n     *\r\n     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\r\n     *\r\n     * ```typescript\r\n     * \\@Injectable()\r\n     * class Engine {\r\n     * }\r\n     *\r\n     * \\@Injectable()\r\n     * class Car {\r\n     *   constructor(public engine:Engine) {}\r\n     * }\r\n     *\r\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\r\n     *\r\n     * expect(providers.length).toEqual(2);\r\n     *\r\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\r\n     * expect(providers[0].key.displayName).toBe(\"Car\");\r\n     * expect(providers[0].dependencies.length).toEqual(1);\r\n     * expect(providers[0].factory).toBeDefined();\r\n     *\r\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\r\n     * });\r\n     * ```\r\n     *\r\n     * See {\\@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders} for more info.\r\n     * @param {?} providers\r\n     * @return {?}\r\n     */\r\n    function (providers) {\r\n        return resolveReflectiveProviders(providers);\r\n    };\r\n    /**\r\n     * Resolves an array of providers and creates an injector from those providers.\r\n     *\r\n     * The passed-in providers can be an array of `Type`, {@link Provider},\r\n     * or a recursive array of more providers.\r\n     *\r\n     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\r\n     *\r\n     * ```typescript\r\n     * @Injectable()\r\n     * class Engine {\r\n     * }\r\n     *\r\n     * @Injectable()\r\n     * class Car {\r\n     *   constructor(public engine:Engine) {}\r\n     * }\r\n     *\r\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\r\n     * expect(injector.get(Car) instanceof Car).toBe(true);\r\n     * ```\r\n     *\r\n     * This function is slower than the corresponding `fromResolvedProviders`\r\n     * because it needs to resolve the passed-in providers first.\r\n     * See {@link ReflectiveInjector#resolve resolve} and\r\n     * {@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders}.\r\n     */\r\n    /**\r\n     * Resolves an array of providers and creates an injector from those providers.\r\n     *\r\n     * The passed-in providers can be an array of `Type`, {\\@link Provider},\r\n     * or a recursive array of more providers.\r\n     *\r\n     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\r\n     *\r\n     * ```typescript\r\n     * \\@Injectable()\r\n     * class Engine {\r\n     * }\r\n     *\r\n     * \\@Injectable()\r\n     * class Car {\r\n     *   constructor(public engine:Engine) {}\r\n     * }\r\n     *\r\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\r\n     * expect(injector.get(Car) instanceof Car).toBe(true);\r\n     * ```\r\n     *\r\n     * This function is slower than the corresponding `fromResolvedProviders`\r\n     * because it needs to resolve the passed-in providers first.\r\n     * See {\\@link ReflectiveInjector#resolve resolve} and\r\n     * {\\@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders}.\r\n     * @param {?} providers\r\n     * @param {?=} parent\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector.resolveAndCreate = /**\r\n     * Resolves an array of providers and creates an injector from those providers.\r\n     *\r\n     * The passed-in providers can be an array of `Type`, {\\@link Provider},\r\n     * or a recursive array of more providers.\r\n     *\r\n     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\r\n     *\r\n     * ```typescript\r\n     * \\@Injectable()\r\n     * class Engine {\r\n     * }\r\n     *\r\n     * \\@Injectable()\r\n     * class Car {\r\n     *   constructor(public engine:Engine) {}\r\n     * }\r\n     *\r\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\r\n     * expect(injector.get(Car) instanceof Car).toBe(true);\r\n     * ```\r\n     *\r\n     * This function is slower than the corresponding `fromResolvedProviders`\r\n     * because it needs to resolve the passed-in providers first.\r\n     * See {\\@link ReflectiveInjector#resolve resolve} and\r\n     * {\\@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders}.\r\n     * @param {?} providers\r\n     * @param {?=} parent\r\n     * @return {?}\r\n     */\r\n    function (providers, parent) {\r\n        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\r\n        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\r\n    };\r\n    /**\r\n     * Creates an injector from previously resolved providers.\r\n     *\r\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\r\n     *\r\n     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\r\n     *\r\n     * ```typescript\r\n     * @Injectable()\r\n     * class Engine {\r\n     * }\r\n     *\r\n     * @Injectable()\r\n     * class Car {\r\n     *   constructor(public engine:Engine) {}\r\n     * }\r\n     *\r\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\r\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\r\n     * expect(injector.get(Car) instanceof Car).toBe(true);\r\n     * ```\r\n     * @experimental\r\n     */\r\n    /**\r\n     * Creates an injector from previously resolved providers.\r\n     *\r\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\r\n     *\r\n     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\r\n     *\r\n     * ```typescript\r\n     * \\@Injectable()\r\n     * class Engine {\r\n     * }\r\n     *\r\n     * \\@Injectable()\r\n     * class Car {\r\n     *   constructor(public engine:Engine) {}\r\n     * }\r\n     *\r\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\r\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\r\n     * expect(injector.get(Car) instanceof Car).toBe(true);\r\n     * ```\r\n     * \\@experimental\r\n     * @param {?} providers\r\n     * @param {?=} parent\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector.fromResolvedProviders = /**\r\n     * Creates an injector from previously resolved providers.\r\n     *\r\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\r\n     *\r\n     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\r\n     *\r\n     * ```typescript\r\n     * \\@Injectable()\r\n     * class Engine {\r\n     * }\r\n     *\r\n     * \\@Injectable()\r\n     * class Car {\r\n     *   constructor(public engine:Engine) {}\r\n     * }\r\n     *\r\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\r\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\r\n     * expect(injector.get(Car) instanceof Car).toBe(true);\r\n     * ```\r\n     * \\@experimental\r\n     * @param {?} providers\r\n     * @param {?=} parent\r\n     * @return {?}\r\n     */\r\n    function (providers, parent) {\r\n        return new ReflectiveInjector_(providers, parent);\r\n    };\r\n    return ReflectiveInjector;\r\n}());\r\nvar ReflectiveInjector_ = /** @class */ (function () {\r\n    /**\r\n     * Private\r\n     */\r\n    function ReflectiveInjector_(_providers, _parent) {\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._constructionCounter = 0;\r\n        this._providers = _providers;\r\n        this.parent = _parent || null;\r\n        var /** @type {?} */ len = _providers.length;\r\n        this.keyIds = new Array(len);\r\n        this.objs = new Array(len);\r\n        for (var /** @type {?} */ i = 0; i < len; i++) {\r\n            this.keyIds[i] = _providers[i].key.id;\r\n            this.objs[i] = UNDEFINED;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector_.prototype.get = /**\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @return {?}\r\n     */\r\n    function (token, notFoundValue) {\r\n        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\r\n        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\r\n    };\r\n    /**\r\n     * @param {?} providers\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector_.prototype.resolveAndCreateChild = /**\r\n     * @param {?} providers\r\n     * @return {?}\r\n     */\r\n    function (providers) {\r\n        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\r\n        return this.createChildFromResolved(ResolvedReflectiveProviders);\r\n    };\r\n    /**\r\n     * @param {?} providers\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector_.prototype.createChildFromResolved = /**\r\n     * @param {?} providers\r\n     * @return {?}\r\n     */\r\n    function (providers) {\r\n        var /** @type {?} */ inj = new ReflectiveInjector_(providers);\r\n        (/** @type {?} */ (inj)).parent = this;\r\n        return inj;\r\n    };\r\n    /**\r\n     * @param {?} provider\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector_.prototype.resolveAndInstantiate = /**\r\n     * @param {?} provider\r\n     * @return {?}\r\n     */\r\n    function (provider) {\r\n        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\r\n    };\r\n    /**\r\n     * @param {?} provider\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector_.prototype.instantiateResolved = /**\r\n     * @param {?} provider\r\n     * @return {?}\r\n     */\r\n    function (provider) {\r\n        return this._instantiateProvider(provider);\r\n    };\r\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector_.prototype.getProviderAtIndex = /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    function (index) {\r\n        if (index < 0 || index >= this._providers.length) {\r\n            throw outOfBoundsError(index);\r\n        }\r\n        return this._providers[index];\r\n    };\r\n    /** @internal */\r\n    /**\r\n     * \\@internal\r\n     * @param {?} provider\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector_.prototype._new = /**\r\n     * \\@internal\r\n     * @param {?} provider\r\n     * @return {?}\r\n     */\r\n    function (provider) {\r\n        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\r\n            throw cyclicDependencyError(this, provider.key);\r\n        }\r\n        return this._instantiateProvider(provider);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector_.prototype._getMaxNumberOfObjects = /**\r\n     * @return {?}\r\n     */\r\n    function () { return this.objs.length; };\r\n    /**\r\n     * @param {?} provider\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector_.prototype._instantiateProvider = /**\r\n     * @param {?} provider\r\n     * @return {?}\r\n     */\r\n    function (provider) {\r\n        if (provider.multiProvider) {\r\n            var /** @type {?} */ res = new Array(provider.resolvedFactories.length);\r\n            for (var /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {\r\n                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\r\n            }\r\n            return res;\r\n        }\r\n        else {\r\n            return this._instantiate(provider, provider.resolvedFactories[0]);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} provider\r\n     * @param {?} ResolvedReflectiveFactory\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector_.prototype._instantiate = /**\r\n     * @param {?} provider\r\n     * @param {?} ResolvedReflectiveFactory\r\n     * @return {?}\r\n     */\r\n    function (provider, ResolvedReflectiveFactory$$1) {\r\n        var _this = this;\r\n        var /** @type {?} */ factory = ResolvedReflectiveFactory$$1.factory;\r\n        var /** @type {?} */ deps;\r\n        try {\r\n            deps =\r\n                ResolvedReflectiveFactory$$1.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            if (e.addKey) {\r\n                e.addKey(this, provider.key);\r\n            }\r\n            throw e;\r\n        }\r\n        var /** @type {?} */ obj;\r\n        try {\r\n            obj = factory.apply(void 0, deps);\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            throw instantiationError(this, e, e.stack, provider.key);\r\n        }\r\n        return obj;\r\n    };\r\n    /**\r\n     * @param {?} dep\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector_.prototype._getByReflectiveDependency = /**\r\n     * @param {?} dep\r\n     * @return {?}\r\n     */\r\n    function (dep) {\r\n        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\r\n    };\r\n    /**\r\n     * @param {?} key\r\n     * @param {?} visibility\r\n     * @param {?} notFoundValue\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector_.prototype._getByKey = /**\r\n     * @param {?} key\r\n     * @param {?} visibility\r\n     * @param {?} notFoundValue\r\n     * @return {?}\r\n     */\r\n    function (key, visibility, notFoundValue) {\r\n        if (key === ReflectiveInjector_.INJECTOR_KEY) {\r\n            return this;\r\n        }\r\n        if (visibility instanceof Self) {\r\n            return this._getByKeySelf(key, notFoundValue);\r\n        }\r\n        else {\r\n            return this._getByKeyDefault(key, notFoundValue, visibility);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} keyId\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector_.prototype._getObjByKeyId = /**\r\n     * @param {?} keyId\r\n     * @return {?}\r\n     */\r\n    function (keyId) {\r\n        for (var /** @type {?} */ i = 0; i < this.keyIds.length; i++) {\r\n            if (this.keyIds[i] === keyId) {\r\n                if (this.objs[i] === UNDEFINED) {\r\n                    this.objs[i] = this._new(this._providers[i]);\r\n                }\r\n                return this.objs[i];\r\n            }\r\n        }\r\n        return UNDEFINED;\r\n    };\r\n    /** @internal */\r\n    /**\r\n     * \\@internal\r\n     * @param {?} key\r\n     * @param {?} notFoundValue\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector_.prototype._throwOrNull = /**\r\n     * \\@internal\r\n     * @param {?} key\r\n     * @param {?} notFoundValue\r\n     * @return {?}\r\n     */\r\n    function (key, notFoundValue) {\r\n        if (notFoundValue !== THROW_IF_NOT_FOUND) {\r\n            return notFoundValue;\r\n        }\r\n        else {\r\n            throw noProviderError(this, key);\r\n        }\r\n    };\r\n    /** @internal */\r\n    /**\r\n     * \\@internal\r\n     * @param {?} key\r\n     * @param {?} notFoundValue\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector_.prototype._getByKeySelf = /**\r\n     * \\@internal\r\n     * @param {?} key\r\n     * @param {?} notFoundValue\r\n     * @return {?}\r\n     */\r\n    function (key, notFoundValue) {\r\n        var /** @type {?} */ obj = this._getObjByKeyId(key.id);\r\n        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\r\n    };\r\n    /** @internal */\r\n    /**\r\n     * \\@internal\r\n     * @param {?} key\r\n     * @param {?} notFoundValue\r\n     * @param {?} visibility\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector_.prototype._getByKeyDefault = /**\r\n     * \\@internal\r\n     * @param {?} key\r\n     * @param {?} notFoundValue\r\n     * @param {?} visibility\r\n     * @return {?}\r\n     */\r\n    function (key, notFoundValue, visibility) {\r\n        var /** @type {?} */ inj;\r\n        if (visibility instanceof SkipSelf) {\r\n            inj = this.parent;\r\n        }\r\n        else {\r\n            inj = this;\r\n        }\r\n        while (inj instanceof ReflectiveInjector_) {\r\n            var /** @type {?} */ inj_ = /** @type {?} */ (inj);\r\n            var /** @type {?} */ obj = inj_._getObjByKeyId(key.id);\r\n            if (obj !== UNDEFINED)\r\n                return obj;\r\n            inj = inj_.parent;\r\n        }\r\n        if (inj !== null) {\r\n            return inj.get(key.token, notFoundValue);\r\n        }\r\n        else {\r\n            return this._throwOrNull(key, notFoundValue);\r\n        }\r\n    };\r\n    Object.defineProperty(ReflectiveInjector_.prototype, \"displayName\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var /** @type {?} */ providers = _mapProviders(this, function (b) { return ' \"' + b.key.displayName + '\" '; })\r\n                .join(', ');\r\n            return \"ReflectiveInjector(providers: [\" + providers + \"])\";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ReflectiveInjector_.prototype.toString = /**\r\n     * @return {?}\r\n     */\r\n    function () { return this.displayName; };\r\n    ReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);\r\n    return ReflectiveInjector_;\r\n}());\r\n/**\r\n * @param {?} injector\r\n * @param {?} fn\r\n * @return {?}\r\n */\r\nfunction _mapProviders(injector, fn) {\r\n    var /** @type {?} */ res = new Array(injector._providers.length);\r\n    for (var /** @type {?} */ i = 0; i < injector._providers.length; ++i) {\r\n        res[i] = fn(injector.getProviderAtIndex(i));\r\n    }\r\n    return res;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An internal token whose presence in an injector indicates that the injector should treat itself\r\n * as a root scoped injector when processing requests for unknown tokens which may indicate\r\n * they are provided in the root scope.\r\n */\r\nvar APP_ROOT = new InjectionToken('The presence of this token marks an injector as being the root injector.');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Marker which indicates that a value has not yet been created from the factory function.\r\n */\r\nvar NOT_YET = {};\r\n/**\r\n * Marker which indicates that the factory function for a token is in the process of being called.\r\n *\r\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\r\n * injection of a dependency has recursively attempted to inject the original token, and there is\r\n * a circular dependency among the providers.\r\n */\r\nvar CIRCULAR$1 = {};\r\nvar EMPTY_ARRAY$1 = /** @type {?} */ ([]);\r\n/**\r\n * A lazily initialized NullInjector.\r\n */\r\nvar NULL_INJECTOR$1 = undefined;\r\n/**\r\n * @return {?}\r\n */\r\nfunction getNullInjector() {\r\n    if (NULL_INJECTOR$1 === undefined) {\r\n        NULL_INJECTOR$1 = new NullInjector();\r\n    }\r\n    return NULL_INJECTOR$1;\r\n}\r\n/**\r\n * Create a new `Injector` which is configured using `InjectorDefType`s.\r\n *\r\n * \\@experimental\r\n * @param {?} defType\r\n * @param {?=} parent\r\n * @return {?}\r\n */\r\nfunction createInjector(defType, parent) {\r\n    if (parent === void 0) { parent = null; }\r\n    parent = parent || getNullInjector();\r\n    return new R3Injector(defType, parent);\r\n}\r\nvar R3Injector = /** @class */ (function () {\r\n    function R3Injector(def, parent) {\r\n        var _this = this;\r\n        this.parent = parent;\r\n        /**\r\n         * Map of tokens to records which contain the instances of those tokens.\r\n         */\r\n        this.records = new Map();\r\n        /**\r\n         * The transitive set of `InjectorDefType`s which define this injector.\r\n         */\r\n        this.injectorDefTypes = new Set();\r\n        /**\r\n         * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\r\n         */\r\n        this.onDestroy = new Set();\r\n        /**\r\n         * Flag indicating that this injector was previously destroyed.\r\n         */\r\n        this.destroyed = false;\r\n        // Start off by creating Records for every provider declared in every InjectorDefType\r\n        // included transitively in `def`.\r\n        deepForEach([def], function (injectorDef) { return _this.processInjectorType(injectorDef, new Set()); });\r\n        // Make sure the INJECTOR token provides this injector.\r\n        this.records.set(INJECTOR, makeRecord(undefined, this));\r\n        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\r\n        // any injectable scoped to APP_ROOT_SCOPE.\r\n        this.isRootInjector = this.records.has(APP_ROOT);\r\n        // Eagerly instantiate the InjectorDefType classes themselves.\r\n        this.injectorDefTypes.forEach(function (defType) { return _this.get(defType); });\r\n    }\r\n    /**\r\n     * Destroy the injector and release references to every instance or provider associated with it.\r\n     *\r\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\r\n     * hook was found.\r\n     */\r\n    /**\r\n     * Destroy the injector and release references to every instance or provider associated with it.\r\n     *\r\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\r\n     * hook was found.\r\n     * @return {?}\r\n     */\r\n    R3Injector.prototype.destroy = /**\r\n     * Destroy the injector and release references to every instance or provider associated with it.\r\n     *\r\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\r\n     * hook was found.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.assertNotDestroyed();\r\n        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\r\n        this.destroyed = true;\r\n        try {\r\n            // Call all the lifecycle hooks.\r\n            this.onDestroy.forEach(function (service) { return service.ngOnDestroy(); });\r\n        }\r\n        finally {\r\n            // Release all references.\r\n            this.records.clear();\r\n            this.onDestroy.clear();\r\n            this.injectorDefTypes.clear();\r\n        }\r\n    };\r\n    /**\r\n     * @template T\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @param {?=} flags\r\n     * @return {?}\r\n     */\r\n    R3Injector.prototype.get = /**\r\n     * @template T\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @param {?=} flags\r\n     * @return {?}\r\n     */\r\n    function (token, notFoundValue, flags) {\r\n        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\r\n        if (flags === void 0) { flags = 0 /* Default */; }\r\n        this.assertNotDestroyed();\r\n        // Set the injection context.\r\n        var /** @type {?} */ previousInjector = setCurrentInjector(this);\r\n        try {\r\n            // Check for the SkipSelf flag.\r\n            if (!(flags & 1 /* SkipSelf */)) {\r\n                // SkipSelf isn't set, check if the record belongs to this injector.\r\n                var /** @type {?} */ record = this.records.get(token);\r\n                if (record === undefined) {\r\n                    // No record, but maybe the token is scoped to this injector. Look for an ngInjectableDef\r\n                    // with a scope matching this injector.\r\n                    var /** @type {?} */ def = couldBeInjectableType(token) &&\r\n                        (/** @type {?} */ (token)).ngInjectableDef ||\r\n                        undefined;\r\n                    if (def !== undefined && this.injectableDefInScope(def)) {\r\n                        // Found an ngInjectableDef and it's scoped to this injector. Pretend as if it was here\r\n                        // all along.\r\n                        record = injectableDefRecord(token);\r\n                        this.records.set(token, record);\r\n                    }\r\n                }\r\n                // If a record was found, get the instance for it and return it.\r\n                if (record !== undefined) {\r\n                    return this.hydrate(token, record);\r\n                }\r\n            }\r\n            // Select the next injector based on the Self flag - if self is set, the next injector is\r\n            // the NullInjector, otherwise it's the parent.\r\n            var /** @type {?} */ next = !(flags & 2 /* Self */) ? this.parent : getNullInjector();\r\n            return this.parent.get(token, notFoundValue);\r\n        }\r\n        finally {\r\n            // Lastly, clean up the state by restoring the previous injector.\r\n            setCurrentInjector(previousInjector);\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    R3Injector.prototype.assertNotDestroyed = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.destroyed) {\r\n            throw new Error('Injector has already been destroyed.');\r\n        }\r\n    };\r\n    /**\r\n     * Add an `InjectorDefType` or `InjectorDefTypeWithProviders` and all of its transitive providers\r\n     * to this injector.\r\n     * @param {?} defOrWrappedDef\r\n     * @param {?} parents\r\n     * @return {?}\r\n     */\r\n    R3Injector.prototype.processInjectorType = /**\r\n     * Add an `InjectorDefType` or `InjectorDefTypeWithProviders` and all of its transitive providers\r\n     * to this injector.\r\n     * @param {?} defOrWrappedDef\r\n     * @param {?} parents\r\n     * @return {?}\r\n     */\r\n    function (defOrWrappedDef, parents) {\r\n        var _this = this;\r\n        defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\r\n        // Either the defOrWrappedDef is an InjectorDefType (with ngInjectorDef) or an\r\n        // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic\r\n        // read, so care is taken to only do the read once.\r\n        // First attempt to read the ngInjectorDef.\r\n        var /** @type {?} */ def = /** @type {?} */ ((/** @type {?} */ (defOrWrappedDef)).ngInjectorDef);\r\n        // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.\r\n        var /** @type {?} */ ngModule = (def == null) && (/** @type {?} */ (defOrWrappedDef)).ngModule || undefined;\r\n        // Determine the InjectorDefType. In the case where `defOrWrappedDef` is an `InjectorDefType`,\r\n        // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type\r\n        // is the `ngModule`.\r\n        var /** @type {?} */ defType = (ngModule === undefined) ? (/** @type {?} */ (defOrWrappedDef)) : ngModule;\r\n        // If defOrWrappedType was an InjectorDefTypeWithProviders, then .providers may hold some\r\n        // extra providers.\r\n        var /** @type {?} */ providers = (ngModule !== undefined) && (/** @type {?} */ (defOrWrappedDef)).providers ||\r\n            EMPTY_ARRAY$1;\r\n        // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\r\n        // `InjectorDef` is on its `ngModule`.\r\n        if (ngModule !== undefined) {\r\n            def = ngModule.ngInjectorDef;\r\n        }\r\n        // If no definition was found, throw.\r\n        if (def == null) {\r\n            throw new Error(\"Type \" + stringify(defType) + \" is missing an ngInjectorDef definition.\");\r\n        }\r\n        // Check for circular dependencies.\r\n        if (parents.has(defType)) {\r\n            throw new Error(\"Circular dependency: type \" + stringify(defType) + \" ends up importing itself.\");\r\n        }\r\n        // Track the InjectorDefType and add a provider for it.\r\n        this.injectorDefTypes.add(defType);\r\n        this.records.set(defType, makeRecord(def.factory));\r\n        // Add providers in the same way that @NgModule resolution did:\r\n        // First, include providers from any imports.\r\n        if (def.imports != null) {\r\n            // Before processing defType's imports, add it to the set of parents. This way, if it ends\r\n            // up deeply importing itself, this can be detected.\r\n            parents.add(defType);\r\n            try {\r\n                deepForEach(def.imports, function (imported) { return _this.processInjectorType(imported, parents); });\r\n            }\r\n            finally {\r\n                // Remove it from the parents set when finished.\r\n                parents.delete(defType);\r\n            }\r\n        }\r\n        // Next, include providers listed on the definition itself.\r\n        if (def.providers != null) {\r\n            deepForEach(def.providers, function (provider) { return _this.processProvider(provider); });\r\n        }\r\n        // Finally, include providers from an InjectorDefTypeWithProviders if there was one.\r\n        deepForEach(providers, function (provider) { return _this.processProvider(provider); });\r\n    };\r\n    /**\r\n     * Process a `SingleProvider` and add it.\r\n     * @param {?} provider\r\n     * @return {?}\r\n     */\r\n    R3Injector.prototype.processProvider = /**\r\n     * Process a `SingleProvider` and add it.\r\n     * @param {?} provider\r\n     * @return {?}\r\n     */\r\n    function (provider) {\r\n        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\r\n        // property.\r\n        provider = resolveForwardRef(provider);\r\n        var /** @type {?} */ token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\r\n        // Construct a `Record` for the provider.\r\n        var /** @type {?} */ record = providerToRecord(provider);\r\n        if (!isTypeProvider(provider) && provider.multi === true) {\r\n            // If the provider indicates that it's a multi-provider, process it specially.\r\n            // First check whether it's been defined already.\r\n            var /** @type {?} */ multiRecord_1 = this.records.get(token);\r\n            if (multiRecord_1) {\r\n                // It has. Throw a nice error if\r\n                if (multiRecord_1.multi === undefined) {\r\n                    throw new Error(\"Mixed multi-provider for \" + token + \".\");\r\n                }\r\n            }\r\n            else {\r\n                token = provider;\r\n                multiRecord_1 = makeRecord(undefined, NOT_YET, true);\r\n                multiRecord_1.factory = function () { return injectArgs(/** @type {?} */ ((/** @type {?} */ ((multiRecord_1)).multi))); };\r\n                this.records.set(token, multiRecord_1);\r\n            }\r\n            token = provider; /** @type {?} */\r\n            ((multiRecord_1.multi)).push(provider);\r\n        }\r\n        var /** @type {?} */ existing = this.records.get(token);\r\n        if (existing && existing.multi !== undefined) {\r\n            throw new Error(\"Mixed multi-provider for \" + token);\r\n        }\r\n        this.records.set(token, record);\r\n    };\r\n    /**\r\n     * @template T\r\n     * @param {?} token\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    R3Injector.prototype.hydrate = /**\r\n     * @template T\r\n     * @param {?} token\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    function (token, record) {\r\n        if (record.value === CIRCULAR$1) {\r\n            throw new Error(\"Circular dep for \" + stringify(token));\r\n        }\r\n        else if (record.value === NOT_YET) {\r\n            record.value = CIRCULAR$1;\r\n            record.value = /** @type {?} */ ((record.factory))();\r\n        }\r\n        if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\r\n            this.onDestroy.add(record.value);\r\n        }\r\n        return /** @type {?} */ (record.value);\r\n    };\r\n    /**\r\n     * @param {?} def\r\n     * @return {?}\r\n     */\r\n    R3Injector.prototype.injectableDefInScope = /**\r\n     * @param {?} def\r\n     * @return {?}\r\n     */\r\n    function (def) {\r\n        if (!def.providedIn) {\r\n            return false;\r\n        }\r\n        else if (typeof def.providedIn === 'string') {\r\n            return def.providedIn === 'any' || (def.providedIn === 'root' && this.isRootInjector);\r\n        }\r\n        else {\r\n            return this.injectorDefTypes.has(def.providedIn);\r\n        }\r\n    };\r\n    return R3Injector;\r\n}());\r\n/**\r\n * @param {?} token\r\n * @return {?}\r\n */\r\nfunction injectableDefRecord(token) {\r\n    var /** @type {?} */ def = (/** @type {?} */ (token)).ngInjectableDef;\r\n    if (def === undefined) {\r\n        throw new Error(\"Type \" + stringify(token) + \" is missing an ngInjectableDef definition.\");\r\n    }\r\n    return makeRecord(def.factory);\r\n}\r\n/**\r\n * @param {?} provider\r\n * @return {?}\r\n */\r\nfunction providerToRecord(provider) {\r\n    var /** @type {?} */ token = resolveForwardRef(provider);\r\n    var /** @type {?} */ value = NOT_YET;\r\n    var /** @type {?} */ factory = undefined;\r\n    if (isTypeProvider(provider)) {\r\n        return injectableDefRecord(provider);\r\n    }\r\n    else {\r\n        token = resolveForwardRef(provider.provide);\r\n        if (isValueProvider(provider)) {\r\n            value = provider.useValue;\r\n        }\r\n        else if (isExistingProvider(provider)) {\r\n            factory = function () { return inject(provider.useExisting); };\r\n        }\r\n        else if (isFactoryProvider(provider)) {\r\n            factory = function () { return provider.useFactory.apply(provider, injectArgs(provider.deps || [])); };\r\n        }\r\n        else {\r\n            var /** @type {?} */ classRef_1 = (/** @type {?} */ (provider)).useClass || token;\r\n            if (hasDeps(provider)) {\r\n                factory = function () { return new ((classRef_1).bind.apply((classRef_1), [void 0].concat(injectArgs(provider.deps))))(); };\r\n            }\r\n            else {\r\n                return injectableDefRecord(classRef_1);\r\n            }\r\n        }\r\n    }\r\n    return makeRecord(factory, value);\r\n}\r\n/**\r\n * @template T\r\n * @param {?} factory\r\n * @param {?=} value\r\n * @param {?=} multi\r\n * @return {?}\r\n */\r\nfunction makeRecord(factory, value, multi) {\r\n    if (value === void 0) { value = NOT_YET; }\r\n    if (multi === void 0) { multi = false; }\r\n    return {\r\n        factory: factory,\r\n        value: value,\r\n        multi: multi ? [] : undefined,\r\n    };\r\n}\r\n/**\r\n * @template T\r\n * @param {?} input\r\n * @param {?} fn\r\n * @return {?}\r\n */\r\nfunction deepForEach(input, fn) {\r\n    input.forEach(function (value) { return Array.isArray(value) ? deepForEach(value, fn) : fn(value); });\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isValueProvider(value) {\r\n    return USE_VALUE$1 in value;\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isExistingProvider(value) {\r\n    return !!(/** @type {?} */ (value)).useExisting;\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isFactoryProvider(value) {\r\n    return !!(/** @type {?} */ (value)).useFactory;\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isTypeProvider(value) {\r\n    return typeof value === 'function';\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction hasDeps(value) {\r\n    return !!(/** @type {?} */ (value)).deps;\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction hasOnDestroy(value) {\r\n    return typeof value === 'object' && value != null && (/** @type {?} */ (value)).ngOnDestroy &&\r\n        typeof (/** @type {?} */ (value)).ngOnDestroy === 'function';\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction couldBeInjectableType(value) {\r\n    return (typeof value === 'function') ||\r\n        (typeof value === 'object' && value instanceof InjectionToken);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * The `di` module provides dependency injection container services.\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Determine if the argument is shaped like a Promise\r\n * @param {?} obj\r\n * @return {?}\r\n */\r\nfunction isPromise(obj) {\r\n    // allow any Promise/A+ compliant thenable.\r\n    // It's up to the caller to ensure that obj.then conforms to the spec\r\n    return !!obj && typeof obj.then === 'function';\r\n}\r\n/**\r\n * Determine if the argument is an Observable\r\n * @param {?} obj\r\n * @return {?}\r\n */\r\nfunction isObservable(obj) {\r\n    // TODO use Symbol.observable when https://github.com/ReactiveX/rxjs/issues/2415 will be resolved\r\n    return !!obj && typeof obj.subscribe === 'function';\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A function that will be executed when an application is initialized.\r\n * \\@experimental\r\n */\r\nvar APP_INITIALIZER = new InjectionToken('Application Initializer');\r\n/**\r\n * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\r\n *\r\n * \\@experimental\r\n */\r\nvar ApplicationInitStatus = /** @class */ (function () {\r\n    function ApplicationInitStatus(appInits) {\r\n        var _this = this;\r\n        this.appInits = appInits;\r\n        this.initialized = false;\r\n        this.done = false;\r\n        this.donePromise = new Promise(function (res, rej) {\r\n            _this.resolve = res;\r\n            _this.reject = rej;\r\n        });\r\n    }\r\n    /** @internal */\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    ApplicationInitStatus.prototype.runInitializers = /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (this.initialized) {\r\n            return;\r\n        }\r\n        var /** @type {?} */ asyncInitPromises = [];\r\n        var /** @type {?} */ complete = function () {\r\n            (/** @type {?} */ (_this)).done = true;\r\n            _this.resolve();\r\n        };\r\n        if (this.appInits) {\r\n            for (var /** @type {?} */ i = 0; i < this.appInits.length; i++) {\r\n                var /** @type {?} */ initResult = this.appInits[i]();\r\n                if (isPromise(initResult)) {\r\n                    asyncInitPromises.push(initResult);\r\n                }\r\n            }\r\n        }\r\n        Promise.all(asyncInitPromises).then(function () { complete(); }).catch(function (e) { _this.reject(e); });\r\n        if (asyncInitPromises.length === 0) {\r\n            complete();\r\n        }\r\n        this.initialized = true;\r\n    };\r\n    ApplicationInitStatus.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    ApplicationInitStatus.ctorParameters = function () { return [\r\n        { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },\r\n    ]; };\r\n    return ApplicationInitStatus;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A DI Token representing a unique string id assigned to the application by Angular and used\r\n * primarily for prefixing application attributes and CSS styles when\r\n * {\\@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\r\n *\r\n * If you need to avoid randomly generated value to be used as an application id, you can provide\r\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\\@link Injector}\r\n * using this token.\r\n * \\@experimental\r\n */\r\nvar APP_ID = new InjectionToken('AppId');\r\n/**\r\n * @return {?}\r\n */\r\nfunction _appIdRandomProviderFactory() {\r\n    return \"\" + _randomChar() + _randomChar() + _randomChar();\r\n}\r\n/**\r\n * Providers that will generate a random APP_ID_TOKEN.\r\n * \\@experimental\r\n */\r\nvar APP_ID_RANDOM_PROVIDER = {\r\n    provide: APP_ID,\r\n    useFactory: _appIdRandomProviderFactory,\r\n    deps: /** @type {?} */ ([]),\r\n};\r\n/**\r\n * @return {?}\r\n */\r\nfunction _randomChar() {\r\n    return String.fromCharCode(97 + Math.floor(Math.random() * 25));\r\n}\r\n/**\r\n * A function that will be executed when a platform is initialized.\r\n * \\@experimental\r\n */\r\nvar PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\r\n/**\r\n * A token that indicates an opaque platform id.\r\n * \\@experimental\r\n */\r\nvar PLATFORM_ID = new InjectionToken('Platform ID');\r\n/**\r\n * All callbacks provided via this token will be called for every component that is bootstrapped.\r\n * Signature of the callback:\r\n *\r\n * `(componentRef: ComponentRef) => void`.\r\n *\r\n * \\@experimental\r\n */\r\nvar APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\r\n/**\r\n * A token which indicates the root directory of the application\r\n * \\@experimental\r\n */\r\nvar PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar Console = /** @class */ (function () {\r\n    function Console() {\r\n    }\r\n    /**\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    Console.prototype.log = /**\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    function (message) {\r\n        // tslint:disable-next-line:no-console\r\n        console.log(message);\r\n    };\r\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\r\n    /**\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    Console.prototype.warn = /**\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    function (message) {\r\n        // tslint:disable-next-line:no-console\r\n        console.warn(message);\r\n    };\r\n    Console.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    Console.ctorParameters = function () { return []; };\r\n    return Console;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Combination of NgModuleFactory and ComponentFactorys.\r\n *\r\n * \\@experimental\r\n * @template T\r\n */\r\nvar ModuleWithComponentFactories = /** @class */ (function () {\r\n    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\r\n        this.ngModuleFactory = ngModuleFactory;\r\n        this.componentFactories = componentFactories;\r\n    }\r\n    return ModuleWithComponentFactories;\r\n}());\r\n/**\r\n * @return {?}\r\n */\r\nfunction _throwError() {\r\n    throw new Error(\"Runtime compiler is not loaded\");\r\n}\r\n/**\r\n * Low-level service for running the angular compiler during runtime\r\n * to create {\\@link ComponentFactory}s, which\r\n * can later be used to create and render a Component instance.\r\n *\r\n * Each `\\@NgModule` provides an own `Compiler` to its injector,\r\n * that will use the directives/pipes of the ng module for compilation\r\n * of components.\r\n * \\@stable\r\n */\r\nvar Compiler = /** @class */ (function () {\r\n    function Compiler() {\r\n    }\r\n    /**\r\n     * Compiles the given NgModule and all of its components. All templates of the components listed\r\n     * in `entryComponents` have to be inlined.\r\n     */\r\n    /**\r\n     * Compiles the given NgModule and all of its components. All templates of the components listed\r\n     * in `entryComponents` have to be inlined.\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    Compiler.prototype.compileModuleSync = /**\r\n     * Compiles the given NgModule and all of its components. All templates of the components listed\r\n     * in `entryComponents` have to be inlined.\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    function (moduleType) { throw _throwError(); };\r\n    /**\r\n     * Compiles the given NgModule and all of its components\r\n     */\r\n    /**\r\n     * Compiles the given NgModule and all of its components\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    Compiler.prototype.compileModuleAsync = /**\r\n     * Compiles the given NgModule and all of its components\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    function (moduleType) { throw _throwError(); };\r\n    /**\r\n     * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\r\n     */\r\n    /**\r\n     * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    Compiler.prototype.compileModuleAndAllComponentsSync = /**\r\n     * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    function (moduleType) {\r\n        throw _throwError();\r\n    };\r\n    /**\r\n     * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\r\n     */\r\n    /**\r\n     * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    Compiler.prototype.compileModuleAndAllComponentsAsync = /**\r\n     * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    function (moduleType) {\r\n        throw _throwError();\r\n    };\r\n    /**\r\n     * Clears all caches.\r\n     */\r\n    /**\r\n     * Clears all caches.\r\n     * @return {?}\r\n     */\r\n    Compiler.prototype.clearCache = /**\r\n     * Clears all caches.\r\n     * @return {?}\r\n     */\r\n    function () { };\r\n    /**\r\n     * Clears the cache for the given component/ngModule.\r\n     */\r\n    /**\r\n     * Clears the cache for the given component/ngModule.\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    Compiler.prototype.clearCacheFor = /**\r\n     * Clears the cache for the given component/ngModule.\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    function (type) { };\r\n    Compiler.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    Compiler.ctorParameters = function () { return []; };\r\n    return Compiler;\r\n}());\r\n/**\r\n * Token to provide CompilerOptions in the platform injector.\r\n *\r\n * \\@experimental\r\n */\r\nvar COMPILER_OPTIONS = new InjectionToken('compilerOptions');\r\n/**\r\n * A factory for creating a Compiler\r\n *\r\n * \\@experimental\r\n * @abstract\r\n */\r\nvar CompilerFactory = /** @class */ (function () {\r\n    function CompilerFactory() {\r\n    }\r\n    return CompilerFactory;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\r\n *\r\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\r\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\r\n * method.\r\n * \\@stable\r\n * @abstract\r\n * @template C\r\n */\r\nvar ComponentRef = /** @class */ (function () {\r\n    function ComponentRef() {\r\n    }\r\n    return ComponentRef;\r\n}());\r\n/**\r\n * \\@stable\r\n * @abstract\r\n * @template C\r\n */\r\nvar ComponentFactory = /** @class */ (function () {\r\n    function ComponentFactory() {\r\n    }\r\n    return ComponentFactory;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} component\r\n * @return {?}\r\n */\r\nfunction noComponentFactoryError(component) {\r\n    var /** @type {?} */ error = Error(\"No component factory found for \" + stringify(component) + \". Did you add it to @NgModule.entryComponents?\");\r\n    (/** @type {?} */ (error))[ERROR_COMPONENT] = component;\r\n    return error;\r\n}\r\nvar ERROR_COMPONENT = 'ngComponent';\r\n/**\r\n * @param {?} error\r\n * @return {?}\r\n */\r\n\r\nvar _NullComponentFactoryResolver = /** @class */ (function () {\r\n    function _NullComponentFactoryResolver() {\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} component\r\n     * @return {?}\r\n     */\r\n    _NullComponentFactoryResolver.prototype.resolveComponentFactory = /**\r\n     * @template T\r\n     * @param {?} component\r\n     * @return {?}\r\n     */\r\n    function (component) {\r\n        throw noComponentFactoryError(component);\r\n    };\r\n    return _NullComponentFactoryResolver;\r\n}());\r\n/**\r\n * \\@stable\r\n * @abstract\r\n */\r\nvar ComponentFactoryResolver = /** @class */ (function () {\r\n    function ComponentFactoryResolver() {\r\n    }\r\n    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\r\n    return ComponentFactoryResolver;\r\n}());\r\nvar CodegenComponentFactoryResolver = /** @class */ (function () {\r\n    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {\r\n        this._parent = _parent;\r\n        this._ngModule = _ngModule;\r\n        this._factories = new Map();\r\n        for (var /** @type {?} */ i = 0; i < factories.length; i++) {\r\n            var /** @type {?} */ factory = factories[i];\r\n            this._factories.set(factory.componentType, factory);\r\n        }\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} component\r\n     * @return {?}\r\n     */\r\n    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = /**\r\n     * @template T\r\n     * @param {?} component\r\n     * @return {?}\r\n     */\r\n    function (component) {\r\n        var /** @type {?} */ factory = this._factories.get(component);\r\n        if (!factory && this._parent) {\r\n            factory = this._parent.resolveComponentFactory(component);\r\n        }\r\n        if (!factory) {\r\n            throw noComponentFactoryError(component);\r\n        }\r\n        return new ComponentFactoryBoundToModule(factory, this._ngModule);\r\n    };\r\n    return CodegenComponentFactoryResolver;\r\n}());\r\n/**\r\n * @template C\r\n */\r\nvar ComponentFactoryBoundToModule = /** @class */ (function (_super) {\r\n    __extends(ComponentFactoryBoundToModule, _super);\r\n    function ComponentFactoryBoundToModule(factory, ngModule) {\r\n        var _this = _super.call(this) || this;\r\n        _this.factory = factory;\r\n        _this.ngModule = ngModule;\r\n        _this.selector = factory.selector;\r\n        _this.componentType = factory.componentType;\r\n        _this.ngContentSelectors = factory.ngContentSelectors;\r\n        _this.inputs = factory.inputs;\r\n        _this.outputs = factory.outputs;\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {?} injector\r\n     * @param {?=} projectableNodes\r\n     * @param {?=} rootSelectorOrNode\r\n     * @param {?=} ngModule\r\n     * @return {?}\r\n     */\r\n    ComponentFactoryBoundToModule.prototype.create = /**\r\n     * @param {?} injector\r\n     * @param {?=} projectableNodes\r\n     * @param {?=} rootSelectorOrNode\r\n     * @param {?=} ngModule\r\n     * @return {?}\r\n     */\r\n    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\r\n        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\r\n    };\r\n    return ComponentFactoryBoundToModule;\r\n}(ComponentFactory));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Represents an instance of an NgModule created via a {\\@link NgModuleFactory}.\r\n *\r\n * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\r\n * NgModule Instance.\r\n *\r\n * \\@stable\r\n * @abstract\r\n * @template T\r\n */\r\nvar NgModuleRef = /** @class */ (function () {\r\n    function NgModuleRef() {\r\n    }\r\n    return NgModuleRef;\r\n}());\r\n/**\r\n * @record\r\n * @template T\r\n */\r\n\r\n/**\r\n * \\@experimental\r\n * @abstract\r\n * @template T\r\n */\r\nvar NgModuleFactory = /** @class */ (function () {\r\n    function NgModuleFactory() {\r\n    }\r\n    return NgModuleFactory;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A scope function for the Web Tracing Framework (WTF).\r\n *\r\n * \\@experimental\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\nvar trace;\r\nvar events;\r\n/**\r\n * @return {?}\r\n */\r\nfunction detectWTF() {\r\n    var /** @type {?} */ wtf = (/** @type {?} */ (_global /** TODO #9100 */) /** TODO #9100 */)['wtf'];\r\n    if (wtf) {\r\n        trace = wtf['trace'];\r\n        if (trace) {\r\n            events = trace['events'];\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @param {?} signature\r\n * @param {?=} flags\r\n * @return {?}\r\n */\r\nfunction createScope(signature, flags) {\r\n    if (flags === void 0) { flags = null; }\r\n    return events.createScope(signature, flags);\r\n}\r\n/**\r\n * @template T\r\n * @param {?} scope\r\n * @param {?=} returnValue\r\n * @return {?}\r\n */\r\nfunction leave(scope, returnValue) {\r\n    trace.leaveScope(scope, returnValue);\r\n    return returnValue;\r\n}\r\n/**\r\n * @param {?} rangeType\r\n * @param {?} action\r\n * @return {?}\r\n */\r\nfunction startTimeRange(rangeType, action) {\r\n    return trace.beginTimeRange(rangeType, action);\r\n}\r\n/**\r\n * @param {?} range\r\n * @return {?}\r\n */\r\nfunction endTimeRange(range) {\r\n    trace.endTimeRange(range);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * True if WTF is enabled.\r\n */\r\nvar wtfEnabled = detectWTF();\r\n/**\r\n * @param {?=} arg0\r\n * @param {?=} arg1\r\n * @return {?}\r\n */\r\nfunction noopScope(arg0, arg1) {\r\n    return null;\r\n}\r\n/**\r\n * Create trace scope.\r\n *\r\n * Scopes must be strictly nested and are analogous to stack frames, but\r\n * do not have to follow the stack frames. Instead it is recommended that they follow logical\r\n * nesting. You may want to use\r\n * [Event\r\n * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\r\n * as they are defined in WTF.\r\n *\r\n * Used to mark scope entry. The return value is used to leave the scope.\r\n *\r\n *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\r\n *\r\n *     someMethod() {\r\n *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\r\n *        // DO SOME WORK HERE\r\n *        return wtfLeave(s, 123); // Return value 123\r\n *     }\r\n *\r\n * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\r\n * negatively impact the performance of your application. For this reason we recommend that\r\n * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\r\n * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\r\n * exception, will produce incorrect trace, but presence of exception signifies logic error which\r\n * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\r\n * an exception is expected during normal execution while profiling.\r\n *\r\n * \\@experimental\r\n */\r\nvar wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope; };\r\n/**\r\n * Used to mark end of Scope.\r\n *\r\n * - `scope` to end.\r\n * - `returnValue` (optional) to be passed to the WTF.\r\n *\r\n * Returns the `returnValue for easy chaining.\r\n * \\@experimental\r\n */\r\nvar wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };\r\n/**\r\n * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\r\n * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\r\n * enabled.\r\n *\r\n *     someMethod() {\r\n *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\r\n *        var future = new Future.delay(5).then((_) {\r\n *          wtfEndTimeRange(s);\r\n *        });\r\n *     }\r\n * \\@experimental\r\n */\r\nvar wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };\r\n/**\r\n * Ends a async time range operation.\r\n * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\r\n * enabled.\r\n * \\@experimental\r\n */\r\nvar wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Use by directives and components to emit custom Events.\r\n *\r\n * ### Examples\r\n *\r\n * In the following example, `Zippy` alternatively emits `open` and `close` events when its\r\n * title gets clicked:\r\n *\r\n * ```\r\n * \\@Component({\r\n *   selector: 'zippy',\r\n *   template: `\r\n *   <div class=\"zippy\">\r\n *     <div (click)=\"toggle()\">Toggle</div>\r\n *     <div [hidden]=\"!visible\">\r\n *       <ng-content></ng-content>\r\n *     </div>\r\n *  </div>`})\r\n * export class Zippy {\r\n *   visible: boolean = true;\r\n *   \\@Output() open: EventEmitter<any> = new EventEmitter();\r\n *   \\@Output() close: EventEmitter<any> = new EventEmitter();\r\n *\r\n *   toggle() {\r\n *     this.visible = !this.visible;\r\n *     if (this.visible) {\r\n *       this.open.emit(null);\r\n *     } else {\r\n *       this.close.emit(null);\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * The events payload can be accessed by the parameter `$event` on the components output event\r\n * handler:\r\n *\r\n * ```\r\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\r\n * ```\r\n *\r\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\r\n * https://github.com/jhusain/observable-spec\r\n *\r\n * Once a reference implementation of the spec is available, switch to it.\r\n * \\@stable\r\n * @template T\r\n */\r\nvar EventEmitter = /** @class */ (function (_super) {\r\n    __extends(EventEmitter, _super);\r\n    /**\r\n     * Creates an instance of {@link EventEmitter}, which depending on `isAsync`,\r\n     * delivers events synchronously or asynchronously.\r\n     *\r\n     * @param isAsync By default, events are delivered synchronously (default value: `false`).\r\n     * Set to `true` for asynchronous event delivery.\r\n     */\r\n    function EventEmitter(isAsync) {\r\n        if (isAsync === void 0) { isAsync = false; }\r\n        var _this = _super.call(this) || this;\r\n        _this.__isAsync = isAsync;\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {?=} value\r\n     * @return {?}\r\n     */\r\n    EventEmitter.prototype.emit = /**\r\n     * @param {?=} value\r\n     * @return {?}\r\n     */\r\n    function (value) { _super.prototype.next.call(this, value); };\r\n    /**\r\n     * @param {?=} generatorOrNext\r\n     * @param {?=} error\r\n     * @param {?=} complete\r\n     * @return {?}\r\n     */\r\n    EventEmitter.prototype.subscribe = /**\r\n     * @param {?=} generatorOrNext\r\n     * @param {?=} error\r\n     * @param {?=} complete\r\n     * @return {?}\r\n     */\r\n    function (generatorOrNext, error, complete) {\r\n        var /** @type {?} */ schedulerFn;\r\n        var /** @type {?} */ errorFn = function (err) { return null; };\r\n        var /** @type {?} */ completeFn = function () { return null; };\r\n        if (generatorOrNext && typeof generatorOrNext === 'object') {\r\n            schedulerFn = this.__isAsync ? function (value) {\r\n                setTimeout(function () { return generatorOrNext.next(value); });\r\n            } : function (value) { generatorOrNext.next(value); };\r\n            if (generatorOrNext.error) {\r\n                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\r\n                    function (err) { generatorOrNext.error(err); };\r\n            }\r\n            if (generatorOrNext.complete) {\r\n                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\r\n                    function () { generatorOrNext.complete(); };\r\n            }\r\n        }\r\n        else {\r\n            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\r\n                function (value) { generatorOrNext(value); };\r\n            if (error) {\r\n                errorFn =\r\n                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\r\n            }\r\n            if (complete) {\r\n                completeFn =\r\n                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\r\n            }\r\n        }\r\n        var /** @type {?} */ sink = _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\r\n        if (generatorOrNext instanceof Subscription) {\r\n            generatorOrNext.add(sink);\r\n        }\r\n        return sink;\r\n    };\r\n    return EventEmitter;\r\n}(Subject));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An injectable service for executing work inside or outside of the Angular zone.\r\n *\r\n * The most common use of this service is to optimize performance when starting a work consisting of\r\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\r\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\r\n * can reenter the Angular zone via {\\@link #run}.\r\n *\r\n * <!-- TODO: add/fix links to:\r\n *   - docs explaining zones and the use of zones in Angular and change-detection\r\n *   - link to runOutsideAngular/run (throughout this file!)\r\n *   -->\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * import {Component, NgZone} from '\\@angular/core';\r\n * import {NgIf} from '\\@angular/common';\r\n *\r\n * \\@Component({\r\n *   selector: 'ng-zone-demo',\r\n *   template: `\r\n *     <h2>Demo: NgZone</h2>\r\n *\r\n *     <p>Progress: {{progress}}%</p>\r\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\r\n *\r\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\r\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\r\n *   `,\r\n * })\r\n * export class NgZoneDemo {\r\n *   progress: number = 0;\r\n *   label: string;\r\n *\r\n *   constructor(private _ngZone: NgZone) {}\r\n *\r\n *   // Loop inside the Angular zone\r\n *   // so the UI DOES refresh after each setTimeout cycle\r\n *   processWithinAngularZone() {\r\n *     this.label = 'inside';\r\n *     this.progress = 0;\r\n *     this._increaseProgress(() => console.log('Inside Done!'));\r\n *   }\r\n *\r\n *   // Loop outside of the Angular zone\r\n *   // so the UI DOES NOT refresh after each setTimeout cycle\r\n *   processOutsideOfAngularZone() {\r\n *     this.label = 'outside';\r\n *     this.progress = 0;\r\n *     this._ngZone.runOutsideAngular(() => {\r\n *       this._increaseProgress(() => {\r\n *         // reenter the Angular zone and display done\r\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\r\n *       });\r\n *     });\r\n *   }\r\n *\r\n *   _increaseProgress(doneCallback: () => void) {\r\n *     this.progress += 1;\r\n *     console.log(`Current progress: ${this.progress}%`);\r\n *\r\n *     if (this.progress < 100) {\r\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\r\n *     } else {\r\n *       doneCallback();\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * \\@experimental\r\n */\r\nvar NgZone = /** @class */ (function () {\r\n    function NgZone(_a) {\r\n        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\r\n        this.hasPendingMicrotasks = false;\r\n        this.hasPendingMacrotasks = false;\r\n        /**\r\n         * Whether there are no outstanding microtasks or macrotasks.\r\n         */\r\n        this.isStable = true;\r\n        /**\r\n         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\r\n         */\r\n        this.onUnstable = new EventEmitter(false);\r\n        /**\r\n         * Notifies when there is no more microtasks enqueued in the current VM Turn.\r\n         * This is a hint for Angular to do change detection, which may enqueue more microtasks.\r\n         * For this reason this event can fire multiple times per VM Turn.\r\n         */\r\n        this.onMicrotaskEmpty = new EventEmitter(false);\r\n        /**\r\n         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\r\n         * implies we are about to relinquish VM turn.\r\n         * This event gets called just once.\r\n         */\r\n        this.onStable = new EventEmitter(false);\r\n        /**\r\n         * Notifies that an error has been delivered.\r\n         */\r\n        this.onError = new EventEmitter(false);\r\n        if (typeof Zone == 'undefined') {\r\n            throw new Error(\"In this configuration Angular requires Zone.js\");\r\n        }\r\n        Zone.assertZonePatched();\r\n        var /** @type {?} */ self = /** @type {?} */ ((this));\r\n        self._nesting = 0;\r\n        self._outer = self._inner = Zone.current;\r\n        if ((/** @type {?} */ (Zone))['wtfZoneSpec']) {\r\n            self._inner = self._inner.fork((/** @type {?} */ (Zone))['wtfZoneSpec']);\r\n        }\r\n        if ((/** @type {?} */ (Zone))['TaskTrackingZoneSpec']) {\r\n            self._inner = self._inner.fork(new (/** @type {?} */ ((/** @type {?} */ (Zone))['TaskTrackingZoneSpec'])));\r\n        }\r\n        if (enableLongStackTrace && (/** @type {?} */ (Zone))['longStackTraceZoneSpec']) {\r\n            self._inner = self._inner.fork((/** @type {?} */ (Zone))['longStackTraceZoneSpec']);\r\n        }\r\n        forkInnerZoneWithAngularBehavior(self);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    NgZone.isInAngularZone = /**\r\n     * @return {?}\r\n     */\r\n    function () { return Zone.current.get('isAngularZone') === true; };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    NgZone.assertInAngularZone = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!NgZone.isInAngularZone()) {\r\n            throw new Error('Expected to be in Angular Zone, but it is not!');\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    NgZone.assertNotInAngularZone = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (NgZone.isInAngularZone()) {\r\n            throw new Error('Expected to not be in Angular Zone, but it is!');\r\n        }\r\n    };\r\n    /**\r\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\r\n     * the function.\r\n     *\r\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\r\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\r\n     *\r\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n     * within the Angular zone.\r\n     *\r\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\r\n     */\r\n    /**\r\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\r\n     * the function.\r\n     *\r\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\r\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\r\n     *\r\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n     * within the Angular zone.\r\n     *\r\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\r\n     * @template T\r\n     * @param {?} fn\r\n     * @param {?=} applyThis\r\n     * @param {?=} applyArgs\r\n     * @return {?}\r\n     */\r\n    NgZone.prototype.run = /**\r\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\r\n     * the function.\r\n     *\r\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\r\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\r\n     *\r\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n     * within the Angular zone.\r\n     *\r\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\r\n     * @template T\r\n     * @param {?} fn\r\n     * @param {?=} applyThis\r\n     * @param {?=} applyArgs\r\n     * @return {?}\r\n     */\r\n    function (fn, applyThis, applyArgs) {\r\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._inner.run(fn, applyThis, applyArgs));\r\n    };\r\n    /**\r\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\r\n     * returned by the function.\r\n     *\r\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\r\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\r\n     *\r\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n     * within the Angular zone.\r\n     *\r\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\r\n     */\r\n    /**\r\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\r\n     * returned by the function.\r\n     *\r\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\r\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\r\n     *\r\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n     * within the Angular zone.\r\n     *\r\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\r\n     * @template T\r\n     * @param {?} fn\r\n     * @param {?=} applyThis\r\n     * @param {?=} applyArgs\r\n     * @param {?=} name\r\n     * @return {?}\r\n     */\r\n    NgZone.prototype.runTask = /**\r\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\r\n     * returned by the function.\r\n     *\r\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\r\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\r\n     *\r\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n     * within the Angular zone.\r\n     *\r\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\r\n     * @template T\r\n     * @param {?} fn\r\n     * @param {?=} applyThis\r\n     * @param {?=} applyArgs\r\n     * @param {?=} name\r\n     * @return {?}\r\n     */\r\n    function (fn, applyThis, applyArgs, name) {\r\n        var /** @type {?} */ zone = (/** @type {?} */ ((this)))._inner;\r\n        var /** @type {?} */ task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\r\n        try {\r\n            return /** @type {?} */ (zone.runTask(task, applyThis, applyArgs));\r\n        }\r\n        finally {\r\n            zone.cancelTask(task);\r\n        }\r\n    };\r\n    /**\r\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\r\n     * rethrown.\r\n     */\r\n    /**\r\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\r\n     * rethrown.\r\n     * @template T\r\n     * @param {?} fn\r\n     * @param {?=} applyThis\r\n     * @param {?=} applyArgs\r\n     * @return {?}\r\n     */\r\n    NgZone.prototype.runGuarded = /**\r\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\r\n     * rethrown.\r\n     * @template T\r\n     * @param {?} fn\r\n     * @param {?=} applyThis\r\n     * @param {?=} applyArgs\r\n     * @return {?}\r\n     */\r\n    function (fn, applyThis, applyArgs) {\r\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._inner.runGuarded(fn, applyThis, applyArgs));\r\n    };\r\n    /**\r\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\r\n     * the function.\r\n     *\r\n     * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\r\n     * work that\r\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\r\n     *\r\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n     * outside of the Angular zone.\r\n     *\r\n     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\r\n     */\r\n    /**\r\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\r\n     * the function.\r\n     *\r\n     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\r\n     * work that\r\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\r\n     *\r\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n     * outside of the Angular zone.\r\n     *\r\n     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\r\n     * @template T\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    NgZone.prototype.runOutsideAngular = /**\r\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\r\n     * the function.\r\n     *\r\n     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\r\n     * work that\r\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\r\n     *\r\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n     * outside of the Angular zone.\r\n     *\r\n     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\r\n     * @template T\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._outer.run(fn));\r\n    };\r\n    return NgZone;\r\n}());\r\n/**\r\n * @return {?}\r\n */\r\nfunction noop() { }\r\nvar EMPTY_PAYLOAD = {};\r\n/**\r\n * @param {?} zone\r\n * @return {?}\r\n */\r\nfunction checkStable(zone) {\r\n    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\r\n        try {\r\n            zone._nesting++;\r\n            zone.onMicrotaskEmpty.emit(null);\r\n        }\r\n        finally {\r\n            zone._nesting--;\r\n            if (!zone.hasPendingMicrotasks) {\r\n                try {\r\n                    zone.runOutsideAngular(function () { return zone.onStable.emit(null); });\r\n                }\r\n                finally {\r\n                    zone.isStable = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} zone\r\n * @return {?}\r\n */\r\nfunction forkInnerZoneWithAngularBehavior(zone) {\r\n    zone._inner = zone._inner.fork({\r\n        name: 'angular',\r\n        properties: /** @type {?} */ ({ 'isAngularZone': true }),\r\n        onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\r\n            try {\r\n                onEnter(zone);\r\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\r\n            }\r\n            finally {\r\n                onLeave(zone);\r\n            }\r\n        },\r\n        onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\r\n            try {\r\n                onEnter(zone);\r\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\r\n            }\r\n            finally {\r\n                onLeave(zone);\r\n            }\r\n        },\r\n        onHasTask: function (delegate, current, target, hasTaskState) {\r\n            delegate.hasTask(target, hasTaskState);\r\n            if (current === target) {\r\n                // We are only interested in hasTask events which originate from our zone\r\n                // (A child hasTask event is not interesting to us)\r\n                if (hasTaskState.change == 'microTask') {\r\n                    zone.hasPendingMicrotasks = hasTaskState.microTask;\r\n                    checkStable(zone);\r\n                }\r\n                else if (hasTaskState.change == 'macroTask') {\r\n                    zone.hasPendingMacrotasks = hasTaskState.macroTask;\r\n                }\r\n            }\r\n        },\r\n        onHandleError: function (delegate, current, target, error) {\r\n            delegate.handleError(target, error);\r\n            zone.runOutsideAngular(function () { return zone.onError.emit(error); });\r\n            return false;\r\n        }\r\n    });\r\n}\r\n/**\r\n * @param {?} zone\r\n * @return {?}\r\n */\r\nfunction onEnter(zone) {\r\n    zone._nesting++;\r\n    if (zone.isStable) {\r\n        zone.isStable = false;\r\n        zone.onUnstable.emit(null);\r\n    }\r\n}\r\n/**\r\n * @param {?} zone\r\n * @return {?}\r\n */\r\nfunction onLeave(zone) {\r\n    zone._nesting--;\r\n    checkStable(zone);\r\n}\r\n/**\r\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\r\n * to framework to perform rendering.\r\n */\r\nvar NoopNgZone = /** @class */ (function () {\r\n    function NoopNgZone() {\r\n        this.hasPendingMicrotasks = false;\r\n        this.hasPendingMacrotasks = false;\r\n        this.isStable = true;\r\n        this.onUnstable = new EventEmitter();\r\n        this.onMicrotaskEmpty = new EventEmitter();\r\n        this.onStable = new EventEmitter();\r\n        this.onError = new EventEmitter();\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    NoopNgZone.prototype.run = /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) { return fn(); };\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    NoopNgZone.prototype.runGuarded = /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) { return fn(); };\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    NoopNgZone.prototype.runOutsideAngular = /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) { return fn(); };\r\n    /**\r\n     * @template T\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    NoopNgZone.prototype.runTask = /**\r\n     * @template T\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) { return fn(); };\r\n    return NoopNgZone;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * The Testability service provides testing hooks that can be accessed from\r\n * the browser and by services such as Protractor. Each bootstrapped Angular\r\n * application on the page will have an instance of Testability.\r\n * \\@experimental\r\n */\r\nvar Testability = /** @class */ (function () {\r\n    function Testability(_ngZone) {\r\n        var _this = this;\r\n        this._ngZone = _ngZone;\r\n        this._pendingCount = 0;\r\n        this._isZoneStable = true;\r\n        /**\r\n         * Whether any work was done since the last 'whenStable' callback. This is\r\n         * useful to detect if this could have potentially destabilized another\r\n         * component while it is stabilizing.\r\n         * \\@internal\r\n         */\r\n        this._didWork = false;\r\n        this._callbacks = [];\r\n        this._watchAngularEvents();\r\n        _ngZone.run(function () { _this.taskTrackingZone = Zone.current.get('TaskTrackingZone'); });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    Testability.prototype._watchAngularEvents = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        this._ngZone.onUnstable.subscribe({\r\n            next: function () {\r\n                _this._didWork = true;\r\n                _this._isZoneStable = false;\r\n            }\r\n        });\r\n        this._ngZone.runOutsideAngular(function () {\r\n            _this._ngZone.onStable.subscribe({\r\n                next: function () {\r\n                    NgZone.assertNotInAngularZone();\r\n                    scheduleMicroTask(function () {\r\n                        _this._isZoneStable = true;\r\n                        _this._runCallbacksIfReady();\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Increases the number of pending request\r\n     * @deprecated pending requests are now tracked with zones.\r\n     */\r\n    /**\r\n     * Increases the number of pending request\r\n     * @deprecated pending requests are now tracked with zones.\r\n     * @return {?}\r\n     */\r\n    Testability.prototype.increasePendingRequestCount = /**\r\n     * Increases the number of pending request\r\n     * @deprecated pending requests are now tracked with zones.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._pendingCount += 1;\r\n        this._didWork = true;\r\n        return this._pendingCount;\r\n    };\r\n    /**\r\n     * Decreases the number of pending request\r\n     * @deprecated pending requests are now tracked with zones\r\n     */\r\n    /**\r\n     * Decreases the number of pending request\r\n     * @deprecated pending requests are now tracked with zones\r\n     * @return {?}\r\n     */\r\n    Testability.prototype.decreasePendingRequestCount = /**\r\n     * Decreases the number of pending request\r\n     * @deprecated pending requests are now tracked with zones\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._pendingCount -= 1;\r\n        if (this._pendingCount < 0) {\r\n            throw new Error('pending async requests below zero');\r\n        }\r\n        this._runCallbacksIfReady();\r\n        return this._pendingCount;\r\n    };\r\n    /**\r\n     * Whether an associated application is stable\r\n     */\r\n    /**\r\n     * Whether an associated application is stable\r\n     * @return {?}\r\n     */\r\n    Testability.prototype.isStable = /**\r\n     * Whether an associated application is stable\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    Testability.prototype._runCallbacksIfReady = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (this.isStable()) {\r\n            // Schedules the call backs in a new frame so that it is always async.\r\n            scheduleMicroTask(function () {\r\n                while (_this._callbacks.length !== 0) {\r\n                    var /** @type {?} */ cb = /** @type {?} */ ((_this._callbacks.pop()));\r\n                    clearTimeout(cb.timeoutId);\r\n                    cb.doneCb(_this._didWork);\r\n                }\r\n                _this._didWork = false;\r\n            });\r\n        }\r\n        else {\r\n            // Still not stable, send updates.\r\n            var /** @type {?} */ pending_1 = this.getPendingTasks();\r\n            this._callbacks = this._callbacks.filter(function (cb) {\r\n                if (cb.updateCb && cb.updateCb(pending_1)) {\r\n                    clearTimeout(cb.timeoutId);\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            this._didWork = true;\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    Testability.prototype.getPendingTasks = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this.taskTrackingZone) {\r\n            return [];\r\n        }\r\n        return this.taskTrackingZone.macroTasks.map(function (t) {\r\n            return {\r\n                source: t.source,\r\n                isPeriodic: t.data.isPeriodic,\r\n                delay: t.data.delay,\r\n                // From TaskTrackingZone:\r\n                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\r\n                creationLocation: /** @type {?} */ ((/** @type {?} */ (t)).creationLocation),\r\n                // Added by Zones for XHRs\r\n                // https://github.com/angular/zone.js/blob/master/lib/browser/browser.ts#L133\r\n                xhr: (/** @type {?} */ (t.data)).target\r\n            };\r\n        });\r\n    };\r\n    /**\r\n     * @param {?} cb\r\n     * @param {?=} timeout\r\n     * @param {?=} updateCb\r\n     * @return {?}\r\n     */\r\n    Testability.prototype.addCallback = /**\r\n     * @param {?} cb\r\n     * @param {?=} timeout\r\n     * @param {?=} updateCb\r\n     * @return {?}\r\n     */\r\n    function (cb, timeout, updateCb) {\r\n        var _this = this;\r\n        var /** @type {?} */ timeoutId = -1;\r\n        if (timeout && timeout > 0) {\r\n            timeoutId = setTimeout(function () {\r\n                _this._callbacks = _this._callbacks.filter(function (cb) { return cb.timeoutId !== timeoutId; });\r\n                cb(_this._didWork, _this.getPendingTasks());\r\n            }, timeout);\r\n        }\r\n        this._callbacks.push(/** @type {?} */ ({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb }));\r\n    };\r\n    /**\r\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\r\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\r\n     *\r\n     * @param doneCb The callback to invoke when Angular is stable or the timeout expires\r\n     *    whichever comes first.\r\n     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\r\n     *    specified, whenStable() will wait forever.\r\n     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\r\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\r\n     *    and no further updates will be issued.\r\n     */\r\n    /**\r\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\r\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\r\n     *\r\n     * @param {?} doneCb The callback to invoke when Angular is stable or the timeout expires\r\n     *    whichever comes first.\r\n     * @param {?=} timeout Optional. The maximum time to wait for Angular to become stable. If not\r\n     *    specified, whenStable() will wait forever.\r\n     * @param {?=} updateCb Optional. If specified, this callback will be invoked whenever the set of\r\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\r\n     *    and no further updates will be issued.\r\n     * @return {?}\r\n     */\r\n    Testability.prototype.whenStable = /**\r\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\r\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\r\n     *\r\n     * @param {?} doneCb The callback to invoke when Angular is stable or the timeout expires\r\n     *    whichever comes first.\r\n     * @param {?=} timeout Optional. The maximum time to wait for Angular to become stable. If not\r\n     *    specified, whenStable() will wait forever.\r\n     * @param {?=} updateCb Optional. If specified, this callback will be invoked whenever the set of\r\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\r\n     *    and no further updates will be issued.\r\n     * @return {?}\r\n     */\r\n    function (doneCb, timeout, updateCb) {\r\n        if (updateCb && !this.taskTrackingZone) {\r\n            throw new Error('Task tracking zone is required when passing an update callback to ' +\r\n                'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\r\n        }\r\n        // These arguments are 'Function' above to keep the public API simple.\r\n        this.addCallback(/** @type {?} */ (doneCb), timeout, /** @type {?} */ (updateCb));\r\n        this._runCallbacksIfReady();\r\n    };\r\n    /**\r\n     * Get the number of pending requests\r\n     * @deprecated pending requests are now tracked with zones\r\n     */\r\n    /**\r\n     * Get the number of pending requests\r\n     * @deprecated pending requests are now tracked with zones\r\n     * @return {?}\r\n     */\r\n    Testability.prototype.getPendingRequestCount = /**\r\n     * Get the number of pending requests\r\n     * @deprecated pending requests are now tracked with zones\r\n     * @return {?}\r\n     */\r\n    function () { return this._pendingCount; };\r\n    /**\r\n     * Find providers by name\r\n     * @param using The root element to search from\r\n     * @param provider The name of binding variable\r\n     * @param exactMatch Whether using exactMatch\r\n     */\r\n    /**\r\n     * Find providers by name\r\n     * @param {?} using The root element to search from\r\n     * @param {?} provider The name of binding variable\r\n     * @param {?} exactMatch Whether using exactMatch\r\n     * @return {?}\r\n     */\r\n    Testability.prototype.findProviders = /**\r\n     * Find providers by name\r\n     * @param {?} using The root element to search from\r\n     * @param {?} provider The name of binding variable\r\n     * @param {?} exactMatch Whether using exactMatch\r\n     * @return {?}\r\n     */\r\n    function (using, provider, exactMatch) {\r\n        // TODO(juliemr): implement.\r\n        return [];\r\n    };\r\n    Testability.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    Testability.ctorParameters = function () { return [\r\n        { type: NgZone, },\r\n    ]; };\r\n    return Testability;\r\n}());\r\n/**\r\n * A global registry of {\\@link Testability} instances for specific elements.\r\n * \\@experimental\r\n */\r\nvar TestabilityRegistry = /** @class */ (function () {\r\n    function TestabilityRegistry() {\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._applications = new Map();\r\n        _testabilityGetter.addToWindow(this);\r\n    }\r\n    /**\r\n     * Registers an application with a testability hook so that it can be tracked\r\n     * @param token token of application, root element\r\n     * @param testability Testability hook\r\n     */\r\n    /**\r\n     * Registers an application with a testability hook so that it can be tracked\r\n     * @param {?} token token of application, root element\r\n     * @param {?} testability Testability hook\r\n     * @return {?}\r\n     */\r\n    TestabilityRegistry.prototype.registerApplication = /**\r\n     * Registers an application with a testability hook so that it can be tracked\r\n     * @param {?} token token of application, root element\r\n     * @param {?} testability Testability hook\r\n     * @return {?}\r\n     */\r\n    function (token, testability) {\r\n        this._applications.set(token, testability);\r\n    };\r\n    /**\r\n     * Unregisters an application.\r\n     * @param token token of application, root element\r\n     */\r\n    /**\r\n     * Unregisters an application.\r\n     * @param {?} token token of application, root element\r\n     * @return {?}\r\n     */\r\n    TestabilityRegistry.prototype.unregisterApplication = /**\r\n     * Unregisters an application.\r\n     * @param {?} token token of application, root element\r\n     * @return {?}\r\n     */\r\n    function (token) { this._applications.delete(token); };\r\n    /**\r\n     * Unregisters all applications\r\n     */\r\n    /**\r\n     * Unregisters all applications\r\n     * @return {?}\r\n     */\r\n    TestabilityRegistry.prototype.unregisterAllApplications = /**\r\n     * Unregisters all applications\r\n     * @return {?}\r\n     */\r\n    function () { this._applications.clear(); };\r\n    /**\r\n     * Get a testability hook associated with the application\r\n     * @param elem root element\r\n     */\r\n    /**\r\n     * Get a testability hook associated with the application\r\n     * @param {?} elem root element\r\n     * @return {?}\r\n     */\r\n    TestabilityRegistry.prototype.getTestability = /**\r\n     * Get a testability hook associated with the application\r\n     * @param {?} elem root element\r\n     * @return {?}\r\n     */\r\n    function (elem) { return this._applications.get(elem) || null; };\r\n    /**\r\n     * Get all registered testabilities\r\n     */\r\n    /**\r\n     * Get all registered testabilities\r\n     * @return {?}\r\n     */\r\n    TestabilityRegistry.prototype.getAllTestabilities = /**\r\n     * Get all registered testabilities\r\n     * @return {?}\r\n     */\r\n    function () { return Array.from(this._applications.values()); };\r\n    /**\r\n     * Get all registered applications(root elements)\r\n     */\r\n    /**\r\n     * Get all registered applications(root elements)\r\n     * @return {?}\r\n     */\r\n    TestabilityRegistry.prototype.getAllRootElements = /**\r\n     * Get all registered applications(root elements)\r\n     * @return {?}\r\n     */\r\n    function () { return Array.from(this._applications.keys()); };\r\n    /**\r\n     * Find testability of a node in the Tree\r\n     * @param elem node\r\n     * @param findInAncestors whether finding testability in ancestors if testability was not found in\r\n     * current node\r\n     */\r\n    /**\r\n     * Find testability of a node in the Tree\r\n     * @param {?} elem node\r\n     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\r\n     * current node\r\n     * @return {?}\r\n     */\r\n    TestabilityRegistry.prototype.findTestabilityInTree = /**\r\n     * Find testability of a node in the Tree\r\n     * @param {?} elem node\r\n     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\r\n     * current node\r\n     * @return {?}\r\n     */\r\n    function (elem, findInAncestors) {\r\n        if (findInAncestors === void 0) { findInAncestors = true; }\r\n        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\r\n    };\r\n    TestabilityRegistry.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    TestabilityRegistry.ctorParameters = function () { return []; };\r\n    return TestabilityRegistry;\r\n}());\r\n/**\r\n * Adapter interface for retrieving the `Testability` service associated for a\r\n * particular context.\r\n *\r\n * \\@experimental Testability apis are primarily intended to be used by e2e test tool vendors like\r\n * the Protractor team.\r\n * @record\r\n */\r\n\r\nvar _NoopGetTestability = /** @class */ (function () {\r\n    function _NoopGetTestability() {\r\n    }\r\n    /**\r\n     * @param {?} registry\r\n     * @return {?}\r\n     */\r\n    _NoopGetTestability.prototype.addToWindow = /**\r\n     * @param {?} registry\r\n     * @return {?}\r\n     */\r\n    function (registry) { };\r\n    /**\r\n     * @param {?} registry\r\n     * @param {?} elem\r\n     * @param {?} findInAncestors\r\n     * @return {?}\r\n     */\r\n    _NoopGetTestability.prototype.findTestabilityInTree = /**\r\n     * @param {?} registry\r\n     * @param {?} elem\r\n     * @param {?} findInAncestors\r\n     * @return {?}\r\n     */\r\n    function (registry, elem, findInAncestors) {\r\n        return null;\r\n    };\r\n    return _NoopGetTestability;\r\n}());\r\n/**\r\n * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\r\n * \\@experimental\r\n * @param {?} getter\r\n * @return {?}\r\n */\r\nfunction setTestabilityGetter(getter) {\r\n    _testabilityGetter = getter;\r\n}\r\nvar _testabilityGetter = new _NoopGetTestability();\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar _devMode = true;\r\nvar _runModeLocked = false;\r\nvar _platform;\r\nvar ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\r\n/**\r\n * Disable Angular's development mode, which turns off assertions and other\r\n * checks within the framework.\r\n *\r\n * One important assertion this disables verifies that a change detection pass\r\n * does not result in additional changes to any bindings (also known as\r\n * unidirectional data flow).\r\n *\r\n * \\@stable\r\n * @return {?}\r\n */\r\nfunction enableProdMode() {\r\n    if (_runModeLocked) {\r\n        throw new Error('Cannot enable prod mode after platform setup.');\r\n    }\r\n    _devMode = false;\r\n}\r\n/**\r\n * Returns whether Angular is in development mode. After called once,\r\n * the value is locked and won't change any more.\r\n *\r\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\r\n *\r\n * \\@experimental APIs related to application bootstrap are currently under review.\r\n * @return {?}\r\n */\r\nfunction isDevMode() {\r\n    _runModeLocked = true;\r\n    return _devMode;\r\n}\r\n/**\r\n * A token for third-party components that can register themselves with NgProbe.\r\n *\r\n * \\@experimental\r\n */\r\nvar NgProbeToken = /** @class */ (function () {\r\n    function NgProbeToken(name, token) {\r\n        this.name = name;\r\n        this.token = token;\r\n    }\r\n    return NgProbeToken;\r\n}());\r\n/**\r\n * Creates a platform.\r\n * Platforms have to be eagerly created via this function.\r\n *\r\n * \\@experimental APIs related to application bootstrap are currently under review.\r\n * @param {?} injector\r\n * @return {?}\r\n */\r\nfunction createPlatform(injector) {\r\n    if (_platform && !_platform.destroyed &&\r\n        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\r\n        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\r\n    }\r\n    _platform = injector.get(PlatformRef);\r\n    var /** @type {?} */ inits = injector.get(PLATFORM_INITIALIZER, null);\r\n    if (inits)\r\n        inits.forEach(function (init) { return init(); });\r\n    return _platform;\r\n}\r\n/**\r\n * Creates a factory for a platform\r\n *\r\n * \\@experimental APIs related to application bootstrap are currently under review.\r\n * @param {?} parentPlatformFactory\r\n * @param {?} name\r\n * @param {?=} providers\r\n * @return {?}\r\n */\r\nfunction createPlatformFactory(parentPlatformFactory, name, providers) {\r\n    if (providers === void 0) { providers = []; }\r\n    var /** @type {?} */ desc = \"Platform: \" + name;\r\n    var /** @type {?} */ marker = new InjectionToken(desc);\r\n    return function (extraProviders) {\r\n        if (extraProviders === void 0) { extraProviders = []; }\r\n        var /** @type {?} */ platform = getPlatform();\r\n        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\r\n            if (parentPlatformFactory) {\r\n                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\r\n            }\r\n            else {\r\n                var /** @type {?} */ injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true });\r\n                createPlatform(Injector.create({ providers: injectedProviders, name: desc }));\r\n            }\r\n        }\r\n        return assertPlatform(marker);\r\n    };\r\n}\r\n/**\r\n * Checks that there currently is a platform which contains the given token as a provider.\r\n *\r\n * \\@experimental APIs related to application bootstrap are currently under review.\r\n * @param {?} requiredToken\r\n * @return {?}\r\n */\r\nfunction assertPlatform(requiredToken) {\r\n    var /** @type {?} */ platform = getPlatform();\r\n    if (!platform) {\r\n        throw new Error('No platform exists!');\r\n    }\r\n    if (!platform.injector.get(requiredToken, null)) {\r\n        throw new Error('A platform with a different configuration has been created. Please destroy it first.');\r\n    }\r\n    return platform;\r\n}\r\n/**\r\n * Destroy the existing platform.\r\n *\r\n * \\@experimental APIs related to application bootstrap are currently under review.\r\n * @return {?}\r\n */\r\nfunction destroyPlatform() {\r\n    if (_platform && !_platform.destroyed) {\r\n        _platform.destroy();\r\n    }\r\n}\r\n/**\r\n * Returns the current platform.\r\n *\r\n * \\@experimental APIs related to application bootstrap are currently under review.\r\n * @return {?}\r\n */\r\nfunction getPlatform() {\r\n    return _platform && !_platform.destroyed ? _platform : null;\r\n}\r\n/**\r\n * Provides additional options to the bootstraping process.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * The Angular platform is the entry point for Angular on a web page. Each page\r\n * has exactly one platform, and services (such as reflection) which are common\r\n * to every Angular application running on the page are bound in its scope.\r\n *\r\n * A page's platform is initialized implicitly when a platform is created via a platform factory\r\n * (e.g. {\\@link platformBrowser}), or explicitly by calling the {\\@link createPlatform} function.\r\n *\r\n * \\@stable\r\n */\r\nvar PlatformRef = /** @class */ (function () {\r\n    /** @internal */\r\n    function PlatformRef(_injector) {\r\n        this._injector = _injector;\r\n        this._modules = [];\r\n        this._destroyListeners = [];\r\n        this._destroyed = false;\r\n    }\r\n    /**\r\n     * Creates an instance of an `@NgModule` for the given platform\r\n     * for offline compilation.\r\n     *\r\n     * ## Simple Example\r\n     *\r\n     * ```typescript\r\n     * my_module.ts:\r\n     *\r\n     * @NgModule({\r\n     *   imports: [BrowserModule]\r\n     * })\r\n     * class MyModule {}\r\n     *\r\n     * main.ts:\r\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\r\n     * import {platformBrowser} from '@angular/platform-browser';\r\n     *\r\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\r\n     * ```\r\n     *\r\n     * @experimental APIs related to application bootstrap are currently under review.\r\n     */\r\n    /**\r\n     * Creates an instance of an `\\@NgModule` for the given platform\r\n     * for offline compilation.\r\n     *\r\n     * ## Simple Example\r\n     *\r\n     * ```typescript\r\n     * my_module.ts:\r\n     *\r\n     * \\@NgModule({\r\n     *   imports: [BrowserModule]\r\n     * })\r\n     * class MyModule {}\r\n     *\r\n     * main.ts:\r\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\r\n     * import {platformBrowser} from '\\@angular/platform-browser';\r\n     *\r\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\r\n     * ```\r\n     *\r\n     * \\@experimental APIs related to application bootstrap are currently under review.\r\n     * @template M\r\n     * @param {?} moduleFactory\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    PlatformRef.prototype.bootstrapModuleFactory = /**\r\n     * Creates an instance of an `\\@NgModule` for the given platform\r\n     * for offline compilation.\r\n     *\r\n     * ## Simple Example\r\n     *\r\n     * ```typescript\r\n     * my_module.ts:\r\n     *\r\n     * \\@NgModule({\r\n     *   imports: [BrowserModule]\r\n     * })\r\n     * class MyModule {}\r\n     *\r\n     * main.ts:\r\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\r\n     * import {platformBrowser} from '\\@angular/platform-browser';\r\n     *\r\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\r\n     * ```\r\n     *\r\n     * \\@experimental APIs related to application bootstrap are currently under review.\r\n     * @template M\r\n     * @param {?} moduleFactory\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (moduleFactory, options) {\r\n        var _this = this;\r\n        // Note: We need to create the NgZone _before_ we instantiate the module,\r\n        // as instantiating the module creates some providers eagerly.\r\n        // So we create a mini parent injector that just contains the new NgZone and\r\n        // pass that as parent to the NgModuleFactory.\r\n        var /** @type {?} */ ngZoneOption = options ? options.ngZone : undefined;\r\n        var /** @type {?} */ ngZone = getNgZone(ngZoneOption);\r\n        var /** @type {?} */ providers = [{ provide: NgZone, useValue: ngZone }];\r\n        // Attention: Don't use ApplicationRef.run here,\r\n        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\r\n        return ngZone.run(function () {\r\n            var /** @type {?} */ ngZoneInjector = Injector.create({ providers: providers, parent: _this.injector, name: moduleFactory.moduleType.name });\r\n            var /** @type {?} */ moduleRef = /** @type {?} */ (moduleFactory.create(ngZoneInjector));\r\n            var /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\r\n            if (!exceptionHandler) {\r\n                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\r\n            }\r\n            moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); }); /** @type {?} */\r\n            ((ngZone)).runOutsideAngular(function () { return ((ngZone)).onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } }); });\r\n            return _callAndReportToErrorHandler(exceptionHandler, /** @type {?} */ ((ngZone)), function () {\r\n                var /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);\r\n                initStatus.runInitializers();\r\n                return initStatus.donePromise.then(function () {\r\n                    _this._moduleDoBootstrap(moduleRef);\r\n                    return moduleRef;\r\n                });\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\r\n     *\r\n     * ## Simple Example\r\n     *\r\n     * ```typescript\r\n     * @NgModule({\r\n     *   imports: [BrowserModule]\r\n     * })\r\n     * class MyModule {}\r\n     *\r\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\r\n     * ```\r\n     * @stable\r\n     */\r\n    /**\r\n     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\r\n     *\r\n     * ## Simple Example\r\n     *\r\n     * ```typescript\r\n     * \\@NgModule({\r\n     *   imports: [BrowserModule]\r\n     * })\r\n     * class MyModule {}\r\n     *\r\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\r\n     * ```\r\n     * \\@stable\r\n     * @template M\r\n     * @param {?} moduleType\r\n     * @param {?=} compilerOptions\r\n     * @return {?}\r\n     */\r\n    PlatformRef.prototype.bootstrapModule = /**\r\n     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\r\n     *\r\n     * ## Simple Example\r\n     *\r\n     * ```typescript\r\n     * \\@NgModule({\r\n     *   imports: [BrowserModule]\r\n     * })\r\n     * class MyModule {}\r\n     *\r\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\r\n     * ```\r\n     * \\@stable\r\n     * @template M\r\n     * @param {?} moduleType\r\n     * @param {?=} compilerOptions\r\n     * @return {?}\r\n     */\r\n    function (moduleType, compilerOptions) {\r\n        var _this = this;\r\n        if (compilerOptions === void 0) { compilerOptions = []; }\r\n        var /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);\r\n        var /** @type {?} */ options = optionsReducer({}, compilerOptions);\r\n        var /** @type {?} */ compiler = compilerFactory.createCompiler([options]);\r\n        return compiler.compileModuleAsync(moduleType)\r\n            .then(function (moduleFactory) { return _this.bootstrapModuleFactory(moduleFactory, options); });\r\n    };\r\n    /**\r\n     * @param {?} moduleRef\r\n     * @return {?}\r\n     */\r\n    PlatformRef.prototype._moduleDoBootstrap = /**\r\n     * @param {?} moduleRef\r\n     * @return {?}\r\n     */\r\n    function (moduleRef) {\r\n        var /** @type {?} */ appRef = /** @type {?} */ (moduleRef.injector.get(ApplicationRef));\r\n        if (moduleRef._bootstrapComponents.length > 0) {\r\n            moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });\r\n        }\r\n        else if (moduleRef.instance.ngDoBootstrap) {\r\n            moduleRef.instance.ngDoBootstrap(appRef);\r\n        }\r\n        else {\r\n            throw new Error(\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \" +\r\n                \"Please define one of these.\");\r\n        }\r\n        this._modules.push(moduleRef);\r\n    };\r\n    /**\r\n     * Register a listener to be called when the platform is disposed.\r\n     */\r\n    /**\r\n     * Register a listener to be called when the platform is disposed.\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    PlatformRef.prototype.onDestroy = /**\r\n     * Register a listener to be called when the platform is disposed.\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    function (callback) { this._destroyListeners.push(callback); };\r\n    Object.defineProperty(PlatformRef.prototype, \"injector\", {\r\n        /**\r\n         * Retrieve the platform {@link Injector}, which is the parent injector for\r\n         * every Angular application on the page and provides singleton providers.\r\n         */\r\n        get: /**\r\n         * Retrieve the platform {\\@link Injector}, which is the parent injector for\r\n         * every Angular application on the page and provides singleton providers.\r\n         * @return {?}\r\n         */\r\n        function () { return this._injector; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Destroy the Angular platform and all Angular applications on the page.\r\n     */\r\n    /**\r\n     * Destroy the Angular platform and all Angular applications on the page.\r\n     * @return {?}\r\n     */\r\n    PlatformRef.prototype.destroy = /**\r\n     * Destroy the Angular platform and all Angular applications on the page.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._destroyed) {\r\n            throw new Error('The platform has already been destroyed!');\r\n        }\r\n        this._modules.slice().forEach(function (module) { return module.destroy(); });\r\n        this._destroyListeners.forEach(function (listener) { return listener(); });\r\n        this._destroyed = true;\r\n    };\r\n    Object.defineProperty(PlatformRef.prototype, \"destroyed\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return this._destroyed; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PlatformRef.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    PlatformRef.ctorParameters = function () { return [\r\n        { type: Injector, },\r\n    ]; };\r\n    return PlatformRef;\r\n}());\r\n/**\r\n * @param {?=} ngZoneOption\r\n * @return {?}\r\n */\r\nfunction getNgZone(ngZoneOption) {\r\n    var /** @type {?} */ ngZone;\r\n    if (ngZoneOption === 'noop') {\r\n        ngZone = new NoopNgZone();\r\n    }\r\n    else {\r\n        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\r\n            new NgZone({ enableLongStackTrace: isDevMode() });\r\n    }\r\n    return ngZone;\r\n}\r\n/**\r\n * @param {?} errorHandler\r\n * @param {?} ngZone\r\n * @param {?} callback\r\n * @return {?}\r\n */\r\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\r\n    try {\r\n        var /** @type {?} */ result = callback();\r\n        if (isPromise(result)) {\r\n            return result.catch(function (e) {\r\n                ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\r\n                // rethrow as the exception handler might not do it\r\n                throw e;\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n    catch (/** @type {?} */ e) {\r\n        ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\r\n        // rethrow as the exception handler might not do it\r\n        throw e;\r\n    }\r\n}\r\n/**\r\n * @template T\r\n * @param {?} dst\r\n * @param {?} objs\r\n * @return {?}\r\n */\r\nfunction optionsReducer(dst, objs) {\r\n    if (Array.isArray(objs)) {\r\n        dst = objs.reduce(optionsReducer, dst);\r\n    }\r\n    else {\r\n        dst = __assign({}, dst, (/** @type {?} */ (objs)));\r\n    }\r\n    return dst;\r\n}\r\n/**\r\n * A reference to an Angular application running on a page.\r\n *\r\n * \\@stable\r\n */\r\nvar ApplicationRef = /** @class */ (function () {\r\n    /** @internal */\r\n    function ApplicationRef(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\r\n        var _this = this;\r\n        this._zone = _zone;\r\n        this._console = _console;\r\n        this._injector = _injector;\r\n        this._exceptionHandler = _exceptionHandler;\r\n        this._componentFactoryResolver = _componentFactoryResolver;\r\n        this._initStatus = _initStatus;\r\n        this._bootstrapListeners = [];\r\n        this._views = [];\r\n        this._runningTick = false;\r\n        this._enforceNoNewChanges = false;\r\n        this._stable = true;\r\n        /**\r\n         * Get a list of component types registered to this application.\r\n         * This list is populated even before the component is created.\r\n         */\r\n        this.componentTypes = [];\r\n        /**\r\n         * Get a list of components registered to this application.\r\n         */\r\n        this.components = [];\r\n        this._enforceNoNewChanges = isDevMode();\r\n        this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\r\n        var /** @type {?} */ isCurrentlyStable = new Observable(function (observer) {\r\n            _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&\r\n                !_this._zone.hasPendingMicrotasks;\r\n            _this._zone.runOutsideAngular(function () {\r\n                observer.next(_this._stable);\r\n                observer.complete();\r\n            });\r\n        });\r\n        var /** @type {?} */ isStable = new Observable(function (observer) {\r\n            // Create the subscription to onStable outside the Angular Zone so that\r\n            // the callback is run outside the Angular Zone.\r\n            var /** @type {?} */ stableSub;\r\n            _this._zone.runOutsideAngular(function () {\r\n                stableSub = _this._zone.onStable.subscribe(function () {\r\n                    NgZone.assertNotInAngularZone();\r\n                    // Check whether there are no pending macro/micro tasks in the next tick\r\n                    // to allow for NgZone to update the state.\r\n                    scheduleMicroTask(function () {\r\n                        if (!_this._stable && !_this._zone.hasPendingMacrotasks &&\r\n                            !_this._zone.hasPendingMicrotasks) {\r\n                            _this._stable = true;\r\n                            observer.next(true);\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n            var /** @type {?} */ unstableSub = _this._zone.onUnstable.subscribe(function () {\r\n                NgZone.assertInAngularZone();\r\n                if (_this._stable) {\r\n                    _this._stable = false;\r\n                    _this._zone.runOutsideAngular(function () { observer.next(false); });\r\n                }\r\n            });\r\n            return function () {\r\n                stableSub.unsubscribe();\r\n                unstableSub.unsubscribe();\r\n            };\r\n        });\r\n        (/** @type {?} */ (this)).isStable =\r\n            merge(isCurrentlyStable, isStable.pipe(share()));\r\n    }\r\n    /**\r\n     * Bootstrap a new component at the root level of the application.\r\n     *\r\n     * ### Bootstrap process\r\n     *\r\n     * When bootstrapping a new root component into an application, Angular mounts the\r\n     * specified application component onto DOM elements identified by the [componentType]'s\r\n     * selector and kicks off automatic change detection to finish initializing the component.\r\n     *\r\n     * Optionally, a component can be mounted onto a DOM element that does not match the\r\n     * [componentType]'s selector.\r\n     *\r\n     * ### Example\r\n     * {@example core/ts/platform/platform.ts region='longform'}\r\n     */\r\n    /**\r\n     * Bootstrap a new component at the root level of the application.\r\n     *\r\n     * ### Bootstrap process\r\n     *\r\n     * When bootstrapping a new root component into an application, Angular mounts the\r\n     * specified application component onto DOM elements identified by the [componentType]'s\r\n     * selector and kicks off automatic change detection to finish initializing the component.\r\n     *\r\n     * Optionally, a component can be mounted onto a DOM element that does not match the\r\n     * [componentType]'s selector.\r\n     *\r\n     * ### Example\r\n     * {\\@example core/ts/platform/platform.ts region='longform'}\r\n     * @template C\r\n     * @param {?} componentOrFactory\r\n     * @param {?=} rootSelectorOrNode\r\n     * @return {?}\r\n     */\r\n    ApplicationRef.prototype.bootstrap = /**\r\n     * Bootstrap a new component at the root level of the application.\r\n     *\r\n     * ### Bootstrap process\r\n     *\r\n     * When bootstrapping a new root component into an application, Angular mounts the\r\n     * specified application component onto DOM elements identified by the [componentType]'s\r\n     * selector and kicks off automatic change detection to finish initializing the component.\r\n     *\r\n     * Optionally, a component can be mounted onto a DOM element that does not match the\r\n     * [componentType]'s selector.\r\n     *\r\n     * ### Example\r\n     * {\\@example core/ts/platform/platform.ts region='longform'}\r\n     * @template C\r\n     * @param {?} componentOrFactory\r\n     * @param {?=} rootSelectorOrNode\r\n     * @return {?}\r\n     */\r\n    function (componentOrFactory, rootSelectorOrNode) {\r\n        var _this = this;\r\n        if (!this._initStatus.done) {\r\n            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\r\n        }\r\n        var /** @type {?} */ componentFactory;\r\n        if (componentOrFactory instanceof ComponentFactory) {\r\n            componentFactory = componentOrFactory;\r\n        }\r\n        else {\r\n            componentFactory =\r\n                /** @type {?} */ ((this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));\r\n        }\r\n        this.componentTypes.push(componentFactory.componentType);\r\n        // Create a factory associated with the current module if it's not bound to some other\r\n        var /** @type {?} */ ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?\r\n            null :\r\n            this._injector.get(NgModuleRef);\r\n        var /** @type {?} */ selectorOrNode = rootSelectorOrNode || componentFactory.selector;\r\n        var /** @type {?} */ compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\r\n        compRef.onDestroy(function () { _this._unloadComponent(compRef); });\r\n        var /** @type {?} */ testability = compRef.injector.get(Testability, null);\r\n        if (testability) {\r\n            compRef.injector.get(TestabilityRegistry)\r\n                .registerApplication(compRef.location.nativeElement, testability);\r\n        }\r\n        this._loadComponent(compRef);\r\n        if (isDevMode()) {\r\n            this._console.log(\"Angular is running in the development mode. Call enableProdMode() to enable the production mode.\");\r\n        }\r\n        return compRef;\r\n    };\r\n    /**\r\n     * Invoke this method to explicitly process change detection and its side-effects.\r\n     *\r\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\r\n     * further changes are detected. If additional changes are picked up during this second cycle,\r\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\r\n     * pass.\r\n     * In this case, Angular throws an error, since an Angular application can only have one change\r\n     * detection pass during which all change detection must complete.\r\n     */\r\n    /**\r\n     * Invoke this method to explicitly process change detection and its side-effects.\r\n     *\r\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\r\n     * further changes are detected. If additional changes are picked up during this second cycle,\r\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\r\n     * pass.\r\n     * In this case, Angular throws an error, since an Angular application can only have one change\r\n     * detection pass during which all change detection must complete.\r\n     * @return {?}\r\n     */\r\n    ApplicationRef.prototype.tick = /**\r\n     * Invoke this method to explicitly process change detection and its side-effects.\r\n     *\r\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\r\n     * further changes are detected. If additional changes are picked up during this second cycle,\r\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\r\n     * pass.\r\n     * In this case, Angular throws an error, since an Angular application can only have one change\r\n     * detection pass during which all change detection must complete.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (this._runningTick) {\r\n            throw new Error('ApplicationRef.tick is called recursively');\r\n        }\r\n        var /** @type {?} */ scope = ApplicationRef._tickScope();\r\n        try {\r\n            this._runningTick = true;\r\n            this._views.forEach(function (view) { return view.detectChanges(); });\r\n            if (this._enforceNoNewChanges) {\r\n                this._views.forEach(function (view) { return view.checkNoChanges(); });\r\n            }\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            // Attention: Don't rethrow as it could cancel subscriptions to Observables!\r\n            this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });\r\n        }\r\n        finally {\r\n            this._runningTick = false;\r\n            wtfLeave(scope);\r\n        }\r\n    };\r\n    /**\r\n     * Attaches a view so that it will be dirty checked.\r\n     * The view will be automatically detached when it is destroyed.\r\n     * This will throw if the view is already attached to a ViewContainer.\r\n     */\r\n    /**\r\n     * Attaches a view so that it will be dirty checked.\r\n     * The view will be automatically detached when it is destroyed.\r\n     * This will throw if the view is already attached to a ViewContainer.\r\n     * @param {?} viewRef\r\n     * @return {?}\r\n     */\r\n    ApplicationRef.prototype.attachView = /**\r\n     * Attaches a view so that it will be dirty checked.\r\n     * The view will be automatically detached when it is destroyed.\r\n     * This will throw if the view is already attached to a ViewContainer.\r\n     * @param {?} viewRef\r\n     * @return {?}\r\n     */\r\n    function (viewRef) {\r\n        var /** @type {?} */ view = (/** @type {?} */ (viewRef));\r\n        this._views.push(view);\r\n        view.attachToAppRef(this);\r\n    };\r\n    /**\r\n     * Detaches a view from dirty checking again.\r\n     */\r\n    /**\r\n     * Detaches a view from dirty checking again.\r\n     * @param {?} viewRef\r\n     * @return {?}\r\n     */\r\n    ApplicationRef.prototype.detachView = /**\r\n     * Detaches a view from dirty checking again.\r\n     * @param {?} viewRef\r\n     * @return {?}\r\n     */\r\n    function (viewRef) {\r\n        var /** @type {?} */ view = (/** @type {?} */ (viewRef));\r\n        remove(this._views, view);\r\n        view.detachFromAppRef();\r\n    };\r\n    /**\r\n     * @param {?} componentRef\r\n     * @return {?}\r\n     */\r\n    ApplicationRef.prototype._loadComponent = /**\r\n     * @param {?} componentRef\r\n     * @return {?}\r\n     */\r\n    function (componentRef) {\r\n        this.attachView(componentRef.hostView);\r\n        this.tick();\r\n        this.components.push(componentRef);\r\n        // Get the listeners lazily to prevent DI cycles.\r\n        var /** @type {?} */ listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\r\n        listeners.forEach(function (listener) { return listener(componentRef); });\r\n    };\r\n    /**\r\n     * @param {?} componentRef\r\n     * @return {?}\r\n     */\r\n    ApplicationRef.prototype._unloadComponent = /**\r\n     * @param {?} componentRef\r\n     * @return {?}\r\n     */\r\n    function (componentRef) {\r\n        this.detachView(componentRef.hostView);\r\n        remove(this.components, componentRef);\r\n    };\r\n    /** @internal */\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    ApplicationRef.prototype.ngOnDestroy = /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // TODO(alxhub): Dispose of the NgZone.\r\n        this._views.slice().forEach(function (view) { return view.destroy(); });\r\n    };\r\n    Object.defineProperty(ApplicationRef.prototype, \"viewCount\", {\r\n        /**\r\n         * Returns the number of attached views.\r\n         */\r\n        get: /**\r\n         * Returns the number of attached views.\r\n         * @return {?}\r\n         */\r\n        function () { return this._views.length; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * \\@internal\r\n     */\r\n    ApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');\r\n    ApplicationRef.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    ApplicationRef.ctorParameters = function () { return [\r\n        { type: NgZone, },\r\n        { type: Console, },\r\n        { type: Injector, },\r\n        { type: ErrorHandler, },\r\n        { type: ComponentFactoryResolver, },\r\n        { type: ApplicationInitStatus, },\r\n    ]; };\r\n    return ApplicationRef;\r\n}());\r\n/**\r\n * @template T\r\n * @param {?} list\r\n * @param {?} el\r\n * @return {?}\r\n */\r\nfunction remove(list, el) {\r\n    var /** @type {?} */ index = list.indexOf(el);\r\n    if (index > -1) {\r\n        list.splice(index, 1);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\r\n */\r\nvar RenderComponentType = /** @class */ (function () {\r\n    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\r\n        this.id = id;\r\n        this.templateUrl = templateUrl;\r\n        this.slotCount = slotCount;\r\n        this.encapsulation = encapsulation;\r\n        this.styles = styles;\r\n        this.animations = animations;\r\n    }\r\n    return RenderComponentType;\r\n}());\r\n/**\r\n * @deprecated Debug info is handeled internally in the view engine now.\r\n * @abstract\r\n */\r\nvar RenderDebugInfo = /** @class */ (function () {\r\n    function RenderDebugInfo() {\r\n    }\r\n    return RenderDebugInfo;\r\n}());\r\n/**\r\n * @deprecated Use the `Renderer2` instead.\r\n * @record\r\n */\r\n\r\n/**\r\n * @deprecated Use the `Renderer2` instead.\r\n * @abstract\r\n */\r\nvar Renderer = /** @class */ (function () {\r\n    function Renderer() {\r\n    }\r\n    return Renderer;\r\n}());\r\nvar Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\r\n/**\r\n * Injectable service that provides a low-level interface for modifying the UI.\r\n *\r\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\r\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\r\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\r\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\r\n *\r\n * If you are implementing a custom renderer, you must implement this interface.\r\n *\r\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\r\n *\r\n * @deprecated Use `RendererFactory2` instead.\r\n * @abstract\r\n */\r\nvar RootRenderer = /** @class */ (function () {\r\n    function RootRenderer() {\r\n    }\r\n    return RootRenderer;\r\n}());\r\n/**\r\n * \\@experimental\r\n * @record\r\n */\r\n\r\n/**\r\n * \\@experimental\r\n * @abstract\r\n */\r\nvar RendererFactory2 = /** @class */ (function () {\r\n    function RendererFactory2() {\r\n    }\r\n    return RendererFactory2;\r\n}());\r\n/** @enum {number} */\r\nvar RendererStyleFlags2 = {\r\n    Important: 1,\r\n    DashCase: 2,\r\n};\r\nRendererStyleFlags2[RendererStyleFlags2.Important] = \"Important\";\r\nRendererStyleFlags2[RendererStyleFlags2.DashCase] = \"DashCase\";\r\n/**\r\n * \\@experimental\r\n * @abstract\r\n */\r\nvar Renderer2 = /** @class */ (function () {\r\n    function Renderer2() {\r\n    }\r\n    return Renderer2;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A wrapper around a native element inside of a View.\r\n *\r\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\r\n * element.\r\n *\r\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\r\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\r\n * [Security Guide](http://g.co/ng/security).\r\n *\r\n * \\@stable\r\n * @template T\r\n */\r\nvar ElementRef = /** @class */ (function () {\r\n    function ElementRef(nativeElement) {\r\n        this.nativeElement = nativeElement;\r\n    }\r\n    return ElementRef;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Used to load ng module factories.\r\n * \\@stable\r\n * @abstract\r\n */\r\nvar NgModuleFactoryLoader = /** @class */ (function () {\r\n    function NgModuleFactoryLoader() {\r\n    }\r\n    return NgModuleFactoryLoader;\r\n}());\r\nvar moduleFactories = new Map();\r\n/**\r\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\r\n * \\@experimental\r\n * @param {?} id\r\n * @param {?} factory\r\n * @return {?}\r\n */\r\nfunction registerModuleFactory(id, factory) {\r\n    var /** @type {?} */ existing = moduleFactories.get(id);\r\n    if (existing) {\r\n        throw new Error(\"Duplicate module registered for \" + id + \" - \" + existing.moduleType.name + \" vs \" + factory.moduleType.name);\r\n    }\r\n    moduleFactories.set(id, factory);\r\n}\r\n/**\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\r\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\r\n * cannot be found.\r\n * \\@experimental\r\n * @param {?} id\r\n * @return {?}\r\n */\r\nfunction getModuleFactory(id) {\r\n    var /** @type {?} */ factory = moduleFactories.get(id);\r\n    if (!factory)\r\n        throw new Error(\"No module with ID \" + id + \" loaded\");\r\n    return factory;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An unmodifiable list of items that Angular keeps up to date when the state\r\n * of the application changes.\r\n *\r\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\r\n * provide.\r\n *\r\n * Implements an iterable interface, therefore it can be used in both ES6\r\n * javascript `for (var i of items)` loops as well as in Angular templates with\r\n * `*ngFor=\"let i of myList\"`.\r\n *\r\n * Changes can be observed by subscribing to the changes `Observable`.\r\n *\r\n * NOTE: In the future this class will implement an `Observable` interface.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))\r\n * ```typescript\r\n * \\@Component({...})\r\n * class Container {\r\n *   \\@ViewChildren(Item) items:QueryList<Item>;\r\n * }\r\n * ```\r\n * \\@stable\r\n * @template T\r\n */\r\nvar QueryList = /** @class */ (function () {\r\n    function QueryList() {\r\n        this.dirty = true;\r\n        this._results = [];\r\n        this.changes = new EventEmitter();\r\n        this.length = 0;\r\n    }\r\n    /**\r\n     * See\r\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n     */\r\n    /**\r\n     * See\r\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n     * @template U\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    QueryList.prototype.map = /**\r\n     * See\r\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n     * @template U\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) { return this._results.map(fn); };\r\n    /**\r\n     * See\r\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\r\n     */\r\n    /**\r\n     * See\r\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    QueryList.prototype.filter = /**\r\n     * See\r\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        return this._results.filter(fn);\r\n    };\r\n    /**\r\n     * See\r\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\r\n     */\r\n    /**\r\n     * See\r\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    QueryList.prototype.find = /**\r\n     * See\r\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        return this._results.find(fn);\r\n    };\r\n    /**\r\n     * See\r\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\r\n     */\r\n    /**\r\n     * See\r\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\r\n     * @template U\r\n     * @param {?} fn\r\n     * @param {?} init\r\n     * @return {?}\r\n     */\r\n    QueryList.prototype.reduce = /**\r\n     * See\r\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\r\n     * @template U\r\n     * @param {?} fn\r\n     * @param {?} init\r\n     * @return {?}\r\n     */\r\n    function (fn, init) {\r\n        return this._results.reduce(fn, init);\r\n    };\r\n    /**\r\n     * See\r\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n     */\r\n    /**\r\n     * See\r\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    QueryList.prototype.forEach = /**\r\n     * See\r\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) { this._results.forEach(fn); };\r\n    /**\r\n     * See\r\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\r\n     */\r\n    /**\r\n     * See\r\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    QueryList.prototype.some = /**\r\n     * See\r\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        return this._results.some(fn);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    QueryList.prototype.toArray = /**\r\n     * @return {?}\r\n     */\r\n    function () { return this._results.slice(); };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    QueryList.prototype[getSymbolIterator()] = /**\r\n     * @return {?}\r\n     */\r\n    function () { return (/** @type {?} */ (this._results))[getSymbolIterator()](); };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    QueryList.prototype.toString = /**\r\n     * @return {?}\r\n     */\r\n    function () { return this._results.toString(); };\r\n    /**\r\n     * @param {?} res\r\n     * @return {?}\r\n     */\r\n    QueryList.prototype.reset = /**\r\n     * @param {?} res\r\n     * @return {?}\r\n     */\r\n    function (res) {\r\n        this._results = flatten(res);\r\n        (/** @type {?} */ (this)).dirty = false;\r\n        (/** @type {?} */ (this)).length = this._results.length;\r\n        (/** @type {?} */ (this)).last = this._results[this.length - 1];\r\n        (/** @type {?} */ (this)).first = this._results[0];\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    QueryList.prototype.notifyOnChanges = /**\r\n     * @return {?}\r\n     */\r\n    function () { (/** @type {?} */ (this.changes)).emit(this); };\r\n    /** internal */\r\n    /**\r\n     * internal\r\n     * @return {?}\r\n     */\r\n    QueryList.prototype.setDirty = /**\r\n     * internal\r\n     * @return {?}\r\n     */\r\n    function () { (/** @type {?} */ (this)).dirty = true; };\r\n    /** internal */\r\n    /**\r\n     * internal\r\n     * @return {?}\r\n     */\r\n    QueryList.prototype.destroy = /**\r\n     * internal\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        (/** @type {?} */ (this.changes)).complete();\r\n        (/** @type {?} */ (this.changes)).unsubscribe();\r\n    };\r\n    return QueryList;\r\n}());\r\n/**\r\n * @template T\r\n * @param {?} list\r\n * @return {?}\r\n */\r\nfunction flatten(list) {\r\n    return list.reduce(function (flat, item) {\r\n        var /** @type {?} */ flatItem = Array.isArray(item) ? flatten(item) : item;\r\n        return (/** @type {?} */ (flat)).concat(flatItem);\r\n    }, []);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar _SEPARATOR = '#';\r\nvar FACTORY_CLASS_SUFFIX = 'NgFactory';\r\n/**\r\n * Configuration for SystemJsNgModuleLoader.\r\n * token.\r\n *\r\n * \\@experimental\r\n * @abstract\r\n */\r\nvar SystemJsNgModuleLoaderConfig = /** @class */ (function () {\r\n    function SystemJsNgModuleLoaderConfig() {\r\n    }\r\n    return SystemJsNgModuleLoaderConfig;\r\n}());\r\nvar DEFAULT_CONFIG = {\r\n    factoryPathPrefix: '',\r\n    factoryPathSuffix: '.ngfactory',\r\n};\r\n/**\r\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\r\n * \\@experimental\r\n */\r\nvar SystemJsNgModuleLoader = /** @class */ (function () {\r\n    function SystemJsNgModuleLoader(_compiler, config) {\r\n        this._compiler = _compiler;\r\n        this._config = config || DEFAULT_CONFIG;\r\n    }\r\n    /**\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    SystemJsNgModuleLoader.prototype.load = /**\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    function (path) {\r\n        var /** @type {?} */ offlineMode = this._compiler instanceof Compiler;\r\n        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\r\n    };\r\n    /**\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    SystemJsNgModuleLoader.prototype.loadAndCompile = /**\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    function (path) {\r\n        var _this = this;\r\n        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\r\n        if (exportName === undefined) {\r\n            exportName = 'default';\r\n        }\r\n        return System.import(module)\r\n            .then(function (module) { return module[exportName]; })\r\n            .then(function (type) { return checkNotEmpty(type, module, exportName); })\r\n            .then(function (type) { return _this._compiler.compileModuleAsync(type); });\r\n    };\r\n    /**\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    SystemJsNgModuleLoader.prototype.loadFactory = /**\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    function (path) {\r\n        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\r\n        var /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;\r\n        if (exportName === undefined) {\r\n            exportName = 'default';\r\n            factoryClassSuffix = '';\r\n        }\r\n        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\r\n            .then(function (module) { return module[exportName + factoryClassSuffix]; })\r\n            .then(function (factory) { return checkNotEmpty(factory, module, exportName); });\r\n    };\r\n    SystemJsNgModuleLoader.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    SystemJsNgModuleLoader.ctorParameters = function () { return [\r\n        { type: Compiler, },\r\n        { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },\r\n    ]; };\r\n    return SystemJsNgModuleLoader;\r\n}());\r\n/**\r\n * @param {?} value\r\n * @param {?} modulePath\r\n * @param {?} exportName\r\n * @return {?}\r\n */\r\nfunction checkNotEmpty(value, modulePath, exportName) {\r\n    if (!value) {\r\n        throw new Error(\"Cannot find '\" + exportName + \"' in '\" + modulePath + \"'\");\r\n    }\r\n    return value;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Represents an Embedded Template that can be used to instantiate Embedded Views.\r\n *\r\n * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<ng-template>` element\r\n * (or directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into\r\n * the constructor of the directive using the `TemplateRef` Token. Alternatively you can query for\r\n * the `TemplateRef` from a Component or a Directive via {\\@link Query}.\r\n *\r\n * To instantiate Embedded Views based on a Template, use {\\@link ViewContainerRef#\r\n * createEmbeddedView}, which will create the View and attach it to the View Container.\r\n * \\@stable\r\n * @abstract\r\n * @template C\r\n */\r\nvar TemplateRef = /** @class */ (function () {\r\n    function TemplateRef() {\r\n    }\r\n    return TemplateRef;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Represents a container where one or more Views can be attached.\r\n *\r\n * The container can contain two kinds of Views. Host Views, created by instantiating a\r\n * {\\@link Component} via {\\@link #createComponent}, and Embedded Views, created by instantiating an\r\n * {\\@link TemplateRef Embedded Template} via {\\@link #createEmbeddedView}.\r\n *\r\n * The location of the View Container within the containing View is specified by the Anchor\r\n * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only\r\n * have a single View Container.\r\n *\r\n * Root elements of Views attached to this container become siblings of the Anchor Element in\r\n * the Rendered View.\r\n *\r\n * To access a `ViewContainerRef` of an Element, you can either place a {\\@link Directive} injected\r\n * with `ViewContainerRef` on the Element, or you obtain it via a {\\@link ViewChild} query.\r\n * \\@stable\r\n * @abstract\r\n */\r\nvar ViewContainerRef = /** @class */ (function () {\r\n    function ViewContainerRef() {\r\n    }\r\n    return ViewContainerRef;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@stable\r\n * @abstract\r\n */\r\nvar ChangeDetectorRef = /** @class */ (function () {\r\n    function ChangeDetectorRef() {\r\n    }\r\n    return ChangeDetectorRef;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@stable\r\n * @abstract\r\n */\r\nvar ViewRef = /** @class */ (function (_super) {\r\n    __extends(ViewRef, _super);\r\n    function ViewRef() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return ViewRef;\r\n}(ChangeDetectorRef));\r\n/**\r\n * Represents an Angular View.\r\n *\r\n * <!-- TODO: move the next two paragraphs to the dev guide -->\r\n * A View is a fundamental building block of the application UI. It is the smallest grouping of\r\n * Elements which are created and destroyed together.\r\n *\r\n * Properties of elements in a View can change, but the structure (number and order) of elements in\r\n * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\r\n * removing nested Views via a {\\@link ViewContainerRef}. Each View can contain many View Containers.\r\n * <!-- /TODO -->\r\n *\r\n * ### Example\r\n *\r\n * Given this template...\r\n *\r\n * ```\r\n * Count: {{items.length}}\r\n * <ul>\r\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\r\n * </ul>\r\n * ```\r\n *\r\n * We have two {\\@link TemplateRef}s:\r\n *\r\n * Outer {\\@link TemplateRef}:\r\n * ```\r\n * Count: {{items.length}}\r\n * <ul>\r\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\r\n * </ul>\r\n * ```\r\n *\r\n * Inner {\\@link TemplateRef}:\r\n * ```\r\n *   <li>{{item}}</li>\r\n * ```\r\n *\r\n * Notice that the original template is broken down into two separate {\\@link TemplateRef}s.\r\n *\r\n * The outer/inner {\\@link TemplateRef}s are then assembled into views like so:\r\n *\r\n * ```\r\n * <!-- ViewRef: outer-0 -->\r\n * Count: 2\r\n * <ul>\r\n *   <ng-template view-container-ref></ng-template>\r\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\r\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\r\n * </ul>\r\n * <!-- /ViewRef: outer-0 -->\r\n * ```\r\n * \\@experimental\r\n * @abstract\r\n * @template C\r\n */\r\nvar EmbeddedViewRef = /** @class */ (function (_super) {\r\n    __extends(EmbeddedViewRef, _super);\r\n    function EmbeddedViewRef() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return EmbeddedViewRef;\r\n}(ViewRef));\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar EventListener = /** @class */ (function () {\r\n    function EventListener(name, callback) {\r\n        this.name = name;\r\n        this.callback = callback;\r\n    }\r\n    return EventListener;\r\n}());\r\n/**\r\n * \\@experimental All debugging apis are currently experimental.\r\n */\r\nvar DebugNode = /** @class */ (function () {\r\n    function DebugNode(nativeNode, parent, _debugContext) {\r\n        this._debugContext = _debugContext;\r\n        this.nativeNode = nativeNode;\r\n        if (parent && parent instanceof DebugElement) {\r\n            parent.addChild(this);\r\n        }\r\n        else {\r\n            this.parent = null;\r\n        }\r\n        this.listeners = [];\r\n    }\r\n    Object.defineProperty(DebugNode.prototype, \"injector\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return this._debugContext.injector; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugNode.prototype, \"componentInstance\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return this._debugContext.component; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugNode.prototype, \"context\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return this._debugContext.context; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugNode.prototype, \"references\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return this._debugContext.references; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugNode.prototype, \"providerTokens\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return this._debugContext.providerTokens; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DebugNode;\r\n}());\r\n/**\r\n * \\@experimental All debugging apis are currently experimental.\r\n */\r\nvar DebugElement = /** @class */ (function (_super) {\r\n    __extends(DebugElement, _super);\r\n    function DebugElement(nativeNode, parent, _debugContext) {\r\n        var _this = _super.call(this, nativeNode, parent, _debugContext) || this;\r\n        _this.properties = {};\r\n        _this.attributes = {};\r\n        _this.classes = {};\r\n        _this.styles = {};\r\n        _this.childNodes = [];\r\n        _this.nativeElement = nativeNode;\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {?} child\r\n     * @return {?}\r\n     */\r\n    DebugElement.prototype.addChild = /**\r\n     * @param {?} child\r\n     * @return {?}\r\n     */\r\n    function (child) {\r\n        if (child) {\r\n            this.childNodes.push(child);\r\n            child.parent = this;\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} child\r\n     * @return {?}\r\n     */\r\n    DebugElement.prototype.removeChild = /**\r\n     * @param {?} child\r\n     * @return {?}\r\n     */\r\n    function (child) {\r\n        var /** @type {?} */ childIndex = this.childNodes.indexOf(child);\r\n        if (childIndex !== -1) {\r\n            child.parent = null;\r\n            this.childNodes.splice(childIndex, 1);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} child\r\n     * @param {?} newChildren\r\n     * @return {?}\r\n     */\r\n    DebugElement.prototype.insertChildrenAfter = /**\r\n     * @param {?} child\r\n     * @param {?} newChildren\r\n     * @return {?}\r\n     */\r\n    function (child, newChildren) {\r\n        var _this = this;\r\n        var /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);\r\n        if (siblingIndex !== -1) {\r\n            (_a = this.childNodes).splice.apply(_a, [siblingIndex + 1, 0].concat(newChildren));\r\n            newChildren.forEach(function (c) {\r\n                if (c.parent) {\r\n                    c.parent.removeChild(c);\r\n                }\r\n                c.parent = _this;\r\n            });\r\n        }\r\n        var _a;\r\n    };\r\n    /**\r\n     * @param {?} refChild\r\n     * @param {?} newChild\r\n     * @return {?}\r\n     */\r\n    DebugElement.prototype.insertBefore = /**\r\n     * @param {?} refChild\r\n     * @param {?} newChild\r\n     * @return {?}\r\n     */\r\n    function (refChild, newChild) {\r\n        var /** @type {?} */ refIndex = this.childNodes.indexOf(refChild);\r\n        if (refIndex === -1) {\r\n            this.addChild(newChild);\r\n        }\r\n        else {\r\n            if (newChild.parent) {\r\n                newChild.parent.removeChild(newChild);\r\n            }\r\n            newChild.parent = this;\r\n            this.childNodes.splice(refIndex, 0, newChild);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} predicate\r\n     * @return {?}\r\n     */\r\n    DebugElement.prototype.query = /**\r\n     * @param {?} predicate\r\n     * @return {?}\r\n     */\r\n    function (predicate) {\r\n        var /** @type {?} */ results = this.queryAll(predicate);\r\n        return results[0] || null;\r\n    };\r\n    /**\r\n     * @param {?} predicate\r\n     * @return {?}\r\n     */\r\n    DebugElement.prototype.queryAll = /**\r\n     * @param {?} predicate\r\n     * @return {?}\r\n     */\r\n    function (predicate) {\r\n        var /** @type {?} */ matches = [];\r\n        _queryElementChildren(this, predicate, matches);\r\n        return matches;\r\n    };\r\n    /**\r\n     * @param {?} predicate\r\n     * @return {?}\r\n     */\r\n    DebugElement.prototype.queryAllNodes = /**\r\n     * @param {?} predicate\r\n     * @return {?}\r\n     */\r\n    function (predicate) {\r\n        var /** @type {?} */ matches = [];\r\n        _queryNodeChildren(this, predicate, matches);\r\n        return matches;\r\n    };\r\n    Object.defineProperty(DebugElement.prototype, \"children\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return /** @type {?} */ (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {?} eventName\r\n     * @param {?} eventObj\r\n     * @return {?}\r\n     */\r\n    DebugElement.prototype.triggerEventHandler = /**\r\n     * @param {?} eventName\r\n     * @param {?} eventObj\r\n     * @return {?}\r\n     */\r\n    function (eventName, eventObj) {\r\n        this.listeners.forEach(function (listener) {\r\n            if (listener.name == eventName) {\r\n                listener.callback(eventObj);\r\n            }\r\n        });\r\n    };\r\n    return DebugElement;\r\n}(DebugNode));\r\n/**\r\n * \\@experimental\r\n * @param {?} debugEls\r\n * @return {?}\r\n */\r\nfunction asNativeElements(debugEls) {\r\n    return debugEls.map(function (el) { return el.nativeElement; });\r\n}\r\n/**\r\n * @param {?} element\r\n * @param {?} predicate\r\n * @param {?} matches\r\n * @return {?}\r\n */\r\nfunction _queryElementChildren(element, predicate, matches) {\r\n    element.childNodes.forEach(function (node) {\r\n        if (node instanceof DebugElement) {\r\n            if (predicate(node)) {\r\n                matches.push(node);\r\n            }\r\n            _queryElementChildren(node, predicate, matches);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @param {?} parentNode\r\n * @param {?} predicate\r\n * @param {?} matches\r\n * @return {?}\r\n */\r\nfunction _queryNodeChildren(parentNode, predicate, matches) {\r\n    if (parentNode instanceof DebugElement) {\r\n        parentNode.childNodes.forEach(function (node) {\r\n            if (predicate(node)) {\r\n                matches.push(node);\r\n            }\r\n            if (node instanceof DebugElement) {\r\n                _queryNodeChildren(node, predicate, matches);\r\n            }\r\n        });\r\n    }\r\n}\r\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\r\nvar _nativeNodeToDebugNode = new Map();\r\n/**\r\n * \\@experimental\r\n * @param {?} nativeNode\r\n * @return {?}\r\n */\r\nfunction getDebugNode(nativeNode) {\r\n    return _nativeNodeToDebugNode.get(nativeNode) || null;\r\n}\r\n/**\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction indexDebugNode(node) {\r\n    _nativeNodeToDebugNode.set(node.nativeNode, node);\r\n}\r\n/**\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction removeDebugNodeFromIndex(node) {\r\n    _nativeNodeToDebugNode.delete(node.nativeNode);\r\n}\r\n/**\r\n * A boolean-valued function over a value, possibly including context information\r\n * regarding that value's position in an array.\r\n *\r\n * \\@experimental All debugging apis are currently experimental.\r\n * @record\r\n * @template T\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} a\r\n * @param {?} b\r\n * @return {?}\r\n */\r\nfunction devModeEqual(a, b) {\r\n    var /** @type {?} */ isListLikeIterableA = isListLikeIterable(a);\r\n    var /** @type {?} */ isListLikeIterableB = isListLikeIterable(b);\r\n    if (isListLikeIterableA && isListLikeIterableB) {\r\n        return areIterablesEqual(a, b, devModeEqual);\r\n    }\r\n    else {\r\n        var /** @type {?} */ isAObject = a && (typeof a === 'object' || typeof a === 'function');\r\n        var /** @type {?} */ isBObject = b && (typeof b === 'object' || typeof b === 'function');\r\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\r\n            return true;\r\n        }\r\n        else {\r\n            return looseIdentical(a, b);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\r\n * reference has not changed.\r\n *\r\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\r\n * is stored.\r\n *\r\n * Example:\r\n *\r\n * ```\r\n * if (this._latestValue === this._latestReturnedValue) {\r\n *    return this._latestReturnedValue;\r\n *  } else {\r\n *    this._latestReturnedValue = this._latestValue;\r\n *    return WrappedValue.wrap(this._latestValue); // this will force update\r\n *  }\r\n * ```\r\n * \\@stable\r\n */\r\nvar WrappedValue = /** @class */ (function () {\r\n    function WrappedValue(value) {\r\n        this.wrapped = value;\r\n    }\r\n    /** Creates a wrapped value. */\r\n    /**\r\n     * Creates a wrapped value.\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    WrappedValue.wrap = /**\r\n     * Creates a wrapped value.\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (value) { return new WrappedValue(value); };\r\n    /**\r\n     * Returns the underlying value of a wrapped value.\r\n     * Returns the given `value` when it is not wrapped.\r\n     **/\r\n    /**\r\n     * Returns the underlying value of a wrapped value.\r\n     * Returns the given `value` when it is not wrapped.\r\n     *\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    WrappedValue.unwrap = /**\r\n     * Returns the underlying value of a wrapped value.\r\n     * Returns the given `value` when it is not wrapped.\r\n     *\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; };\r\n    /** Returns true if `value` is a wrapped value. */\r\n    /**\r\n     * Returns true if `value` is a wrapped value.\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    WrappedValue.isWrapped = /**\r\n     * Returns true if `value` is a wrapped value.\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (value) { return value instanceof WrappedValue; };\r\n    return WrappedValue;\r\n}());\r\n/**\r\n * Represents a basic change from a previous to a new value.\r\n * \\@stable\r\n */\r\nvar SimpleChange = /** @class */ (function () {\r\n    function SimpleChange(previousValue, currentValue, firstChange) {\r\n        this.previousValue = previousValue;\r\n        this.currentValue = currentValue;\r\n        this.firstChange = firstChange;\r\n    }\r\n    /**\r\n     * Check whether the new value is the first value assigned.\r\n     */\r\n    /**\r\n     * Check whether the new value is the first value assigned.\r\n     * @return {?}\r\n     */\r\n    SimpleChange.prototype.isFirstChange = /**\r\n     * Check whether the new value is the first value assigned.\r\n     * @return {?}\r\n     */\r\n    function () { return this.firstChange; };\r\n    return SimpleChange;\r\n}());\r\n/**\r\n * @param {?} obj\r\n * @return {?}\r\n */\r\nfunction isListLikeIterable(obj) {\r\n    if (!isJsObject(obj))\r\n        return false;\r\n    return Array.isArray(obj) ||\r\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\r\n            // JS Map are iterables but return entries as [k, v]\r\n            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\r\n}\r\n/**\r\n * @param {?} a\r\n * @param {?} b\r\n * @param {?} comparator\r\n * @return {?}\r\n */\r\nfunction areIterablesEqual(a, b, comparator) {\r\n    var /** @type {?} */ iterator1 = a[getSymbolIterator()]();\r\n    var /** @type {?} */ iterator2 = b[getSymbolIterator()]();\r\n    while (true) {\r\n        var /** @type {?} */ item1 = iterator1.next();\r\n        var /** @type {?} */ item2 = iterator2.next();\r\n        if (item1.done && item2.done)\r\n            return true;\r\n        if (item1.done || item2.done)\r\n            return false;\r\n        if (!comparator(item1.value, item2.value))\r\n            return false;\r\n    }\r\n}\r\n/**\r\n * @param {?} obj\r\n * @param {?} fn\r\n * @return {?}\r\n */\r\nfunction iterateListLike(obj, fn) {\r\n    if (Array.isArray(obj)) {\r\n        for (var /** @type {?} */ i = 0; i < obj.length; i++) {\r\n            fn(obj[i]);\r\n        }\r\n    }\r\n    else {\r\n        var /** @type {?} */ iterator = obj[getSymbolIterator()]();\r\n        var /** @type {?} */ item = void 0;\r\n        while (!((item = iterator.next()).done)) {\r\n            fn(item.value);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} o\r\n * @return {?}\r\n */\r\nfunction isJsObject(o) {\r\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar DefaultIterableDifferFactory = /** @class */ (function () {\r\n    function DefaultIterableDifferFactory() {\r\n    }\r\n    /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDifferFactory.prototype.supports = /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    function (obj) { return isListLikeIterable(obj); };\r\n    /**\r\n     * @template V\r\n     * @param {?=} trackByFn\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDifferFactory.prototype.create = /**\r\n     * @template V\r\n     * @param {?=} trackByFn\r\n     * @return {?}\r\n     */\r\n    function (trackByFn) {\r\n        return new DefaultIterableDiffer(trackByFn);\r\n    };\r\n    return DefaultIterableDifferFactory;\r\n}());\r\nvar trackByIdentity = function (index, item) { return item; };\r\n/**\r\n * @deprecated v4.0.0 - Should not be part of public API.\r\n * @template V\r\n */\r\nvar DefaultIterableDiffer = /** @class */ (function () {\r\n    function DefaultIterableDiffer(trackByFn) {\r\n        this.length = 0;\r\n        this._linkedRecords = null;\r\n        this._unlinkedRecords = null;\r\n        this._previousItHead = null;\r\n        this._itHead = null;\r\n        this._itTail = null;\r\n        this._additionsHead = null;\r\n        this._additionsTail = null;\r\n        this._movesHead = null;\r\n        this._movesTail = null;\r\n        this._removalsHead = null;\r\n        this._removalsTail = null;\r\n        this._identityChangesHead = null;\r\n        this._identityChangesTail = null;\r\n        this._trackByFn = trackByFn || trackByIdentity;\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype.forEachItem = /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        var /** @type {?} */ record;\r\n        for (record = this._itHead; record !== null; record = record._next) {\r\n            fn(record);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype.forEachOperation = /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        var /** @type {?} */ nextIt = this._itHead;\r\n        var /** @type {?} */ nextRemove = this._removalsHead;\r\n        var /** @type {?} */ addRemoveOffset = 0;\r\n        var /** @type {?} */ moveOffsets = null;\r\n        while (nextIt || nextRemove) {\r\n            // Figure out which is the next record to process\r\n            // Order: remove, add, move\r\n            var /** @type {?} */ record = !nextRemove ||\r\n                nextIt && /** @type {?} */ ((nextIt.currentIndex)) < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? /** @type {?} */\r\n                ((nextIt)) :\r\n                nextRemove;\r\n            var /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\r\n            var /** @type {?} */ currentIndex = record.currentIndex;\r\n            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\r\n            if (record === nextRemove) {\r\n                addRemoveOffset--;\r\n                nextRemove = nextRemove._nextRemoved;\r\n            }\r\n            else {\r\n                nextIt = /** @type {?} */ ((nextIt))._next;\r\n                if (record.previousIndex == null) {\r\n                    addRemoveOffset++;\r\n                }\r\n                else {\r\n                    // INVARIANT:  currentIndex < previousIndex\r\n                    if (!moveOffsets)\r\n                        moveOffsets = [];\r\n                    var /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\r\n                    var /** @type {?} */ localCurrentIndex = /** @type {?} */ ((currentIndex)) - addRemoveOffset;\r\n                    if (localMovePreviousIndex != localCurrentIndex) {\r\n                        for (var /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {\r\n                            var /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\r\n                            var /** @type {?} */ index = offset + i;\r\n                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {\r\n                                moveOffsets[i] = offset + 1;\r\n                            }\r\n                        }\r\n                        var /** @type {?} */ previousIndex = record.previousIndex;\r\n                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\r\n                    }\r\n                }\r\n            }\r\n            if (adjPreviousIndex !== currentIndex) {\r\n                fn(record, adjPreviousIndex, currentIndex);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype.forEachPreviousItem = /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        var /** @type {?} */ record;\r\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\r\n            fn(record);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype.forEachAddedItem = /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        var /** @type {?} */ record;\r\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\r\n            fn(record);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype.forEachMovedItem = /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        var /** @type {?} */ record;\r\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\r\n            fn(record);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype.forEachRemovedItem = /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        var /** @type {?} */ record;\r\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\r\n            fn(record);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype.forEachIdentityChange = /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        var /** @type {?} */ record;\r\n        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\r\n            fn(record);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} collection\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype.diff = /**\r\n     * @param {?} collection\r\n     * @return {?}\r\n     */\r\n    function (collection) {\r\n        if (collection == null)\r\n            collection = [];\r\n        if (!isListLikeIterable(collection)) {\r\n            throw new Error(\"Error trying to diff '\" + stringify(collection) + \"'. Only arrays and iterables are allowed\");\r\n        }\r\n        if (this.check(collection)) {\r\n            return this;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype.onDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () { };\r\n    /**\r\n     * @param {?} collection\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype.check = /**\r\n     * @param {?} collection\r\n     * @return {?}\r\n     */\r\n    function (collection) {\r\n        var _this = this;\r\n        this._reset();\r\n        var /** @type {?} */ record = this._itHead;\r\n        var /** @type {?} */ mayBeDirty = false;\r\n        var /** @type {?} */ index;\r\n        var /** @type {?} */ item;\r\n        var /** @type {?} */ itemTrackBy;\r\n        if (Array.isArray(collection)) {\r\n            (/** @type {?} */ (this)).length = collection.length;\r\n            for (var /** @type {?} */ index_1 = 0; index_1 < this.length; index_1++) {\r\n                item = collection[index_1];\r\n                itemTrackBy = this._trackByFn(index_1, item);\r\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\r\n                    record = this._mismatch(record, item, itemTrackBy, index_1);\r\n                    mayBeDirty = true;\r\n                }\r\n                else {\r\n                    if (mayBeDirty) {\r\n                        // TODO(misko): can we limit this to duplicates only?\r\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);\r\n                    }\r\n                    if (!looseIdentical(record.item, item))\r\n                        this._addIdentityChange(record, item);\r\n                }\r\n                record = record._next;\r\n            }\r\n        }\r\n        else {\r\n            index = 0;\r\n            iterateListLike(collection, function (item) {\r\n                itemTrackBy = _this._trackByFn(index, item);\r\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\r\n                    record = _this._mismatch(record, item, itemTrackBy, index);\r\n                    mayBeDirty = true;\r\n                }\r\n                else {\r\n                    if (mayBeDirty) {\r\n                        // TODO(misko): can we limit this to duplicates only?\r\n                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);\r\n                    }\r\n                    if (!looseIdentical(record.item, item))\r\n                        _this._addIdentityChange(record, item);\r\n                }\r\n                record = record._next;\r\n                index++;\r\n            });\r\n            (/** @type {?} */ (this)).length = index;\r\n        }\r\n        this._truncate(record);\r\n        (/** @type {?} */ (this)).collection = collection;\r\n        return this.isDirty;\r\n    };\r\n    Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\r\n        /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\r\n         * changes.\r\n         */\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._additionsHead !== null || this._movesHead !== null ||\r\n                this._removalsHead !== null || this._identityChangesHead !== null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Reset the state of the change objects to show no changes. This means set previousKey to\r\n     * currentKey, and clear all of the queues (additions, moves, removals).\r\n     * Set the previousIndexes of moved and added items to their currentIndexes\r\n     * Reset the list of additions, moves and removals\r\n     *\r\n     * @internal\r\n     */\r\n    /**\r\n     * Reset the state of the change objects to show no changes. This means set previousKey to\r\n     * currentKey, and clear all of the queues (additions, moves, removals).\r\n     * Set the previousIndexes of moved and added items to their currentIndexes\r\n     * Reset the list of additions, moves and removals\r\n     *\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype._reset = /**\r\n     * Reset the state of the change objects to show no changes. This means set previousKey to\r\n     * currentKey, and clear all of the queues (additions, moves, removals).\r\n     * Set the previousIndexes of moved and added items to their currentIndexes\r\n     * Reset the list of additions, moves and removals\r\n     *\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.isDirty) {\r\n            var /** @type {?} */ record = void 0;\r\n            var /** @type {?} */ nextRecord = void 0;\r\n            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\r\n                record._nextPrevious = record._next;\r\n            }\r\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\r\n                record.previousIndex = record.currentIndex;\r\n            }\r\n            this._additionsHead = this._additionsTail = null;\r\n            for (record = this._movesHead; record !== null; record = nextRecord) {\r\n                record.previousIndex = record.currentIndex;\r\n                nextRecord = record._nextMoved;\r\n            }\r\n            this._movesHead = this._movesTail = null;\r\n            this._removalsHead = this._removalsTail = null;\r\n            this._identityChangesHead = this._identityChangesTail = null;\r\n            // todo(vicb) when assert gets supported\r\n            // assert(!this.isDirty);\r\n        }\r\n    };\r\n    /**\r\n     * This is the core function which handles differences between collections.\r\n     *\r\n     * - `record` is the record which we saw at this position last time. If null then it is a new\r\n     *   item.\r\n     * - `item` is the current item in the collection\r\n     * - `index` is the position of the item in the collection\r\n     *\r\n     * @internal\r\n     */\r\n    /**\r\n     * This is the core function which handles differences between collections.\r\n     *\r\n     * - `record` is the record which we saw at this position last time. If null then it is a new\r\n     *   item.\r\n     * - `item` is the current item in the collection\r\n     * - `index` is the position of the item in the collection\r\n     *\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} item\r\n     * @param {?} itemTrackBy\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype._mismatch = /**\r\n     * This is the core function which handles differences between collections.\r\n     *\r\n     * - `record` is the record which we saw at this position last time. If null then it is a new\r\n     *   item.\r\n     * - `item` is the current item in the collection\r\n     * - `index` is the position of the item in the collection\r\n     *\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} item\r\n     * @param {?} itemTrackBy\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    function (record, item, itemTrackBy, index) {\r\n        // The previous record after which we will append the current one.\r\n        var /** @type {?} */ previousRecord;\r\n        if (record === null) {\r\n            previousRecord = this._itTail;\r\n        }\r\n        else {\r\n            previousRecord = record._prev;\r\n            // Remove the record from the collection since we know it does not match the item.\r\n            this._remove(record);\r\n        }\r\n        // Attempt to see if we have seen the item before.\r\n        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\r\n        if (record !== null) {\r\n            // We have seen this before, we need to move it forward in the collection.\r\n            // But first we need to check if identity changed, so we can update in view if necessary\r\n            if (!looseIdentical(record.item, item))\r\n                this._addIdentityChange(record, item);\r\n            this._moveAfter(record, previousRecord, index);\r\n        }\r\n        else {\r\n            // Never seen it, check evicted list.\r\n            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\r\n            if (record !== null) {\r\n                // It is an item which we have evicted earlier: reinsert it back into the list.\r\n                // But first we need to check if identity changed, so we can update in view if necessary\r\n                if (!looseIdentical(record.item, item))\r\n                    this._addIdentityChange(record, item);\r\n                this._reinsertAfter(record, previousRecord, index);\r\n            }\r\n            else {\r\n                // It is a new item: add it.\r\n                record =\r\n                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\r\n            }\r\n        }\r\n        return record;\r\n    };\r\n    /**\r\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\r\n     *\r\n     * Use case: `[a, a]` => `[b, a, a]`\r\n     *\r\n     * If we did not have this check then the insertion of `b` would:\r\n     *   1) evict first `a`\r\n     *   2) insert `b` at `0` index.\r\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\r\n     *   3) reinsert `a` at index 2. <-- this is wrong!\r\n     *\r\n     * The correct behavior is:\r\n     *   1) evict first `a`\r\n     *   2) insert `b` at `0` index.\r\n     *   3) reinsert `a` at index 1.\r\n     *   3) move `a` at from `1` to `2`.\r\n     *\r\n     *\r\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\r\n     * have already been removed:\r\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\r\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\r\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\r\n     * at the end.\r\n     *\r\n     * @internal\r\n     */\r\n    /**\r\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\r\n     *\r\n     * Use case: `[a, a]` => `[b, a, a]`\r\n     *\r\n     * If we did not have this check then the insertion of `b` would:\r\n     *   1) evict first `a`\r\n     *   2) insert `b` at `0` index.\r\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\r\n     *   3) reinsert `a` at index 2. <-- this is wrong!\r\n     *\r\n     * The correct behavior is:\r\n     *   1) evict first `a`\r\n     *   2) insert `b` at `0` index.\r\n     *   3) reinsert `a` at index 1.\r\n     *   3) move `a` at from `1` to `2`.\r\n     *\r\n     *\r\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\r\n     * have already been removed:\r\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\r\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\r\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\r\n     * at the end.\r\n     *\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} item\r\n     * @param {?} itemTrackBy\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype._verifyReinsertion = /**\r\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\r\n     *\r\n     * Use case: `[a, a]` => `[b, a, a]`\r\n     *\r\n     * If we did not have this check then the insertion of `b` would:\r\n     *   1) evict first `a`\r\n     *   2) insert `b` at `0` index.\r\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\r\n     *   3) reinsert `a` at index 2. <-- this is wrong!\r\n     *\r\n     * The correct behavior is:\r\n     *   1) evict first `a`\r\n     *   2) insert `b` at `0` index.\r\n     *   3) reinsert `a` at index 1.\r\n     *   3) move `a` at from `1` to `2`.\r\n     *\r\n     *\r\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\r\n     * have already been removed:\r\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\r\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\r\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\r\n     * at the end.\r\n     *\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} item\r\n     * @param {?} itemTrackBy\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    function (record, item, itemTrackBy, index) {\r\n        var /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\r\n        if (reinsertRecord !== null) {\r\n            record = this._reinsertAfter(reinsertRecord, /** @type {?} */ ((record._prev)), index);\r\n        }\r\n        else if (record.currentIndex != index) {\r\n            record.currentIndex = index;\r\n            this._addToMoves(record, index);\r\n        }\r\n        return record;\r\n    };\r\n    /**\r\n     * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\r\n     *\r\n     * - `record` The first excess {@link IterableChangeRecord_}.\r\n     *\r\n     * @internal\r\n     */\r\n    /**\r\n     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\r\n     *\r\n     * - `record` The first excess {\\@link IterableChangeRecord_}.\r\n     *\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype._truncate = /**\r\n     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\r\n     *\r\n     * - `record` The first excess {\\@link IterableChangeRecord_}.\r\n     *\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    function (record) {\r\n        // Anything after that needs to be removed;\r\n        while (record !== null) {\r\n            var /** @type {?} */ nextRecord = record._next;\r\n            this._addToRemovals(this._unlink(record));\r\n            record = nextRecord;\r\n        }\r\n        if (this._unlinkedRecords !== null) {\r\n            this._unlinkedRecords.clear();\r\n        }\r\n        if (this._additionsTail !== null) {\r\n            this._additionsTail._nextAdded = null;\r\n        }\r\n        if (this._movesTail !== null) {\r\n            this._movesTail._nextMoved = null;\r\n        }\r\n        if (this._itTail !== null) {\r\n            this._itTail._next = null;\r\n        }\r\n        if (this._removalsTail !== null) {\r\n            this._removalsTail._nextRemoved = null;\r\n        }\r\n        if (this._identityChangesTail !== null) {\r\n            this._identityChangesTail._nextIdentityChange = null;\r\n        }\r\n    };\r\n    /** @internal */\r\n    /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} prevRecord\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype._reinsertAfter = /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} prevRecord\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    function (record, prevRecord, index) {\r\n        if (this._unlinkedRecords !== null) {\r\n            this._unlinkedRecords.remove(record);\r\n        }\r\n        var /** @type {?} */ prev = record._prevRemoved;\r\n        var /** @type {?} */ next = record._nextRemoved;\r\n        if (prev === null) {\r\n            this._removalsHead = next;\r\n        }\r\n        else {\r\n            prev._nextRemoved = next;\r\n        }\r\n        if (next === null) {\r\n            this._removalsTail = prev;\r\n        }\r\n        else {\r\n            next._prevRemoved = prev;\r\n        }\r\n        this._insertAfter(record, prevRecord, index);\r\n        this._addToMoves(record, index);\r\n        return record;\r\n    };\r\n    /** @internal */\r\n    /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} prevRecord\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype._moveAfter = /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} prevRecord\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    function (record, prevRecord, index) {\r\n        this._unlink(record);\r\n        this._insertAfter(record, prevRecord, index);\r\n        this._addToMoves(record, index);\r\n        return record;\r\n    };\r\n    /** @internal */\r\n    /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} prevRecord\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype._addAfter = /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} prevRecord\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    function (record, prevRecord, index) {\r\n        this._insertAfter(record, prevRecord, index);\r\n        if (this._additionsTail === null) {\r\n            // todo(vicb)\r\n            // assert(this._additionsHead === null);\r\n            this._additionsTail = this._additionsHead = record;\r\n        }\r\n        else {\r\n            // todo(vicb)\r\n            // assert(_additionsTail._nextAdded === null);\r\n            // assert(record._nextAdded === null);\r\n            this._additionsTail = this._additionsTail._nextAdded = record;\r\n        }\r\n        return record;\r\n    };\r\n    /** @internal */\r\n    /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} prevRecord\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype._insertAfter = /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} prevRecord\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    function (record, prevRecord, index) {\r\n        // todo(vicb)\r\n        // assert(record != prevRecord);\r\n        // assert(record._next === null);\r\n        // assert(record._prev === null);\r\n        var /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;\r\n        // todo(vicb)\r\n        // assert(next != record);\r\n        // assert(prevRecord != record);\r\n        record._next = next;\r\n        record._prev = prevRecord;\r\n        if (next === null) {\r\n            this._itTail = record;\r\n        }\r\n        else {\r\n            next._prev = record;\r\n        }\r\n        if (prevRecord === null) {\r\n            this._itHead = record;\r\n        }\r\n        else {\r\n            prevRecord._next = record;\r\n        }\r\n        if (this._linkedRecords === null) {\r\n            this._linkedRecords = new _DuplicateMap();\r\n        }\r\n        this._linkedRecords.put(record);\r\n        record.currentIndex = index;\r\n        return record;\r\n    };\r\n    /** @internal */\r\n    /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype._remove = /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    function (record) {\r\n        return this._addToRemovals(this._unlink(record));\r\n    };\r\n    /** @internal */\r\n    /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype._unlink = /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    function (record) {\r\n        if (this._linkedRecords !== null) {\r\n            this._linkedRecords.remove(record);\r\n        }\r\n        var /** @type {?} */ prev = record._prev;\r\n        var /** @type {?} */ next = record._next;\r\n        // todo(vicb)\r\n        // assert((record._prev = null) === null);\r\n        // assert((record._next = null) === null);\r\n        if (prev === null) {\r\n            this._itHead = next;\r\n        }\r\n        else {\r\n            prev._next = next;\r\n        }\r\n        if (next === null) {\r\n            this._itTail = prev;\r\n        }\r\n        else {\r\n            next._prev = prev;\r\n        }\r\n        return record;\r\n    };\r\n    /** @internal */\r\n    /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} toIndex\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype._addToMoves = /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} toIndex\r\n     * @return {?}\r\n     */\r\n    function (record, toIndex) {\r\n        // todo(vicb)\r\n        // assert(record._nextMoved === null);\r\n        if (record.previousIndex === toIndex) {\r\n            return record;\r\n        }\r\n        if (this._movesTail === null) {\r\n            // todo(vicb)\r\n            // assert(_movesHead === null);\r\n            this._movesTail = this._movesHead = record;\r\n        }\r\n        else {\r\n            // todo(vicb)\r\n            // assert(_movesTail._nextMoved === null);\r\n            this._movesTail = this._movesTail._nextMoved = record;\r\n        }\r\n        return record;\r\n    };\r\n    /**\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype._addToRemovals = /**\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    function (record) {\r\n        if (this._unlinkedRecords === null) {\r\n            this._unlinkedRecords = new _DuplicateMap();\r\n        }\r\n        this._unlinkedRecords.put(record);\r\n        record.currentIndex = null;\r\n        record._nextRemoved = null;\r\n        if (this._removalsTail === null) {\r\n            // todo(vicb)\r\n            // assert(_removalsHead === null);\r\n            this._removalsTail = this._removalsHead = record;\r\n            record._prevRemoved = null;\r\n        }\r\n        else {\r\n            // todo(vicb)\r\n            // assert(_removalsTail._nextRemoved === null);\r\n            // assert(record._nextRemoved === null);\r\n            record._prevRemoved = this._removalsTail;\r\n            this._removalsTail = this._removalsTail._nextRemoved = record;\r\n        }\r\n        return record;\r\n    };\r\n    /** @internal */\r\n    /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\r\n    DefaultIterableDiffer.prototype._addIdentityChange = /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\r\n    function (record, item) {\r\n        record.item = item;\r\n        if (this._identityChangesTail === null) {\r\n            this._identityChangesTail = this._identityChangesHead = record;\r\n        }\r\n        else {\r\n            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\r\n        }\r\n        return record;\r\n    };\r\n    return DefaultIterableDiffer;\r\n}());\r\n/**\r\n * \\@stable\r\n * @template V\r\n */\r\nvar IterableChangeRecord_ = /** @class */ (function () {\r\n    function IterableChangeRecord_(item, trackById) {\r\n        this.item = item;\r\n        this.trackById = trackById;\r\n        this.currentIndex = null;\r\n        this.previousIndex = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextPrevious = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._prev = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._next = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._prevDup = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextDup = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._prevRemoved = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextRemoved = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextAdded = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextMoved = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextIdentityChange = null;\r\n    }\r\n    return IterableChangeRecord_;\r\n}());\r\n/**\r\n * @template V\r\n */\r\nvar _DuplicateItemRecordList = /** @class */ (function () {\r\n    function _DuplicateItemRecordList() {\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._head = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._tail = null;\r\n    }\r\n    /**\r\n     * Append the record to the list of duplicates.\r\n     *\r\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\r\n     */\r\n    /**\r\n     * Append the record to the list of duplicates.\r\n     *\r\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    _DuplicateItemRecordList.prototype.add = /**\r\n     * Append the record to the list of duplicates.\r\n     *\r\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    function (record) {\r\n        if (this._head === null) {\r\n            this._head = this._tail = record;\r\n            record._nextDup = null;\r\n            record._prevDup = null;\r\n        }\r\n        else {\r\n            /** @type {?} */ ((\r\n            // todo(vicb)\r\n            // assert(record.item ==  _head.item ||\r\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\r\n            this._tail))._nextDup = record;\r\n            record._prevDup = this._tail;\r\n            record._nextDup = null;\r\n            this._tail = record;\r\n        }\r\n    };\r\n    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\r\n    // IterableChangeRecord_.currentIndex >= atOrAfterIndex\r\n    /**\r\n     * @param {?} trackById\r\n     * @param {?} atOrAfterIndex\r\n     * @return {?}\r\n     */\r\n    _DuplicateItemRecordList.prototype.get = /**\r\n     * @param {?} trackById\r\n     * @param {?} atOrAfterIndex\r\n     * @return {?}\r\n     */\r\n    function (trackById, atOrAfterIndex) {\r\n        var /** @type {?} */ record;\r\n        for (record = this._head; record !== null; record = record._nextDup) {\r\n            if ((atOrAfterIndex === null || atOrAfterIndex <= /** @type {?} */ ((record.currentIndex))) &&\r\n                looseIdentical(record.trackById, trackById)) {\r\n                return record;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Remove one {@link IterableChangeRecord_} from the list of duplicates.\r\n     *\r\n     * Returns whether the list of duplicates is empty.\r\n     */\r\n    /**\r\n     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\r\n     *\r\n     * Returns whether the list of duplicates is empty.\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    _DuplicateItemRecordList.prototype.remove = /**\r\n     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\r\n     *\r\n     * Returns whether the list of duplicates is empty.\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    function (record) {\r\n        // todo(vicb)\r\n        // assert(() {\r\n        //  // verify that the record being removed is in the list.\r\n        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\r\n        //    if (identical(cursor, record)) return true;\r\n        //  }\r\n        //  return false;\r\n        //});\r\n        var /** @type {?} */ prev = record._prevDup;\r\n        var /** @type {?} */ next = record._nextDup;\r\n        if (prev === null) {\r\n            this._head = next;\r\n        }\r\n        else {\r\n            prev._nextDup = next;\r\n        }\r\n        if (next === null) {\r\n            this._tail = prev;\r\n        }\r\n        else {\r\n            next._prevDup = prev;\r\n        }\r\n        return this._head === null;\r\n    };\r\n    return _DuplicateItemRecordList;\r\n}());\r\n/**\r\n * @template V\r\n */\r\nvar _DuplicateMap = /** @class */ (function () {\r\n    function _DuplicateMap() {\r\n        this.map = new Map();\r\n    }\r\n    /**\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    _DuplicateMap.prototype.put = /**\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    function (record) {\r\n        var /** @type {?} */ key = record.trackById;\r\n        var /** @type {?} */ duplicates = this.map.get(key);\r\n        if (!duplicates) {\r\n            duplicates = new _DuplicateItemRecordList();\r\n            this.map.set(key, duplicates);\r\n        }\r\n        duplicates.add(record);\r\n    };\r\n    /**\r\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\r\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\r\n     *\r\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\r\n     * have any more `a`s needs to return the second `a`.\r\n     */\r\n    /**\r\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\r\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\r\n     *\r\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\r\n     * have any more `a`s needs to return the second `a`.\r\n     * @param {?} trackById\r\n     * @param {?} atOrAfterIndex\r\n     * @return {?}\r\n     */\r\n    _DuplicateMap.prototype.get = /**\r\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\r\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\r\n     *\r\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\r\n     * have any more `a`s needs to return the second `a`.\r\n     * @param {?} trackById\r\n     * @param {?} atOrAfterIndex\r\n     * @return {?}\r\n     */\r\n    function (trackById, atOrAfterIndex) {\r\n        var /** @type {?} */ key = trackById;\r\n        var /** @type {?} */ recordList = this.map.get(key);\r\n        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\r\n    };\r\n    /**\r\n     * Removes a {@link IterableChangeRecord_} from the list of duplicates.\r\n     *\r\n     * The list of duplicates also is removed from the map if it gets empty.\r\n     */\r\n    /**\r\n     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\r\n     *\r\n     * The list of duplicates also is removed from the map if it gets empty.\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    _DuplicateMap.prototype.remove = /**\r\n     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\r\n     *\r\n     * The list of duplicates also is removed from the map if it gets empty.\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    function (record) {\r\n        var /** @type {?} */ key = record.trackById;\r\n        var /** @type {?} */ recordList = /** @type {?} */ ((this.map.get(key)));\r\n        // Remove the list of duplicates when it gets empty\r\n        if (recordList.remove(record)) {\r\n            this.map.delete(key);\r\n        }\r\n        return record;\r\n    };\r\n    Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return this.map.size === 0; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _DuplicateMap.prototype.clear = /**\r\n     * @return {?}\r\n     */\r\n    function () { this.map.clear(); };\r\n    return _DuplicateMap;\r\n}());\r\n/**\r\n * @param {?} item\r\n * @param {?} addRemoveOffset\r\n * @param {?} moveOffsets\r\n * @return {?}\r\n */\r\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\r\n    var /** @type {?} */ previousIndex = item.previousIndex;\r\n    if (previousIndex === null)\r\n        return previousIndex;\r\n    var /** @type {?} */ moveOffset = 0;\r\n    if (moveOffsets && previousIndex < moveOffsets.length) {\r\n        moveOffset = moveOffsets[previousIndex];\r\n    }\r\n    return previousIndex + addRemoveOffset + moveOffset;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @template K, V\r\n */\r\nvar DefaultKeyValueDifferFactory = /** @class */ (function () {\r\n    function DefaultKeyValueDifferFactory() {\r\n    }\r\n    /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    DefaultKeyValueDifferFactory.prototype.supports = /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    function (obj) { return obj instanceof Map || isJsObject(obj); };\r\n    /**\r\n     * @template K, V\r\n     * @return {?}\r\n     */\r\n    DefaultKeyValueDifferFactory.prototype.create = /**\r\n     * @template K, V\r\n     * @return {?}\r\n     */\r\n    function () { return new DefaultKeyValueDiffer(); };\r\n    return DefaultKeyValueDifferFactory;\r\n}());\r\n/**\r\n * @template K, V\r\n */\r\nvar DefaultKeyValueDiffer = /** @class */ (function () {\r\n    function DefaultKeyValueDiffer() {\r\n        this._records = new Map();\r\n        this._mapHead = null;\r\n        this._appendAfter = null;\r\n        this._previousMapHead = null;\r\n        this._changesHead = null;\r\n        this._changesTail = null;\r\n        this._additionsHead = null;\r\n        this._additionsTail = null;\r\n        this._removalsHead = null;\r\n        this._removalsTail = null;\r\n    }\r\n    Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._additionsHead !== null || this._changesHead !== null ||\r\n                this._removalsHead !== null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    DefaultKeyValueDiffer.prototype.forEachItem = /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        var /** @type {?} */ record;\r\n        for (record = this._mapHead; record !== null; record = record._next) {\r\n            fn(record);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    DefaultKeyValueDiffer.prototype.forEachPreviousItem = /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        var /** @type {?} */ record;\r\n        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\r\n            fn(record);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    DefaultKeyValueDiffer.prototype.forEachChangedItem = /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        var /** @type {?} */ record;\r\n        for (record = this._changesHead; record !== null; record = record._nextChanged) {\r\n            fn(record);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    DefaultKeyValueDiffer.prototype.forEachAddedItem = /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        var /** @type {?} */ record;\r\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\r\n            fn(record);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    DefaultKeyValueDiffer.prototype.forEachRemovedItem = /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        var /** @type {?} */ record;\r\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\r\n            fn(record);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?=} map\r\n     * @return {?}\r\n     */\r\n    DefaultKeyValueDiffer.prototype.diff = /**\r\n     * @param {?=} map\r\n     * @return {?}\r\n     */\r\n    function (map) {\r\n        if (!map) {\r\n            map = new Map();\r\n        }\r\n        else if (!(map instanceof Map || isJsObject(map))) {\r\n            throw new Error(\"Error trying to diff '\" + stringify(map) + \"'. Only maps and objects are allowed\");\r\n        }\r\n        return this.check(map) ? this : null;\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    DefaultKeyValueDiffer.prototype.onDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () { };\r\n    /**\r\n     * Check the current state of the map vs the previous.\r\n     * The algorithm is optimised for when the keys do no change.\r\n     */\r\n    /**\r\n     * Check the current state of the map vs the previous.\r\n     * The algorithm is optimised for when the keys do no change.\r\n     * @param {?} map\r\n     * @return {?}\r\n     */\r\n    DefaultKeyValueDiffer.prototype.check = /**\r\n     * Check the current state of the map vs the previous.\r\n     * The algorithm is optimised for when the keys do no change.\r\n     * @param {?} map\r\n     * @return {?}\r\n     */\r\n    function (map) {\r\n        var _this = this;\r\n        this._reset();\r\n        var /** @type {?} */ insertBefore = this._mapHead;\r\n        this._appendAfter = null;\r\n        this._forEach(map, function (value, key) {\r\n            if (insertBefore && insertBefore.key === key) {\r\n                _this._maybeAddToChanges(insertBefore, value);\r\n                _this._appendAfter = insertBefore;\r\n                insertBefore = insertBefore._next;\r\n            }\r\n            else {\r\n                var /** @type {?} */ record = _this._getOrCreateRecordForKey(key, value);\r\n                insertBefore = _this._insertBeforeOrAppend(insertBefore, record);\r\n            }\r\n        });\r\n        // Items remaining at the end of the list have been deleted\r\n        if (insertBefore) {\r\n            if (insertBefore._prev) {\r\n                insertBefore._prev._next = null;\r\n            }\r\n            this._removalsHead = insertBefore;\r\n            for (var /** @type {?} */ record = insertBefore; record !== null; record = record._nextRemoved) {\r\n                if (record === this._mapHead) {\r\n                    this._mapHead = null;\r\n                }\r\n                this._records.delete(record.key);\r\n                record._nextRemoved = record._next;\r\n                record.previousValue = record.currentValue;\r\n                record.currentValue = null;\r\n                record._prev = null;\r\n                record._next = null;\r\n            }\r\n        }\r\n        // Make sure tails have no next records from previous runs\r\n        if (this._changesTail)\r\n            this._changesTail._nextChanged = null;\r\n        if (this._additionsTail)\r\n            this._additionsTail._nextAdded = null;\r\n        return this.isDirty;\r\n    };\r\n    /**\r\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\r\n     *\r\n     * Notes:\r\n     * - This method appends at `this._appendAfter`,\r\n     * - This method updates `this._appendAfter`,\r\n     * - The return value is the new value for the insertion pointer.\r\n     * @param {?} before\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = /**\r\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\r\n     *\r\n     * Notes:\r\n     * - This method appends at `this._appendAfter`,\r\n     * - This method updates `this._appendAfter`,\r\n     * - The return value is the new value for the insertion pointer.\r\n     * @param {?} before\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    function (before, record) {\r\n        if (before) {\r\n            var /** @type {?} */ prev = before._prev;\r\n            record._next = before;\r\n            record._prev = prev;\r\n            before._prev = record;\r\n            if (prev) {\r\n                prev._next = record;\r\n            }\r\n            if (before === this._mapHead) {\r\n                this._mapHead = record;\r\n            }\r\n            this._appendAfter = before;\r\n            return before;\r\n        }\r\n        if (this._appendAfter) {\r\n            this._appendAfter._next = record;\r\n            record._prev = this._appendAfter;\r\n        }\r\n        else {\r\n            this._mapHead = record;\r\n        }\r\n        this._appendAfter = record;\r\n        return null;\r\n    };\r\n    /**\r\n     * @param {?} key\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = /**\r\n     * @param {?} key\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (key, value) {\r\n        if (this._records.has(key)) {\r\n            var /** @type {?} */ record_1 = /** @type {?} */ ((this._records.get(key)));\r\n            this._maybeAddToChanges(record_1, value);\r\n            var /** @type {?} */ prev = record_1._prev;\r\n            var /** @type {?} */ next = record_1._next;\r\n            if (prev) {\r\n                prev._next = next;\r\n            }\r\n            if (next) {\r\n                next._prev = prev;\r\n            }\r\n            record_1._next = null;\r\n            record_1._prev = null;\r\n            return record_1;\r\n        }\r\n        var /** @type {?} */ record = new KeyValueChangeRecord_(key);\r\n        this._records.set(key, record);\r\n        record.currentValue = value;\r\n        this._addToAdditions(record);\r\n        return record;\r\n    };\r\n    /** @internal */\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    DefaultKeyValueDiffer.prototype._reset = /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.isDirty) {\r\n            var /** @type {?} */ record = void 0;\r\n            // let `_previousMapHead` contain the state of the map before the changes\r\n            this._previousMapHead = this._mapHead;\r\n            for (record = this._previousMapHead; record !== null; record = record._next) {\r\n                record._nextPrevious = record._next;\r\n            }\r\n            // Update `record.previousValue` with the value of the item before the changes\r\n            // We need to update all changed items (that's those which have been added and changed)\r\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\r\n                record.previousValue = record.currentValue;\r\n            }\r\n            for (record = this._additionsHead; record != null; record = record._nextAdded) {\r\n                record.previousValue = record.currentValue;\r\n            }\r\n            this._changesHead = this._changesTail = null;\r\n            this._additionsHead = this._additionsTail = null;\r\n            this._removalsHead = null;\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} record\r\n     * @param {?} newValue\r\n     * @return {?}\r\n     */\r\n    DefaultKeyValueDiffer.prototype._maybeAddToChanges = /**\r\n     * @param {?} record\r\n     * @param {?} newValue\r\n     * @return {?}\r\n     */\r\n    function (record, newValue) {\r\n        if (!looseIdentical(newValue, record.currentValue)) {\r\n            record.previousValue = record.currentValue;\r\n            record.currentValue = newValue;\r\n            this._addToChanges(record);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    DefaultKeyValueDiffer.prototype._addToAdditions = /**\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    function (record) {\r\n        if (this._additionsHead === null) {\r\n            this._additionsHead = this._additionsTail = record;\r\n        }\r\n        else {\r\n            /** @type {?} */ ((this._additionsTail))._nextAdded = record;\r\n            this._additionsTail = record;\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    DefaultKeyValueDiffer.prototype._addToChanges = /**\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    function (record) {\r\n        if (this._changesHead === null) {\r\n            this._changesHead = this._changesTail = record;\r\n        }\r\n        else {\r\n            /** @type {?} */ ((this._changesTail))._nextChanged = record;\r\n            this._changesTail = record;\r\n        }\r\n    };\r\n    /**\r\n     * \\@internal\r\n     * @template K, V\r\n     * @param {?} obj\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    DefaultKeyValueDiffer.prototype._forEach = /**\r\n     * \\@internal\r\n     * @template K, V\r\n     * @param {?} obj\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (obj, fn) {\r\n        if (obj instanceof Map) {\r\n            obj.forEach(fn);\r\n        }\r\n        else {\r\n            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });\r\n        }\r\n    };\r\n    return DefaultKeyValueDiffer;\r\n}());\r\n/**\r\n * \\@stable\r\n * @template K, V\r\n */\r\nvar KeyValueChangeRecord_ = /** @class */ (function () {\r\n    function KeyValueChangeRecord_(key) {\r\n        this.key = key;\r\n        this.previousValue = null;\r\n        this.currentValue = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextPrevious = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._next = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._prev = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextAdded = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextRemoved = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextChanged = null;\r\n    }\r\n    return KeyValueChangeRecord_;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A strategy for tracking changes over time to an iterable. Used by {\\@link NgForOf} to\r\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\r\n *\r\n * \\@stable\r\n * @record\r\n * @template V\r\n */\r\n\r\n/**\r\n * An object describing the changes in the `Iterable` collection since last time\r\n * `IterableDiffer#diff()` was invoked.\r\n *\r\n * \\@stable\r\n * @record\r\n * @template V\r\n */\r\n\r\n/**\r\n * Record representing the item change information.\r\n *\r\n * \\@stable\r\n * @record\r\n * @template V\r\n */\r\n\r\n/**\r\n * @deprecated v4.0.0 - Use IterableChangeRecord instead.\r\n * @record\r\n * @template V\r\n */\r\n\r\n/**\r\n * An optional function passed into {\\@link NgForOf} that defines how to track\r\n * items in an iterable (e.g. fby index or id)\r\n *\r\n * \\@stable\r\n * @record\r\n * @template T\r\n */\r\n\r\n/**\r\n * Provides a factory for {\\@link IterableDiffer}.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\r\n * \\@stable\r\n */\r\nvar IterableDiffers = /** @class */ (function () {\r\n    function IterableDiffers(factories) {\r\n        this.factories = factories;\r\n    }\r\n    /**\r\n     * @param {?} factories\r\n     * @param {?=} parent\r\n     * @return {?}\r\n     */\r\n    IterableDiffers.create = /**\r\n     * @param {?} factories\r\n     * @param {?=} parent\r\n     * @return {?}\r\n     */\r\n    function (factories, parent) {\r\n        if (parent != null) {\r\n            var /** @type {?} */ copied = parent.factories.slice();\r\n            factories = factories.concat(copied);\r\n        }\r\n        return new IterableDiffers(factories);\r\n    };\r\n    /**\r\n     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\r\n     * inherited {@link IterableDiffers} instance with the provided factories and return a new\r\n     * {@link IterableDiffers} instance.\r\n     *\r\n     * The following example shows how to extend an existing list of factories,\r\n     * which will only be applied to the injector for this component and its children.\r\n     * This step is all that's required to make a new {@link IterableDiffer} available.\r\n     *\r\n     * ### Example\r\n     *\r\n     * ```\r\n     * @Component({\r\n     *   viewProviders: [\r\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\r\n     *   ]\r\n     * })\r\n     * ```\r\n     */\r\n    /**\r\n     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\r\n     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\r\n     * {\\@link IterableDiffers} instance.\r\n     *\r\n     * The following example shows how to extend an existing list of factories,\r\n     * which will only be applied to the injector for this component and its children.\r\n     * This step is all that's required to make a new {\\@link IterableDiffer} available.\r\n     *\r\n     * ### Example\r\n     *\r\n     * ```\r\n     * \\@Component({\r\n     *   viewProviders: [\r\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\r\n     *   ]\r\n     * })\r\n     * ```\r\n     * @param {?} factories\r\n     * @return {?}\r\n     */\r\n    IterableDiffers.extend = /**\r\n     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\r\n     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\r\n     * {\\@link IterableDiffers} instance.\r\n     *\r\n     * The following example shows how to extend an existing list of factories,\r\n     * which will only be applied to the injector for this component and its children.\r\n     * This step is all that's required to make a new {\\@link IterableDiffer} available.\r\n     *\r\n     * ### Example\r\n     *\r\n     * ```\r\n     * \\@Component({\r\n     *   viewProviders: [\r\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\r\n     *   ]\r\n     * })\r\n     * ```\r\n     * @param {?} factories\r\n     * @return {?}\r\n     */\r\n    function (factories) {\r\n        return {\r\n            provide: IterableDiffers,\r\n            useFactory: function (parent) {\r\n                if (!parent) {\r\n                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\r\n                    // to\r\n                    // bootstrap(), which would override default pipes instead of extending them.\r\n                    throw new Error('Cannot extend IterableDiffers without a parent injector');\r\n                }\r\n                return IterableDiffers.create(factories, parent);\r\n            },\r\n            // Dependency technically isn't optional, but we can provide a better error message this way.\r\n            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\r\n        };\r\n    };\r\n    /**\r\n     * @param {?} iterable\r\n     * @return {?}\r\n     */\r\n    IterableDiffers.prototype.find = /**\r\n     * @param {?} iterable\r\n     * @return {?}\r\n     */\r\n    function (iterable) {\r\n        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(iterable); });\r\n        if (factory != null) {\r\n            return factory;\r\n        }\r\n        else {\r\n            throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\r\n        }\r\n    };\r\n    return IterableDiffers;\r\n}());\r\n/**\r\n * @param {?} type\r\n * @return {?}\r\n */\r\nfunction getTypeNameForDebugging(type) {\r\n    return type['name'] || typeof type;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A differ that tracks changes made to an object over time.\r\n *\r\n * \\@stable\r\n * @record\r\n * @template K, V\r\n */\r\n\r\n/**\r\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\r\n * `KeyValueDiffer#diff()` was invoked.\r\n *\r\n * \\@stable\r\n * @record\r\n * @template K, V\r\n */\r\n\r\n/**\r\n * Record representing the item change information.\r\n *\r\n * \\@stable\r\n * @record\r\n * @template K, V\r\n */\r\n\r\n/**\r\n * Provides a factory for {\\@link KeyValueDiffer}.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\r\n * \\@stable\r\n */\r\nvar KeyValueDiffers = /** @class */ (function () {\r\n    function KeyValueDiffers(factories) {\r\n        this.factories = factories;\r\n    }\r\n    /**\r\n     * @template S\r\n     * @param {?} factories\r\n     * @param {?=} parent\r\n     * @return {?}\r\n     */\r\n    KeyValueDiffers.create = /**\r\n     * @template S\r\n     * @param {?} factories\r\n     * @param {?=} parent\r\n     * @return {?}\r\n     */\r\n    function (factories, parent) {\r\n        if (parent) {\r\n            var /** @type {?} */ copied = parent.factories.slice();\r\n            factories = factories.concat(copied);\r\n        }\r\n        return new KeyValueDiffers(factories);\r\n    };\r\n    /**\r\n     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\r\n     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\r\n     * {@link KeyValueDiffers} instance.\r\n     *\r\n     * The following example shows how to extend an existing list of factories,\r\n     * which will only be applied to the injector for this component and its children.\r\n     * This step is all that's required to make a new {@link KeyValueDiffer} available.\r\n     *\r\n     * ### Example\r\n     *\r\n     * ```\r\n     * @Component({\r\n     *   viewProviders: [\r\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\r\n     *   ]\r\n     * })\r\n     * ```\r\n     */\r\n    /**\r\n     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\r\n     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\r\n     * {\\@link KeyValueDiffers} instance.\r\n     *\r\n     * The following example shows how to extend an existing list of factories,\r\n     * which will only be applied to the injector for this component and its children.\r\n     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\r\n     *\r\n     * ### Example\r\n     *\r\n     * ```\r\n     * \\@Component({\r\n     *   viewProviders: [\r\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\r\n     *   ]\r\n     * })\r\n     * ```\r\n     * @template S\r\n     * @param {?} factories\r\n     * @return {?}\r\n     */\r\n    KeyValueDiffers.extend = /**\r\n     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\r\n     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\r\n     * {\\@link KeyValueDiffers} instance.\r\n     *\r\n     * The following example shows how to extend an existing list of factories,\r\n     * which will only be applied to the injector for this component and its children.\r\n     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\r\n     *\r\n     * ### Example\r\n     *\r\n     * ```\r\n     * \\@Component({\r\n     *   viewProviders: [\r\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\r\n     *   ]\r\n     * })\r\n     * ```\r\n     * @template S\r\n     * @param {?} factories\r\n     * @return {?}\r\n     */\r\n    function (factories) {\r\n        return {\r\n            provide: KeyValueDiffers,\r\n            useFactory: function (parent) {\r\n                if (!parent) {\r\n                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\r\n                    // to bootstrap(), which would override default pipes instead of extending them.\r\n                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');\r\n                }\r\n                return KeyValueDiffers.create(factories, parent);\r\n            },\r\n            // Dependency technically isn't optional, but we can provide a better error message this way.\r\n            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\r\n        };\r\n    };\r\n    /**\r\n     * @param {?} kv\r\n     * @return {?}\r\n     */\r\n    KeyValueDiffers.prototype.find = /**\r\n     * @param {?} kv\r\n     * @return {?}\r\n     */\r\n    function (kv) {\r\n        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(kv); });\r\n        if (factory) {\r\n            return factory;\r\n        }\r\n        throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\r\n    };\r\n    return KeyValueDiffers;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Structural diffing for `Object`s and `Map`s.\r\n */\r\nvar keyValDiff = [new DefaultKeyValueDifferFactory()];\r\n/**\r\n * Structural diffing for `Iterable` types such as `Array`s.\r\n */\r\nvar iterableDiff = [new DefaultIterableDifferFactory()];\r\nvar defaultIterableDiffers = new IterableDiffers(iterableDiff);\r\nvar defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar _CORE_PLATFORM_PROVIDERS = [\r\n    // Set a default platform name for platforms that don't set it explicitly.\r\n    { provide: PLATFORM_ID, useValue: 'unknown' },\r\n    { provide: PlatformRef, deps: [Injector] },\r\n    { provide: TestabilityRegistry, deps: [] },\r\n    { provide: Console, deps: [] },\r\n];\r\n/**\r\n * This platform has to be included in any other platform\r\n *\r\n * \\@experimental\r\n */\r\nvar platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Provide this token to set the locale of your application.\r\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\r\n * DecimalPipe and PercentPipe) and by ICU expressions.\r\n *\r\n * See the {\\@linkDocs guide/i18n#setting-up-locale i18n guide} for more information.\r\n *\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import { LOCALE_ID } from '\\@angular/core';\r\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * platformBrowserDynamic().bootstrapModule(AppModule, {\r\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\r\n * });\r\n * ```\r\n *\r\n * \\@experimental i18n support is experimental.\r\n */\r\nvar LOCALE_ID = new InjectionToken('LocaleId');\r\n/**\r\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\r\n * `xlf` or `xlf2`) when you want to translate your application in another language.\r\n *\r\n * See the {\\@linkDocs guide/i18n#merge i18n guide} for more information.\r\n *\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import { TRANSLATIONS } from '\\@angular/core';\r\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * // content of your translation file\r\n * const translations = '....';\r\n *\r\n * platformBrowserDynamic().bootstrapModule(AppModule, {\r\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\r\n * });\r\n * ```\r\n *\r\n * \\@experimental i18n support is experimental.\r\n */\r\nvar TRANSLATIONS = new InjectionToken('Translations');\r\n/**\r\n * Provide this token at bootstrap to set the format of your {\\@link TRANSLATIONS}: `xtb`,\r\n * `xlf` or `xlf2`.\r\n *\r\n * See the {\\@linkDocs guide/i18n#merge i18n guide} for more information.\r\n *\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import { TRANSLATIONS_FORMAT } from '\\@angular/core';\r\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * platformBrowserDynamic().bootstrapModule(AppModule, {\r\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\r\n * });\r\n * ```\r\n *\r\n * \\@experimental i18n support is experimental.\r\n */\r\nvar TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\r\n/** @enum {number} */\r\nvar MissingTranslationStrategy = {\r\n    Error: 0,\r\n    Warning: 1,\r\n    Ignore: 2,\r\n};\r\nMissingTranslationStrategy[MissingTranslationStrategy.Error] = \"Error\";\r\nMissingTranslationStrategy[MissingTranslationStrategy.Warning] = \"Warning\";\r\nMissingTranslationStrategy[MissingTranslationStrategy.Ignore] = \"Ignore\";\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @return {?}\r\n */\r\nfunction _iterableDiffersFactory() {\r\n    return defaultIterableDiffers;\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction _keyValueDiffersFactory() {\r\n    return defaultKeyValueDiffers;\r\n}\r\n/**\r\n * @param {?=} locale\r\n * @return {?}\r\n */\r\nfunction _localeFactory(locale) {\r\n    return locale || 'en-US';\r\n}\r\n/**\r\n * This module includes the providers of \\@angular/core that are needed\r\n * to bootstrap components via `ApplicationRef`.\r\n *\r\n * \\@experimental\r\n */\r\nvar ApplicationModule = /** @class */ (function () {\r\n    // Inject ApplicationRef to make it eager...\r\n    function ApplicationModule(appRef) {\r\n    }\r\n    ApplicationModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    providers: [\r\n                        ApplicationRef,\r\n                        ApplicationInitStatus,\r\n                        Compiler,\r\n                        APP_ID_RANDOM_PROVIDER,\r\n                        { provide: IterableDiffers, useFactory: _iterableDiffersFactory },\r\n                        { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },\r\n                        {\r\n                            provide: LOCALE_ID,\r\n                            useFactory: _localeFactory,\r\n                            deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\r\n                        },\r\n                    ]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    ApplicationModule.ctorParameters = function () { return [\r\n        { type: ApplicationRef, },\r\n    ]; };\r\n    return ApplicationModule;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\r\n * that needs sanitizing.\r\n * Depending upon browser support we must use one of three strategies for doing this.\r\n * Support: Safari 10.x -> XHR strategy\r\n * Support: Firefox -> DomParser strategy\r\n * Default: InertDocument strategy\r\n */\r\nvar InertBodyHelper = /** @class */ (function () {\r\n    function InertBodyHelper(defaultDoc) {\r\n        this.defaultDoc = defaultDoc;\r\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\r\n        this.inertBodyElement = this.inertDocument.body;\r\n        if (this.inertBodyElement == null) {\r\n            // usually there should be only one body element in the document, but IE doesn't have any, so\r\n            // we need to create one.\r\n            var /** @type {?} */ inertHtml = this.inertDocument.createElement('html');\r\n            this.inertDocument.appendChild(inertHtml);\r\n            this.inertBodyElement = this.inertDocument.createElement('body');\r\n            inertHtml.appendChild(this.inertBodyElement);\r\n        }\r\n        this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\r\n        if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\r\n            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\r\n            // so use the XHR strategy.\r\n            this.getInertBodyElement = this.getInertBodyElement_XHR;\r\n            return;\r\n        }\r\n        this.inertBodyElement.innerHTML =\r\n            '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\r\n        if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\r\n            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\r\n            // so use the DOMParser strategy, if it is available.\r\n            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\r\n            // fall through to the default strategy below.\r\n            if (isDOMParserAvailable()) {\r\n                this.getInertBodyElement = this.getInertBodyElement_DOMParser;\r\n                return;\r\n            }\r\n        }\r\n        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\r\n        this.getInertBodyElement = this.getInertBodyElement_InertDocument;\r\n    }\r\n    /**\r\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\r\n     * See\r\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\r\n     * @param {?} html\r\n     * @return {?}\r\n     */\r\n    InertBodyHelper.prototype.getInertBodyElement_XHR = /**\r\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\r\n     * See\r\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\r\n     * @param {?} html\r\n     * @return {?}\r\n     */\r\n    function (html) {\r\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\r\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\r\n        // `<head>` tag.\r\n        html = '<body><remove></remove>' + html + '</body>';\r\n        try {\r\n            html = encodeURI(html);\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            return null;\r\n        }\r\n        var /** @type {?} */ xhr = new XMLHttpRequest();\r\n        xhr.responseType = 'document';\r\n        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\r\n        xhr.send(null);\r\n        var /** @type {?} */ body = xhr.response.body;\r\n        body.removeChild(/** @type {?} */ ((body.firstChild)));\r\n        return body;\r\n    };\r\n    /**\r\n     * Use DOMParser to create and fill an inert body element (on Firefox)\r\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\r\n     *\r\n     * @param {?} html\r\n     * @return {?}\r\n     */\r\n    InertBodyHelper.prototype.getInertBodyElement_DOMParser = /**\r\n     * Use DOMParser to create and fill an inert body element (on Firefox)\r\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\r\n     *\r\n     * @param {?} html\r\n     * @return {?}\r\n     */\r\n    function (html) {\r\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\r\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\r\n        // `<head>` tag.\r\n        html = '<body><remove></remove>' + html + '</body>';\r\n        try {\r\n            var /** @type {?} */ body = /** @type {?} */ (new (/** @type {?} */ (window))\r\n                .DOMParser()\r\n                .parseFromString(html, 'text/html')\r\n                .body);\r\n            body.removeChild(/** @type {?} */ ((body.firstChild)));\r\n            return body;\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\r\n     * `createHtmlDocument` to create and fill an inert DOM element.\r\n     * This is the default sane strategy to use if the browser does not require one of the specialised\r\n     * strategies above.\r\n     * @param {?} html\r\n     * @return {?}\r\n     */\r\n    InertBodyHelper.prototype.getInertBodyElement_InertDocument = /**\r\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\r\n     * `createHtmlDocument` to create and fill an inert DOM element.\r\n     * This is the default sane strategy to use if the browser does not require one of the specialised\r\n     * strategies above.\r\n     * @param {?} html\r\n     * @return {?}\r\n     */\r\n    function (html) {\r\n        // Prefer using <template> element if supported.\r\n        var /** @type {?} */ templateEl = this.inertDocument.createElement('template');\r\n        if ('content' in templateEl) {\r\n            templateEl.innerHTML = html;\r\n            return templateEl;\r\n        }\r\n        this.inertBodyElement.innerHTML = html;\r\n        // Support: IE 9-11 only\r\n        // strip custom-namespaced attributes on IE<=11\r\n        if ((/** @type {?} */ (this.defaultDoc)).documentMode) {\r\n            this.stripCustomNsAttrs(this.inertBodyElement);\r\n        }\r\n        return this.inertBodyElement;\r\n    };\r\n    /**\r\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\r\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\r\n     * 'ns1:xlink:foo').\r\n     *\r\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\r\n     * strips them all.\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    InertBodyHelper.prototype.stripCustomNsAttrs = /**\r\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\r\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\r\n     * 'ns1:xlink:foo').\r\n     *\r\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\r\n     * strips them all.\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    function (el) {\r\n        var /** @type {?} */ elAttrs = el.attributes;\r\n        // loop backwards so that we can support removals.\r\n        for (var /** @type {?} */ i = elAttrs.length - 1; 0 < i; i--) {\r\n            var /** @type {?} */ attrib = elAttrs.item(i);\r\n            var /** @type {?} */ attrName = attrib.name;\r\n            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\r\n                el.removeAttribute(attrName);\r\n            }\r\n        }\r\n        var /** @type {?} */ childNode = el.firstChild;\r\n        while (childNode) {\r\n            if (childNode.nodeType === Node.ELEMENT_NODE)\r\n                this.stripCustomNsAttrs(/** @type {?} */ (childNode));\r\n            childNode = childNode.nextSibling;\r\n        }\r\n    };\r\n    return InertBodyHelper;\r\n}());\r\n/**\r\n * We need to determine whether the DOMParser exists in the global context.\r\n * The try-catch is because, on some browsers, trying to access this property\r\n * on window can actually throw an error.\r\n *\r\n * @suppress {uselessCode}\r\n * @return {?}\r\n */\r\nfunction isDOMParserAvailable() {\r\n    try {\r\n        return !!(/** @type {?} */ (window)).DOMParser;\r\n    }\r\n    catch (/** @type {?} */ e) {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\r\n *\r\n * This regular expression matches a subset of URLs that will not cause script\r\n * execution if used in URL context within a HTML document. Specifically, this\r\n * regular expression matches if (comment from here on and regex copied from\r\n * Soy's EscapingConventions):\r\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\r\n * (2) or no protocol.  A protocol must be followed by a colon. The below\r\n *     allows that by allowing colons only after one of the characters [/?#].\r\n *     A colon after a hash (#) must be in the fragment.\r\n *     Otherwise, a colon after a (?) must be in a query.\r\n *     Otherwise, a colon after a single solidus (/) must be in a path.\r\n *     Otherwise, a colon after a double solidus (//) must be in the authority\r\n *     (before port).\r\n *\r\n * The pattern disallows &, used in HTML entity declarations before\r\n * one of the characters in [/?#]. This disallows HTML entities used in the\r\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\r\n * It also disallows HTML entities in the first path part of a relative path,\r\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\r\n * that. More importantly, it disallows masking of a colon,\r\n * e.g. \"javascript&#58;...\".\r\n *\r\n * This regular expression was taken from the Closure sanitization library.\r\n */\r\nvar SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\r\n/**\r\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\r\n */\r\nvar DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\r\n/**\r\n * @param {?} url\r\n * @return {?}\r\n */\r\nfunction _sanitizeUrl(url) {\r\n    url = String(url);\r\n    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\r\n        return url;\r\n    if (isDevMode()) {\r\n        console.warn(\"WARNING: sanitizing unsafe URL value \" + url + \" (see http://g.co/ng/security#xss)\");\r\n    }\r\n    return 'unsafe:' + url;\r\n}\r\n/**\r\n * @param {?} srcset\r\n * @return {?}\r\n */\r\nfunction sanitizeSrcset(srcset) {\r\n    srcset = String(srcset);\r\n    return srcset.split(',').map(function (srcset) { return _sanitizeUrl(srcset.trim()); }).join(', ');\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} tags\r\n * @return {?}\r\n */\r\nfunction tagSet(tags) {\r\n    var /** @type {?} */ res = {};\r\n    for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {\r\n        var t = _a[_i];\r\n        res[t] = true;\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * @param {...?} sets\r\n * @return {?}\r\n */\r\nfunction merge$1() {\r\n    var sets = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        sets[_i] = arguments[_i];\r\n    }\r\n    var /** @type {?} */ res = {};\r\n    for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {\r\n        var s = sets_1[_a];\r\n        for (var /** @type {?} */ v in s) {\r\n            if (s.hasOwnProperty(v))\r\n                res[v] = true;\r\n        }\r\n    }\r\n    return res;\r\n}\r\n// Good source of info about elements and attributes\r\n// http://dev.w3.org/html5/spec/Overview.html#semantics\r\n// http://simon.html5.org/html-elements\r\n// Safe Void Elements - HTML5\r\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\r\nvar VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\r\n// Elements that you can, intentionally, leave open (and which close themselves)\r\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\r\nvar OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\r\nvar OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\r\nvar OPTIONAL_END_TAG_ELEMENTS = merge$1(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\r\n// Safe Block Elements - HTML5\r\nvar BLOCK_ELEMENTS = merge$1(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\r\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\r\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\r\n// Inline Elements - HTML5\r\nvar INLINE_ELEMENTS = merge$1(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\r\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\r\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\r\nvar VALID_ELEMENTS = merge$1(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\r\n// Attributes that have href and hence need to be sanitized\r\nvar URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\r\n// Attributes that have special href set hence need to be sanitized\r\nvar SRCSET_ATTRS = tagSet('srcset');\r\nvar HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\r\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\r\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\r\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\r\n    'valign,value,vspace,width');\r\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\r\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\r\n// innerHTML is required, SVG attributes should be added here.\r\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\r\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\r\n// are left out here.\r\nvar VALID_ATTRS = merge$1(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\r\n/**\r\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\r\n * attributes.\r\n */\r\nvar SanitizingHtmlSerializer = /** @class */ (function () {\r\n    function SanitizingHtmlSerializer() {\r\n        this.sanitizedSomething = false;\r\n        this.buf = [];\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    SanitizingHtmlSerializer.prototype.sanitizeChildren = /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    function (el) {\r\n        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\r\n        // However this code never accesses properties off of `document` before deleting its contents\r\n        // again, so it shouldn't be vulnerable to DOM clobbering.\r\n        var /** @type {?} */ current = /** @type {?} */ ((el.firstChild));\r\n        while (current) {\r\n            if (current.nodeType === Node.ELEMENT_NODE) {\r\n                this.startElement(/** @type {?} */ (current));\r\n            }\r\n            else if (current.nodeType === Node.TEXT_NODE) {\r\n                this.chars(/** @type {?} */ ((current.nodeValue)));\r\n            }\r\n            else {\r\n                // Strip non-element, non-text nodes.\r\n                this.sanitizedSomething = true;\r\n            }\r\n            if (current.firstChild) {\r\n                current = /** @type {?} */ ((current.firstChild));\r\n                continue;\r\n            }\r\n            while (current) {\r\n                // Leaving the element. Walk up and to the right, closing tags as we go.\r\n                if (current.nodeType === Node.ELEMENT_NODE) {\r\n                    this.endElement(/** @type {?} */ (current));\r\n                }\r\n                var /** @type {?} */ next = this.checkClobberedElement(current, /** @type {?} */ ((current.nextSibling)));\r\n                if (next) {\r\n                    current = next;\r\n                    break;\r\n                }\r\n                current = this.checkClobberedElement(current, /** @type {?} */ ((current.parentNode)));\r\n            }\r\n        }\r\n        return this.buf.join('');\r\n    };\r\n    /**\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    SanitizingHtmlSerializer.prototype.startElement = /**\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    function (element) {\r\n        var /** @type {?} */ tagName = element.nodeName.toLowerCase();\r\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\r\n            this.sanitizedSomething = true;\r\n            return;\r\n        }\r\n        this.buf.push('<');\r\n        this.buf.push(tagName);\r\n        var /** @type {?} */ elAttrs = element.attributes;\r\n        for (var /** @type {?} */ i = 0; i < elAttrs.length; i++) {\r\n            var /** @type {?} */ elAttr = elAttrs.item(i);\r\n            var /** @type {?} */ attrName = elAttr.name;\r\n            var /** @type {?} */ lower = attrName.toLowerCase();\r\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\r\n                this.sanitizedSomething = true;\r\n                continue;\r\n            }\r\n            var /** @type {?} */ value = elAttr.value;\r\n            // TODO(martinprobst): Special case image URIs for data:image/...\r\n            if (URI_ATTRS[lower])\r\n                value = _sanitizeUrl(value);\r\n            if (SRCSET_ATTRS[lower])\r\n                value = sanitizeSrcset(value);\r\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\r\n        }\r\n        this.buf.push('>');\r\n    };\r\n    /**\r\n     * @param {?} current\r\n     * @return {?}\r\n     */\r\n    SanitizingHtmlSerializer.prototype.endElement = /**\r\n     * @param {?} current\r\n     * @return {?}\r\n     */\r\n    function (current) {\r\n        var /** @type {?} */ tagName = current.nodeName.toLowerCase();\r\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\r\n            this.buf.push('</');\r\n            this.buf.push(tagName);\r\n            this.buf.push('>');\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} chars\r\n     * @return {?}\r\n     */\r\n    SanitizingHtmlSerializer.prototype.chars = /**\r\n     * @param {?} chars\r\n     * @return {?}\r\n     */\r\n    function (chars) { this.buf.push(encodeEntities(chars)); };\r\n    /**\r\n     * @param {?} node\r\n     * @param {?} nextNode\r\n     * @return {?}\r\n     */\r\n    SanitizingHtmlSerializer.prototype.checkClobberedElement = /**\r\n     * @param {?} node\r\n     * @param {?} nextNode\r\n     * @return {?}\r\n     */\r\n    function (node, nextNode) {\r\n        if (nextNode &&\r\n            (node.compareDocumentPosition(nextNode) &\r\n                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\r\n            throw new Error(\"Failed to sanitize html because the element is clobbered: \" + ((/** @type {?} */ (node))).outerHTML);\r\n        }\r\n        return nextNode;\r\n    };\r\n    return SanitizingHtmlSerializer;\r\n}());\r\n// Regular Expressions for parsing tags and attributes\r\nvar SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\r\n// ! to ~ is the ASCII range.\r\nvar NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\r\n/**\r\n * Escapes all potentially dangerous characters, so that the\r\n * resulting string can be safely inserted into attribute or\r\n * element text.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction encodeEntities(value) {\r\n    return value.replace(/&/g, '&amp;')\r\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\r\n        var /** @type {?} */ hi = match.charCodeAt(0);\r\n        var /** @type {?} */ low = match.charCodeAt(1);\r\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\r\n    })\r\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;');\r\n}\r\nvar inertBodyHelper;\r\n/**\r\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\r\n * the DOM in a browser environment.\r\n * @param {?} defaultDoc\r\n * @param {?} unsafeHtmlInput\r\n * @return {?}\r\n */\r\nfunction _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\r\n    var /** @type {?} */ inertBodyElement = null;\r\n    try {\r\n        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\r\n        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\r\n        var /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\r\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\r\n        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\r\n        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\r\n        var /** @type {?} */ mXSSAttempts = 5;\r\n        var /** @type {?} */ parsedHtml = unsafeHtml;\r\n        do {\r\n            if (mXSSAttempts === 0) {\r\n                throw new Error('Failed to sanitize html because the input is unstable');\r\n            }\r\n            mXSSAttempts--;\r\n            unsafeHtml = parsedHtml;\r\n            parsedHtml = /** @type {?} */ ((inertBodyElement)).innerHTML;\r\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\r\n        } while (unsafeHtml !== parsedHtml);\r\n        var /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();\r\n        var /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(/** @type {?} */ (getTemplateContent(/** @type {?} */ ((inertBodyElement)))) || inertBodyElement);\r\n        if (isDevMode() && sanitizer.sanitizedSomething) {\r\n            console.warn('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');\r\n        }\r\n        return safeHtml;\r\n    }\r\n    finally {\r\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\r\n        if (inertBodyElement) {\r\n            var /** @type {?} */ parent_1 = getTemplateContent(inertBodyElement) || inertBodyElement;\r\n            while (parent_1.firstChild) {\r\n                parent_1.removeChild(parent_1.firstChild);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} el\r\n * @return {?}\r\n */\r\nfunction getTemplateContent(el) {\r\n    return 'content' in (/** @type {?} */ (el /** Microsoft/TypeScript#21517 */) /** Microsoft/TypeScript#21517 */) && isTemplateElement(el) ?\r\n        el.content :\r\n        null;\r\n}\r\n/**\r\n * @param {?} el\r\n * @return {?}\r\n */\r\nfunction isTemplateElement(el) {\r\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Regular expression for safe style values.\r\n *\r\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\r\n *\r\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\r\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\r\n * of XSS.\r\n *\r\n * The function expression checks only for XSS safety, not for CSS validity.\r\n *\r\n * This regular expression was taken from the Closure sanitization library, and augmented for\r\n * transformation values.\r\n */\r\nvar VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\r\nvar TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\r\nvar COLOR_FNS = '(?:rgb|hsl)a?';\r\nvar GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\r\nvar CSS3_FNS = '(?:calc|attr)';\r\nvar FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\r\nvar SAFE_STYLE_VALUE = new RegExp(\"^(\" + VALUES + \"|\" +\r\n    (\"(?:\" + TRANSFORMATION_FNS + \"|\" + COLOR_FNS + \"|\" + GRADIENTS + \"|\" + CSS3_FNS + \")\") +\r\n    (FN_ARGS + \")$\"), 'g');\r\n/**\r\n * Matches a `url(...)` value with an arbitrary argument as long as it does\r\n * not contain parentheses.\r\n *\r\n * The URL value still needs to be sanitized separately.\r\n *\r\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\r\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\r\n * by observing whether scroll bars are displayed, or character ranges used by a font face\r\n * definition.\r\n *\r\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\r\n * binding a URL value without further cooperation from the page will cause an information leak, and\r\n * if so, it is just a leak, not a full blown XSS vulnerability.\r\n *\r\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\r\n * code is permissive and allows URLs that sanitize otherwise.\r\n */\r\nvar URL_RE = /^url\\(([^)]+)\\)$/;\r\n/**\r\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\r\n * that neither escape (\\) nor any other character that could result in\r\n * breaking out of a string parsing context are allowed;\r\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\r\n *\r\n * This code was taken from the Closure sanitization library.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction hasBalancedQuotes(value) {\r\n    var /** @type {?} */ outsideSingle = true;\r\n    var /** @type {?} */ outsideDouble = true;\r\n    for (var /** @type {?} */ i = 0; i < value.length; i++) {\r\n        var /** @type {?} */ c = value.charAt(i);\r\n        if (c === '\\'' && outsideDouble) {\r\n            outsideSingle = !outsideSingle;\r\n        }\r\n        else if (c === '\"' && outsideSingle) {\r\n            outsideDouble = !outsideDouble;\r\n        }\r\n    }\r\n    return outsideSingle && outsideDouble;\r\n}\r\n/**\r\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\r\n * value) and returns a value that is safe to use in a browser environment.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction _sanitizeStyle(value) {\r\n    value = String(value).trim(); // Make sure it's actually a string.\r\n    if (!value)\r\n        return '';\r\n    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\r\n    // reasoning behind this.\r\n    var /** @type {?} */ urlMatch = value.match(URL_RE);\r\n    if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\r\n        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\r\n        return value; // Safe style values.\r\n    }\r\n    if (isDevMode()) {\r\n        console.warn(\"WARNING: sanitizing unsafe style value \" + value + \" (see http://g.co/ng/security#xss).\");\r\n    }\r\n    return 'unsafe';\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @enum {number} */\r\nvar SecurityContext = {\r\n    NONE: 0,\r\n    HTML: 1,\r\n    STYLE: 2,\r\n    SCRIPT: 3,\r\n    URL: 4,\r\n    RESOURCE_URL: 5,\r\n};\r\nSecurityContext[SecurityContext.NONE] = \"NONE\";\r\nSecurityContext[SecurityContext.HTML] = \"HTML\";\r\nSecurityContext[SecurityContext.STYLE] = \"STYLE\";\r\nSecurityContext[SecurityContext.SCRIPT] = \"SCRIPT\";\r\nSecurityContext[SecurityContext.URL] = \"URL\";\r\nSecurityContext[SecurityContext.RESOURCE_URL] = \"RESOURCE_URL\";\r\n/**\r\n * Sanitizer is used by the views to sanitize potentially dangerous values.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nvar Sanitizer = /** @class */ (function () {\r\n    function Sanitizer() {\r\n    }\r\n    return Sanitizer;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// unsupported: template constraints.\r\n/**\r\n * Factory for ViewDefinitions/NgModuleDefinitions.\r\n * We use a function so we can reexeute it in case an error happens and use the given logger\r\n * function to log the error from the definition of the node, which is shown in all browser\r\n * logs.\r\n * @record\r\n * @template D\r\n */\r\n\r\n/**\r\n * Function to call console.error at the right source location. This is an indirection\r\n * via another function as browser will log the location that actually called\r\n * `console.error`.\r\n * @record\r\n */\r\n\r\n// unsupported: template constraints.\r\n/**\r\n * @record\r\n * @template DF\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * A node definition in the view.\r\n *\r\n * Note: We use one type for all nodes so that loops that loop over all nodes\r\n * of a ViewDefinition stay monomorphic!\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * View instance data.\r\n * Attention: Adding fields to this is performance sensitive!\r\n * @record\r\n */\r\n\r\n/**\r\n * @param {?} view\r\n * @param {?} priorInitState\r\n * @param {?} newInitState\r\n * @return {?}\r\n */\r\nfunction shiftInitState(view, priorInitState, newInitState) {\r\n    // Only update the InitState if we are currently in the prior state.\r\n    // For example, only move into CallingInit if we are in BeforeInit. Only\r\n    // move into CallingContentInit if we are in CallingInit. Normally this will\r\n    // always be true because of how checkCycle is called in checkAndUpdateView.\r\n    // However, if checkAndUpdateView is called recursively or if an exception is\r\n    // thrown while checkAndUpdateView is running, checkAndUpdateView starts over\r\n    // from the beginning. This ensures the state is monotonically increasing,\r\n    // terminating in the AfterInit state, which ensures the Init methods are called\r\n    // at least once and only once.\r\n    var /** @type {?} */ state = view.state;\r\n    var /** @type {?} */ initState = state & 1792;\r\n    if (initState === priorInitState) {\r\n        view.state = (state & ~1792 /* InitState_Mask */) | newInitState;\r\n        view.initIndex = -1;\r\n        return true;\r\n    }\r\n    return initState === newInitState;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} initState\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction shouldCallLifecycleInitHook(view, initState, index) {\r\n    if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {\r\n        view.initIndex = index + 1;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * Data for an instantiated NodeType.Text.\r\n *\r\n * Attention: Adding fields to this is performance sensitive!\r\n * @record\r\n */\r\n\r\n/**\r\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\r\n * @param {?} view\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction asTextData(view, index) {\r\n    return /** @type {?} */ (view.nodes[index]);\r\n}\r\n/**\r\n * Data for an instantiated NodeType.Element.\r\n *\r\n * Attention: Adding fields to this is performance sensitive!\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\r\n * @param {?} view\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction asElementData(view, index) {\r\n    return /** @type {?} */ (view.nodes[index]);\r\n}\r\n/**\r\n * Data for an instantiated NodeType.Provider.\r\n *\r\n * Attention: Adding fields to this is performance sensitive!\r\n * @record\r\n */\r\n\r\n/**\r\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\r\n * @param {?} view\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction asProviderData(view, index) {\r\n    return /** @type {?} */ (view.nodes[index]);\r\n}\r\n/**\r\n * Data for an instantiated NodeType.PureExpression.\r\n *\r\n * Attention: Adding fields to this is performance sensitive!\r\n * @record\r\n */\r\n\r\n/**\r\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\r\n * @param {?} view\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction asPureExpressionData(view, index) {\r\n    return /** @type {?} */ (view.nodes[index]);\r\n}\r\n/**\r\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\r\n * @param {?} view\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction asQueryList(view, index) {\r\n    return /** @type {?} */ (view.nodes[index]);\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @abstract\r\n */\r\nvar DebugContext = /** @class */ (function () {\r\n    function DebugContext() {\r\n    }\r\n    return DebugContext;\r\n}());\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * This object is used to prevent cycles in the source files and to have a place where\r\n * debug mode can hook it. It is lazily filled when `isDevMode` is known.\r\n */\r\nvar Services = {\r\n    setCurrentNode: /** @type {?} */ ((undefined)),\r\n    createRootView: /** @type {?} */ ((undefined)),\r\n    createEmbeddedView: /** @type {?} */ ((undefined)),\r\n    createComponentView: /** @type {?} */ ((undefined)),\r\n    createNgModuleRef: /** @type {?} */ ((undefined)),\r\n    overrideProvider: /** @type {?} */ ((undefined)),\r\n    overrideComponentView: /** @type {?} */ ((undefined)),\r\n    clearOverrides: /** @type {?} */ ((undefined)),\r\n    checkAndUpdateView: /** @type {?} */ ((undefined)),\r\n    checkNoChangesView: /** @type {?} */ ((undefined)),\r\n    destroyView: /** @type {?} */ ((undefined)),\r\n    resolveDep: /** @type {?} */ ((undefined)),\r\n    createDebugContext: /** @type {?} */ ((undefined)),\r\n    handleEvent: /** @type {?} */ ((undefined)),\r\n    updateDirectives: /** @type {?} */ ((undefined)),\r\n    updateRenderer: /** @type {?} */ ((undefined)),\r\n    dirtyParentQueries: /** @type {?} */ ((undefined)),\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} context\r\n * @param {?} oldValue\r\n * @param {?} currValue\r\n * @param {?} isFirstCheck\r\n * @return {?}\r\n */\r\nfunction expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\r\n    var /** @type {?} */ msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\r\n    if (isFirstCheck) {\r\n        msg +=\r\n            \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\r\n                \" Has it been created in a change detection hook ?\";\r\n    }\r\n    return viewDebugError(msg, context);\r\n}\r\n/**\r\n * @param {?} err\r\n * @param {?} context\r\n * @return {?}\r\n */\r\nfunction viewWrappedDebugError(err, context) {\r\n    if (!(err instanceof Error)) {\r\n        // errors that are not Error instances don't have a stack,\r\n        // so it is ok to wrap them into a new Error object...\r\n        err = new Error(err.toString());\r\n    }\r\n    _addDebugContext(err, context);\r\n    return err;\r\n}\r\n/**\r\n * @param {?} msg\r\n * @param {?} context\r\n * @return {?}\r\n */\r\nfunction viewDebugError(msg, context) {\r\n    var /** @type {?} */ err = new Error(msg);\r\n    _addDebugContext(err, context);\r\n    return err;\r\n}\r\n/**\r\n * @param {?} err\r\n * @param {?} context\r\n * @return {?}\r\n */\r\nfunction _addDebugContext(err, context) {\r\n    (/** @type {?} */ (err))[ERROR_DEBUG_CONTEXT] = context;\r\n    (/** @type {?} */ (err))[ERROR_LOGGER] = context.logError.bind(context);\r\n}\r\n/**\r\n * @param {?} err\r\n * @return {?}\r\n */\r\nfunction isViewDebugError(err) {\r\n    return !!getDebugContext(err);\r\n}\r\n/**\r\n * @param {?} action\r\n * @return {?}\r\n */\r\nfunction viewDestroyedError(action) {\r\n    return new Error(\"ViewDestroyedError: Attempt to use a destroyed view: \" + action);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar NOOP = function () { };\r\nvar _tokenKeyCache = new Map();\r\n/**\r\n * @param {?} token\r\n * @return {?}\r\n */\r\nfunction tokenKey(token) {\r\n    var /** @type {?} */ key = _tokenKeyCache.get(token);\r\n    if (!key) {\r\n        key = stringify(token) + '_' + _tokenKeyCache.size;\r\n        _tokenKeyCache.set(token, key);\r\n    }\r\n    return key;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeIdx\r\n * @param {?} bindingIdx\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction unwrapValue(view, nodeIdx, bindingIdx, value) {\r\n    if (WrappedValue.isWrapped(value)) {\r\n        value = WrappedValue.unwrap(value);\r\n        var /** @type {?} */ globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\r\n        var /** @type {?} */ oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);\r\n        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\r\n    }\r\n    return value;\r\n}\r\nvar UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\r\nvar EMPTY_RENDERER_TYPE_ID = '$$empty';\r\n/**\r\n * @param {?} values\r\n * @return {?}\r\n */\r\nfunction createRendererType2(values) {\r\n    return {\r\n        id: UNDEFINED_RENDERER_TYPE_ID,\r\n        styles: values.styles,\r\n        encapsulation: values.encapsulation,\r\n        data: values.data\r\n    };\r\n}\r\nvar _renderCompCount = 0;\r\n/**\r\n * @param {?=} type\r\n * @return {?}\r\n */\r\nfunction resolveRendererType2(type) {\r\n    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\r\n        // first time we see this RendererType2. Initialize it...\r\n        var /** @type {?} */ isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||\r\n            type.styles.length || Object.keys(type.data).length);\r\n        if (isFilled) {\r\n            type.id = \"c\" + _renderCompCount++;\r\n        }\r\n        else {\r\n            type.id = EMPTY_RENDERER_TYPE_ID;\r\n        }\r\n    }\r\n    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\r\n        type = null;\r\n    }\r\n    return type || null;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} bindingIdx\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction checkBinding(view, def, bindingIdx, value) {\r\n    var /** @type {?} */ oldValues = view.oldValues;\r\n    if ((view.state & 2 /* FirstCheck */) ||\r\n        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} bindingIdx\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateBinding(view, def, bindingIdx, value) {\r\n    if (checkBinding(view, def, bindingIdx, value)) {\r\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} bindingIdx\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction checkBindingNoChanges(view, def, bindingIdx, value) {\r\n    var /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];\r\n    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {\r\n        var /** @type {?} */ bindingName = def.bindings[bindingIdx].name;\r\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), bindingName + \": \" + oldValue, bindingName + \": \" + value, (view.state & 1 /* BeforeFirstCheck */) !== 0);\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction markParentViewsForCheck(view) {\r\n    var /** @type {?} */ currView = view;\r\n    while (currView) {\r\n        if (currView.def.flags & 2 /* OnPush */) {\r\n            currView.state |= 8 /* ChecksEnabled */;\r\n        }\r\n        currView = currView.viewContainerParent || currView.parent;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} endView\r\n * @return {?}\r\n */\r\nfunction markParentViewsForCheckProjectedViews(view, endView) {\r\n    var /** @type {?} */ currView = view;\r\n    while (currView && currView !== endView) {\r\n        currView.state |= 64 /* CheckProjectedViews */;\r\n        currView = currView.viewContainerParent || currView.parent;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeIndex\r\n * @param {?} eventName\r\n * @param {?} event\r\n * @return {?}\r\n */\r\nfunction dispatchEvent(view, nodeIndex, eventName, event) {\r\n    try {\r\n        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];\r\n        var /** @type {?} */ startView = nodeDef.flags & 33554432 /* ComponentView */ ?\r\n            asElementData(view, nodeIndex).componentView :\r\n            view;\r\n        markParentViewsForCheck(startView);\r\n        return Services.handleEvent(view, nodeIndex, eventName, event);\r\n    }\r\n    catch (/** @type {?} */ e) {\r\n        // Attention: Don't rethrow, as it would cancel Observable subscriptions!\r\n        view.root.errorHandler.handleError(e);\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction declaredViewContainer(view) {\r\n    if (view.parent) {\r\n        var /** @type {?} */ parentView = view.parent;\r\n        return asElementData(parentView, /** @type {?} */ ((view.parentNodeDef)).nodeIndex);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * for component views, this is the host element.\r\n * for embedded views, this is the index of the parent node\r\n * that contains the view container.\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction viewParentEl(view) {\r\n    var /** @type {?} */ parentView = view.parent;\r\n    if (parentView) {\r\n        return /** @type {?} */ ((view.parentNodeDef)).parent;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction renderNode(view, def) {\r\n    switch (def.flags & 201347067 /* Types */) {\r\n        case 1 /* TypeElement */:\r\n            return asElementData(view, def.nodeIndex).renderElement;\r\n        case 2 /* TypeText */:\r\n            return asTextData(view, def.nodeIndex).renderText;\r\n    }\r\n}\r\n/**\r\n * @param {?} target\r\n * @param {?} name\r\n * @return {?}\r\n */\r\nfunction elementEventFullName(target, name) {\r\n    return target ? target + \":\" + name : name;\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction isComponentView(view) {\r\n    return !!view.parent && !!(/** @type {?} */ ((view.parentNodeDef)).flags & 32768 /* Component */);\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction isEmbeddedView(view) {\r\n    return !!view.parent && !(/** @type {?} */ ((view.parentNodeDef)).flags & 32768 /* Component */);\r\n}\r\n/**\r\n * @param {?} queryId\r\n * @return {?}\r\n */\r\nfunction filterQueryId(queryId) {\r\n    return 1 << (queryId % 32);\r\n}\r\n/**\r\n * @param {?} matchedQueriesDsl\r\n * @return {?}\r\n */\r\nfunction splitMatchedQueriesDsl(matchedQueriesDsl) {\r\n    var /** @type {?} */ matchedQueries = {};\r\n    var /** @type {?} */ matchedQueryIds = 0;\r\n    var /** @type {?} */ references = {};\r\n    if (matchedQueriesDsl) {\r\n        matchedQueriesDsl.forEach(function (_a) {\r\n            var queryId = _a[0], valueType = _a[1];\r\n            if (typeof queryId === 'number') {\r\n                matchedQueries[queryId] = valueType;\r\n                matchedQueryIds |= filterQueryId(queryId);\r\n            }\r\n            else {\r\n                references[queryId] = valueType;\r\n            }\r\n        });\r\n    }\r\n    return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };\r\n}\r\n/**\r\n * @param {?} deps\r\n * @param {?=} sourceName\r\n * @return {?}\r\n */\r\nfunction splitDepsDsl(deps, sourceName) {\r\n    return deps.map(function (value) {\r\n        var /** @type {?} */ token;\r\n        var /** @type {?} */ flags;\r\n        if (Array.isArray(value)) {\r\n            flags = value[0], token = value[1];\r\n        }\r\n        else {\r\n            flags = 0 /* None */;\r\n            token = value;\r\n        }\r\n        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {\r\n            Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });\r\n        }\r\n        return { flags: flags, token: token, tokenKey: tokenKey(token) };\r\n    });\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} renderHost\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction getParentRenderElement(view, renderHost, def) {\r\n    var /** @type {?} */ renderParent = def.renderParent;\r\n    if (renderParent) {\r\n        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\r\n            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\r\n            (/** @type {?} */ ((renderParent.element)).componentRendererType && /** @type {?} */ ((/** @type {?} */ ((renderParent.element)).componentRendererType)).encapsulation === ViewEncapsulation.Native)) {\r\n            // only children of non components, or children of components with native encapsulation should\r\n            // be attached.\r\n            return asElementData(view, /** @type {?} */ ((def.renderParent)).nodeIndex).renderElement;\r\n        }\r\n    }\r\n    else {\r\n        return renderHost;\r\n    }\r\n}\r\nvar DEFINITION_CACHE = new WeakMap();\r\n/**\r\n * @template D\r\n * @param {?} factory\r\n * @return {?}\r\n */\r\nfunction resolveDefinition(factory) {\r\n    var /** @type {?} */ value = /** @type {?} */ (((DEFINITION_CACHE.get(factory))));\r\n    if (!value) {\r\n        value = factory(function () { return NOOP; });\r\n        value.factory = factory;\r\n        DEFINITION_CACHE.set(factory, value);\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction rootRenderNodes(view) {\r\n    var /** @type {?} */ renderNodes = [];\r\n    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\r\n    return renderNodes;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} action\r\n * @param {?} parentNode\r\n * @param {?} nextSibling\r\n * @param {?=} target\r\n * @return {?}\r\n */\r\nfunction visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\r\n    // We need to re-compute the parent node in case the nodes have been moved around manually\r\n    if (action === 3 /* RemoveChild */) {\r\n        parentNode = view.renderer.parentNode(renderNode(view, /** @type {?} */ ((view.def.lastRenderRootNode))));\r\n    }\r\n    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} action\r\n * @param {?} startIndex\r\n * @param {?} endIndex\r\n * @param {?} parentNode\r\n * @param {?} nextSibling\r\n * @param {?=} target\r\n * @return {?}\r\n */\r\nfunction visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\r\n    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {\r\n        var /** @type {?} */ nodeDef = view.def.nodes[i];\r\n        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\r\n            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\r\n        }\r\n        // jump to next sibling\r\n        i += nodeDef.childCount;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} ngContentIndex\r\n * @param {?} action\r\n * @param {?} parentNode\r\n * @param {?} nextSibling\r\n * @param {?=} target\r\n * @return {?}\r\n */\r\nfunction visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\r\n    var /** @type {?} */ compView = view;\r\n    while (compView && !isComponentView(compView)) {\r\n        compView = compView.parent;\r\n    }\r\n    var /** @type {?} */ hostView = /** @type {?} */ ((compView)).parent;\r\n    var /** @type {?} */ hostElDef = viewParentEl(/** @type {?} */ ((compView)));\r\n    var /** @type {?} */ startIndex = /** @type {?} */ ((hostElDef)).nodeIndex + 1;\r\n    var /** @type {?} */ endIndex = /** @type {?} */ ((hostElDef)).nodeIndex + /** @type {?} */ ((hostElDef)).childCount;\r\n    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {\r\n        var /** @type {?} */ nodeDef = /** @type {?} */ ((hostView)).def.nodes[i];\r\n        if (nodeDef.ngContentIndex === ngContentIndex) {\r\n            visitRenderNode(/** @type {?} */ ((hostView)), nodeDef, action, parentNode, nextSibling, target);\r\n        }\r\n        // jump to next sibling\r\n        i += nodeDef.childCount;\r\n    }\r\n    if (!/** @type {?} */ ((hostView)).parent) {\r\n        // a root view\r\n        var /** @type {?} */ projectedNodes = view.root.projectableNodes[ngContentIndex];\r\n        if (projectedNodes) {\r\n            for (var /** @type {?} */ i = 0; i < projectedNodes.length; i++) {\r\n                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} action\r\n * @param {?} parentNode\r\n * @param {?} nextSibling\r\n * @param {?=} target\r\n * @return {?}\r\n */\r\nfunction visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\r\n    if (nodeDef.flags & 8 /* TypeNgContent */) {\r\n        visitProjectedRenderNodes(view, /** @type {?} */ ((nodeDef.ngContent)).index, action, parentNode, nextSibling, target);\r\n    }\r\n    else {\r\n        var /** @type {?} */ rn = renderNode(view, nodeDef);\r\n        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\r\n            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\r\n            // Note: we might need to do both actions.\r\n            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\r\n                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\r\n            }\r\n            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\r\n                var /** @type {?} */ compView = asElementData(view, nodeDef.nodeIndex).componentView;\r\n                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\r\n            }\r\n        }\r\n        else {\r\n            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\r\n        }\r\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\r\n            var /** @type {?} */ embeddedViews = /** @type {?} */ ((asElementData(view, nodeDef.nodeIndex).viewContainer))._embeddedViews;\r\n            for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {\r\n                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\r\n            }\r\n        }\r\n        if (nodeDef.flags & 1 /* TypeElement */ && !/** @type {?} */ ((nodeDef.element)).name) {\r\n            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} renderNode\r\n * @param {?} action\r\n * @param {?} parentNode\r\n * @param {?} nextSibling\r\n * @param {?=} target\r\n * @return {?}\r\n */\r\nfunction execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\r\n    var /** @type {?} */ renderer = view.renderer;\r\n    switch (action) {\r\n        case 1 /* AppendChild */:\r\n            renderer.appendChild(parentNode, renderNode);\r\n            break;\r\n        case 2 /* InsertBefore */:\r\n            renderer.insertBefore(parentNode, renderNode, nextSibling);\r\n            break;\r\n        case 3 /* RemoveChild */:\r\n            renderer.removeChild(parentNode, renderNode);\r\n            break;\r\n        case 0 /* Collect */:\r\n            /** @type {?} */ ((target)).push(renderNode);\r\n            break;\r\n    }\r\n}\r\nvar NS_PREFIX_RE = /^:([^:]+):(.+)$/;\r\n/**\r\n * @param {?} name\r\n * @return {?}\r\n */\r\nfunction splitNamespace(name) {\r\n    if (name[0] === ':') {\r\n        var /** @type {?} */ match = /** @type {?} */ ((name.match(NS_PREFIX_RE)));\r\n        return [match[1], match[2]];\r\n    }\r\n    return ['', name];\r\n}\r\n/**\r\n * @param {?} bindings\r\n * @return {?}\r\n */\r\nfunction calcBindingFlags(bindings) {\r\n    var /** @type {?} */ flags = 0;\r\n    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {\r\n        flags |= bindings[i].flags;\r\n    }\r\n    return flags;\r\n}\r\n/**\r\n * @param {?} valueCount\r\n * @param {?} constAndInterp\r\n * @return {?}\r\n */\r\nfunction interpolate(valueCount, constAndInterp) {\r\n    var /** @type {?} */ result = '';\r\n    for (var /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {\r\n        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\r\n    }\r\n    return result + constAndInterp[valueCount * 2];\r\n}\r\n/**\r\n * @param {?} valueCount\r\n * @param {?} c0\r\n * @param {?} a1\r\n * @param {?} c1\r\n * @param {?=} a2\r\n * @param {?=} c2\r\n * @param {?=} a3\r\n * @param {?=} c3\r\n * @param {?=} a4\r\n * @param {?=} c4\r\n * @param {?=} a5\r\n * @param {?=} c5\r\n * @param {?=} a6\r\n * @param {?=} c6\r\n * @param {?=} a7\r\n * @param {?=} c7\r\n * @param {?=} a8\r\n * @param {?=} c8\r\n * @param {?=} a9\r\n * @param {?=} c9\r\n * @return {?}\r\n */\r\nfunction inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\r\n    switch (valueCount) {\r\n        case 1:\r\n            return c0 + _toStringWithNull(a1) + c1;\r\n        case 2:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\r\n        case 3:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3;\r\n        case 4:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3 + _toStringWithNull(a4) + c4;\r\n        case 5:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\r\n        case 6:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\r\n        case 7:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\r\n                c6 + _toStringWithNull(a7) + c7;\r\n        case 8:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\r\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\r\n        case 9:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\r\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\r\n        default:\r\n            throw new Error(\"Does not support more than 9 expressions\");\r\n    }\r\n}\r\n/**\r\n * @param {?} v\r\n * @return {?}\r\n */\r\nfunction _toStringWithNull(v) {\r\n    return v != null ? v.toString() : '';\r\n}\r\nvar EMPTY_ARRAY$2 = [];\r\nvar EMPTY_MAP = {};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} flags\r\n * @param {?} matchedQueriesDsl\r\n * @param {?} ngContentIndex\r\n * @param {?} childCount\r\n * @param {?=} handleEvent\r\n * @param {?=} templateFactory\r\n * @return {?}\r\n */\r\nfunction anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\r\n    flags |= 1 /* TypeElement */;\r\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\r\n    var /** @type {?} */ template = templateFactory ? resolveDefinition(templateFactory) : null;\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        flags: flags,\r\n        checkIndex: -1,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\r\n        bindings: [],\r\n        bindingFlags: 0,\r\n        outputs: [],\r\n        element: {\r\n            ns: null,\r\n            name: null,\r\n            attrs: null, template: template,\r\n            componentProvider: null,\r\n            componentView: null,\r\n            componentRendererType: null,\r\n            publicProviders: null,\r\n            allProviders: null,\r\n            handleEvent: handleEvent || NOOP\r\n        },\r\n        provider: null,\r\n        text: null,\r\n        query: null,\r\n        ngContent: null\r\n    };\r\n}\r\n/**\r\n * @param {?} checkIndex\r\n * @param {?} flags\r\n * @param {?} matchedQueriesDsl\r\n * @param {?} ngContentIndex\r\n * @param {?} childCount\r\n * @param {?} namespaceAndName\r\n * @param {?=} fixedAttrs\r\n * @param {?=} bindings\r\n * @param {?=} outputs\r\n * @param {?=} handleEvent\r\n * @param {?=} componentView\r\n * @param {?=} componentRendererType\r\n * @return {?}\r\n */\r\nfunction elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {\r\n    if (fixedAttrs === void 0) { fixedAttrs = []; }\r\n    if (!handleEvent) {\r\n        handleEvent = NOOP;\r\n    }\r\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\r\n    var /** @type {?} */ ns = /** @type {?} */ ((null));\r\n    var /** @type {?} */ name = /** @type {?} */ ((null));\r\n    if (namespaceAndName) {\r\n        _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];\r\n    }\r\n    bindings = bindings || [];\r\n    var /** @type {?} */ bindingDefs = new Array(bindings.length);\r\n    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {\r\n        var _c = bindings[i], bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];\r\n        var _d = splitNamespace(namespaceAndName_1), ns_1 = _d[0], name_1 = _d[1];\r\n        var /** @type {?} */ securityContext = /** @type {?} */ ((undefined));\r\n        var /** @type {?} */ suffix = /** @type {?} */ ((undefined));\r\n        switch (bindingFlags & 15 /* Types */) {\r\n            case 4 /* TypeElementStyle */:\r\n                suffix = /** @type {?} */ (suffixOrSecurityContext);\r\n                break;\r\n            case 1 /* TypeElementAttribute */:\r\n            case 8 /* TypeProperty */:\r\n                securityContext = /** @type {?} */ (suffixOrSecurityContext);\r\n                break;\r\n        }\r\n        bindingDefs[i] =\r\n            { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };\r\n    }\r\n    outputs = outputs || [];\r\n    var /** @type {?} */ outputDefs = new Array(outputs.length);\r\n    for (var /** @type {?} */ i = 0; i < outputs.length; i++) {\r\n        var _e = outputs[i], target = _e[0], eventName = _e[1];\r\n        outputDefs[i] = {\r\n            type: 0 /* ElementOutput */,\r\n            target: /** @type {?} */ (target), eventName: eventName,\r\n            propName: null\r\n        };\r\n    }\r\n    fixedAttrs = fixedAttrs || [];\r\n    var /** @type {?} */ attrs = /** @type {?} */ (fixedAttrs.map(function (_a) {\r\n        var namespaceAndName = _a[0], value = _a[1];\r\n        var _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];\r\n        return [ns, name, value];\r\n    }));\r\n    componentRendererType = resolveRendererType2(componentRendererType);\r\n    if (componentView) {\r\n        flags |= 33554432 /* ComponentView */;\r\n    }\r\n    flags |= 1 /* TypeElement */;\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        checkIndex: checkIndex,\r\n        flags: flags,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\r\n        bindings: bindingDefs,\r\n        bindingFlags: calcBindingFlags(bindingDefs),\r\n        outputs: outputDefs,\r\n        element: {\r\n            ns: ns,\r\n            name: name,\r\n            attrs: attrs,\r\n            template: null,\r\n            // will bet set by the view definition\r\n            componentProvider: null,\r\n            componentView: componentView || null,\r\n            componentRendererType: componentRendererType,\r\n            publicProviders: null,\r\n            allProviders: null,\r\n            handleEvent: handleEvent || NOOP,\r\n        },\r\n        provider: null,\r\n        text: null,\r\n        query: null,\r\n        ngContent: null\r\n    };\r\n    var _b;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} renderHost\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction createElement(view, renderHost, def) {\r\n    var /** @type {?} */ elDef = /** @type {?} */ ((def.element));\r\n    var /** @type {?} */ rootSelectorOrNode = view.root.selectorOrNode;\r\n    var /** @type {?} */ renderer = view.renderer;\r\n    var /** @type {?} */ el;\r\n    if (view.parent || !rootSelectorOrNode) {\r\n        if (elDef.name) {\r\n            el = renderer.createElement(elDef.name, elDef.ns);\r\n        }\r\n        else {\r\n            el = renderer.createComment('');\r\n        }\r\n        var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);\r\n        if (parentEl) {\r\n            renderer.appendChild(parentEl, el);\r\n        }\r\n    }\r\n    else {\r\n        el = renderer.selectRootElement(rootSelectorOrNode);\r\n    }\r\n    if (elDef.attrs) {\r\n        for (var /** @type {?} */ i = 0; i < elDef.attrs.length; i++) {\r\n            var _a = elDef.attrs[i], ns = _a[0], name_2 = _a[1], value = _a[2];\r\n            renderer.setAttribute(el, name_2, value, ns);\r\n        }\r\n    }\r\n    return el;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} compView\r\n * @param {?} def\r\n * @param {?} el\r\n * @return {?}\r\n */\r\nfunction listenToElementOutputs(view, compView, def, el) {\r\n    for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {\r\n        var /** @type {?} */ output = def.outputs[i];\r\n        var /** @type {?} */ handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\r\n        var /** @type {?} */ listenTarget = output.target;\r\n        var /** @type {?} */ listenerView = view;\r\n        if (output.target === 'component') {\r\n            listenTarget = null;\r\n            listenerView = compView;\r\n        }\r\n        var /** @type {?} */ disposable = /** @type {?} */ (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure)); /** @type {?} */\r\n        ((view.disposables))[def.outputIndex + i] = disposable;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} index\r\n * @param {?} eventName\r\n * @return {?}\r\n */\r\nfunction renderEventHandlerClosure(view, index, eventName) {\r\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} v0\r\n * @param {?} v1\r\n * @param {?} v2\r\n * @param {?} v3\r\n * @param {?} v4\r\n * @param {?} v5\r\n * @param {?} v6\r\n * @param {?} v7\r\n * @param {?} v8\r\n * @param {?} v9\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    var /** @type {?} */ bindLen = def.bindings.length;\r\n    var /** @type {?} */ changed = false;\r\n    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))\r\n        changed = true;\r\n    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))\r\n        changed = true;\r\n    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))\r\n        changed = true;\r\n    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))\r\n        changed = true;\r\n    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))\r\n        changed = true;\r\n    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))\r\n        changed = true;\r\n    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))\r\n        changed = true;\r\n    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))\r\n        changed = true;\r\n    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))\r\n        changed = true;\r\n    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))\r\n        changed = true;\r\n    return changed;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} values\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateElementDynamic(view, def, values) {\r\n    var /** @type {?} */ changed = false;\r\n    for (var /** @type {?} */ i = 0; i < values.length; i++) {\r\n        if (checkAndUpdateElementValue(view, def, i, values[i]))\r\n            changed = true;\r\n    }\r\n    return changed;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} bindingIdx\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateElementValue(view, def, bindingIdx, value) {\r\n    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\r\n        return false;\r\n    }\r\n    var /** @type {?} */ binding = def.bindings[bindingIdx];\r\n    var /** @type {?} */ elData = asElementData(view, def.nodeIndex);\r\n    var /** @type {?} */ renderNode$$1 = elData.renderElement;\r\n    var /** @type {?} */ name = /** @type {?} */ ((binding.name));\r\n    switch (binding.flags & 15 /* Types */) {\r\n        case 1 /* TypeElementAttribute */:\r\n            setElementAttribute(view, binding, renderNode$$1, binding.ns, name, value);\r\n            break;\r\n        case 2 /* TypeElementClass */:\r\n            setElementClass(view, renderNode$$1, name, value);\r\n            break;\r\n        case 4 /* TypeElementStyle */:\r\n            setElementStyle(view, binding, renderNode$$1, name, value);\r\n            break;\r\n        case 8 /* TypeProperty */:\r\n            var /** @type {?} */ bindView = (def.flags & 33554432 /* ComponentView */ &&\r\n                binding.flags & 32 /* SyntheticHostProperty */) ?\r\n                elData.componentView :\r\n                view;\r\n            setElementProperty(bindView, binding, renderNode$$1, name, value);\r\n            break;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} binding\r\n * @param {?} renderNode\r\n * @param {?} ns\r\n * @param {?} name\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction setElementAttribute(view, binding, renderNode$$1, ns, name, value) {\r\n    var /** @type {?} */ securityContext = binding.securityContext;\r\n    var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\r\n    renderValue = renderValue != null ? renderValue.toString() : null;\r\n    var /** @type {?} */ renderer = view.renderer;\r\n    if (value != null) {\r\n        renderer.setAttribute(renderNode$$1, name, renderValue, ns);\r\n    }\r\n    else {\r\n        renderer.removeAttribute(renderNode$$1, name, ns);\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} renderNode\r\n * @param {?} name\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction setElementClass(view, renderNode$$1, name, value) {\r\n    var /** @type {?} */ renderer = view.renderer;\r\n    if (value) {\r\n        renderer.addClass(renderNode$$1, name);\r\n    }\r\n    else {\r\n        renderer.removeClass(renderNode$$1, name);\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} binding\r\n * @param {?} renderNode\r\n * @param {?} name\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction setElementStyle(view, binding, renderNode$$1, name, value) {\r\n    var /** @type {?} */ renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, /** @type {?} */ (value));\r\n    if (renderValue != null) {\r\n        renderValue = renderValue.toString();\r\n        var /** @type {?} */ unit = binding.suffix;\r\n        if (unit != null) {\r\n            renderValue = renderValue + unit;\r\n        }\r\n    }\r\n    else {\r\n        renderValue = null;\r\n    }\r\n    var /** @type {?} */ renderer = view.renderer;\r\n    if (renderValue != null) {\r\n        renderer.setStyle(renderNode$$1, name, renderValue);\r\n    }\r\n    else {\r\n        renderer.removeStyle(renderNode$$1, name);\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} binding\r\n * @param {?} renderNode\r\n * @param {?} name\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction setElementProperty(view, binding, renderNode$$1, name, value) {\r\n    var /** @type {?} */ securityContext = binding.securityContext;\r\n    var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\r\n    view.renderer.setProperty(renderNode$$1, name, renderValue);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar UNDEFINED_VALUE = new Object();\r\nvar InjectorRefTokenKey$1 = tokenKey(Injector);\r\nvar INJECTORRefTokenKey$1 = tokenKey(INJECTOR);\r\nvar NgModuleRefTokenKey = tokenKey(NgModuleRef);\r\n/**\r\n * @param {?} flags\r\n * @param {?} token\r\n * @param {?} value\r\n * @param {?} deps\r\n * @return {?}\r\n */\r\nfunction moduleProvideDef(flags, token, value, deps) {\r\n    // Need to resolve forwardRefs as e.g. for `useValue` we\r\n    // lowered the expression and then stopped evaluating it,\r\n    // i.e. also didn't unwrap it.\r\n    value = resolveForwardRef(value);\r\n    var /** @type {?} */ depDefs = splitDepsDsl(deps, stringify(token));\r\n    return {\r\n        // will bet set by the module definition\r\n        index: -1,\r\n        deps: depDefs, flags: flags, token: token, value: value\r\n    };\r\n}\r\n/**\r\n * @param {?} providers\r\n * @return {?}\r\n */\r\nfunction moduleDef(providers) {\r\n    var /** @type {?} */ providersByKey = {};\r\n    var /** @type {?} */ modules = [];\r\n    var /** @type {?} */ isRoot = false;\r\n    for (var /** @type {?} */ i = 0; i < providers.length; i++) {\r\n        var /** @type {?} */ provider = providers[i];\r\n        if (provider.token === APP_ROOT) {\r\n            isRoot = true;\r\n        }\r\n        if (provider.flags & 1073741824 /* TypeNgModule */) {\r\n            modules.push(provider.token);\r\n        }\r\n        provider.index = i;\r\n        providersByKey[tokenKey(provider.token)] = provider;\r\n    }\r\n    return {\r\n        // Will be filled later...\r\n        factory: null,\r\n        providersByKey: providersByKey,\r\n        providers: providers,\r\n        modules: modules,\r\n        isRoot: isRoot,\r\n    };\r\n}\r\n/**\r\n * @param {?} data\r\n * @return {?}\r\n */\r\nfunction initNgModule(data) {\r\n    var /** @type {?} */ def = data._def;\r\n    var /** @type {?} */ providers = data._providers = new Array(def.providers.length);\r\n    for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {\r\n        var /** @type {?} */ provDef = def.providers[i];\r\n        if (!(provDef.flags & 4096 /* LazyProvider */)) {\r\n            providers[i] = _createProviderInstance$1(data, provDef);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} data\r\n * @param {?} depDef\r\n * @param {?=} notFoundValue\r\n * @return {?}\r\n */\r\nfunction resolveNgModuleDep(data, depDef, notFoundValue) {\r\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\r\n    if (depDef.flags & 8 /* Value */) {\r\n        return depDef.token;\r\n    }\r\n    if (depDef.flags & 2 /* Optional */) {\r\n        notFoundValue = null;\r\n    }\r\n    if (depDef.flags & 1 /* SkipSelf */) {\r\n        return data._parent.get(depDef.token, notFoundValue);\r\n    }\r\n    var /** @type {?} */ tokenKey$$1 = depDef.tokenKey;\r\n    switch (tokenKey$$1) {\r\n        case InjectorRefTokenKey$1:\r\n        case INJECTORRefTokenKey$1:\r\n        case NgModuleRefTokenKey:\r\n            return data;\r\n    }\r\n    var /** @type {?} */ providerDef = data._def.providersByKey[tokenKey$$1];\r\n    if (providerDef) {\r\n        var /** @type {?} */ providerInstance = data._providers[providerDef.index];\r\n        if (providerInstance === undefined) {\r\n            providerInstance = data._providers[providerDef.index] =\r\n                _createProviderInstance$1(data, providerDef);\r\n        }\r\n        return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\r\n    }\r\n    else if (depDef.token.ngInjectableDef && targetsModule(data, depDef.token.ngInjectableDef)) {\r\n        var /** @type {?} */ injectableDef = /** @type {?} */ (depDef.token.ngInjectableDef);\r\n        var /** @type {?} */ key = tokenKey$$1;\r\n        var /** @type {?} */ index = data._providers.length;\r\n        data._def.providersByKey[depDef.tokenKey] = {\r\n            flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,\r\n            value: injectableDef.factory,\r\n            deps: [], index: index,\r\n            token: depDef.token,\r\n        };\r\n        var /** @type {?} */ former = setCurrentInjector(data);\r\n        try {\r\n            data._providers[index] = UNDEFINED_VALUE;\r\n            return (data._providers[index] =\r\n                _createProviderInstance$1(data, data._def.providersByKey[depDef.tokenKey]));\r\n        }\r\n        finally {\r\n            setCurrentInjector(former);\r\n        }\r\n    }\r\n    return data._parent.get(depDef.token, notFoundValue);\r\n}\r\n/**\r\n * @param {?} ngModule\r\n * @param {?} scope\r\n * @return {?}\r\n */\r\nfunction moduleTransitivelyPresent(ngModule, scope) {\r\n    return ngModule._def.modules.indexOf(scope) > -1;\r\n}\r\n/**\r\n * @param {?} ngModule\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction targetsModule(ngModule, def) {\r\n    return def.providedIn != null && (moduleTransitivelyPresent(ngModule, def.providedIn) ||\r\n        def.providedIn === 'root' && ngModule._def.isRoot);\r\n}\r\n/**\r\n * @param {?} ngModule\r\n * @param {?} providerDef\r\n * @return {?}\r\n */\r\nfunction _createProviderInstance$1(ngModule, providerDef) {\r\n    var /** @type {?} */ injectable;\r\n    switch (providerDef.flags & 201347067 /* Types */) {\r\n        case 512 /* TypeClassProvider */:\r\n            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\r\n            break;\r\n        case 1024 /* TypeFactoryProvider */:\r\n            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\r\n            break;\r\n        case 2048 /* TypeUseExistingProvider */:\r\n            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\r\n            break;\r\n        case 256 /* TypeValueProvider */:\r\n            injectable = providerDef.value;\r\n            break;\r\n    }\r\n    return injectable === undefined ? UNDEFINED_VALUE : injectable;\r\n}\r\n/**\r\n * @param {?} ngModule\r\n * @param {?} ctor\r\n * @param {?} deps\r\n * @return {?}\r\n */\r\nfunction _createClass(ngModule, ctor, deps) {\r\n    var /** @type {?} */ len = deps.length;\r\n    switch (len) {\r\n        case 0:\r\n            return new ctor();\r\n        case 1:\r\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]));\r\n        case 2:\r\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\r\n        case 3:\r\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\r\n        default:\r\n            var /** @type {?} */ depValues = new Array(len);\r\n            for (var /** @type {?} */ i = 0; i < len; i++) {\r\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\r\n            }\r\n            return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();\r\n    }\r\n}\r\n/**\r\n * @param {?} ngModule\r\n * @param {?} factory\r\n * @param {?} deps\r\n * @return {?}\r\n */\r\nfunction _callFactory(ngModule, factory, deps) {\r\n    var /** @type {?} */ len = deps.length;\r\n    switch (len) {\r\n        case 0:\r\n            return factory();\r\n        case 1:\r\n            return factory(resolveNgModuleDep(ngModule, deps[0]));\r\n        case 2:\r\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\r\n        case 3:\r\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\r\n        default:\r\n            var /** @type {?} */ depValues = Array(len);\r\n            for (var /** @type {?} */ i = 0; i < len; i++) {\r\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\r\n            }\r\n            return factory.apply(void 0, depValues);\r\n    }\r\n}\r\n/**\r\n * @param {?} ngModule\r\n * @param {?} lifecycles\r\n * @return {?}\r\n */\r\nfunction callNgModuleLifecycle(ngModule, lifecycles) {\r\n    var /** @type {?} */ def = ngModule._def;\r\n    for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {\r\n        var /** @type {?} */ provDef = def.providers[i];\r\n        if (provDef.flags & 131072 /* OnDestroy */) {\r\n            var /** @type {?} */ instance = ngModule._providers[i];\r\n            if (instance && instance !== UNDEFINED_VALUE) {\r\n                instance.ngOnDestroy();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} parentView\r\n * @param {?} elementData\r\n * @param {?} viewIndex\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction attachEmbeddedView(parentView, elementData, viewIndex, view) {\r\n    var /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\r\n    if (viewIndex === null || viewIndex === undefined) {\r\n        viewIndex = embeddedViews.length;\r\n    }\r\n    view.viewContainerParent = parentView;\r\n    addToArray(embeddedViews, /** @type {?} */ ((viewIndex)), view);\r\n    attachProjectedView(elementData, view);\r\n    Services.dirtyParentQueries(view);\r\n    var /** @type {?} */ prevView = /** @type {?} */ ((viewIndex)) > 0 ? embeddedViews[/** @type {?} */ ((viewIndex)) - 1] : null;\r\n    renderAttachEmbeddedView(elementData, prevView, view);\r\n}\r\n/**\r\n * @param {?} vcElementData\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction attachProjectedView(vcElementData, view) {\r\n    var /** @type {?} */ dvcElementData = declaredViewContainer(view);\r\n    if (!dvcElementData || dvcElementData === vcElementData ||\r\n        view.state & 16 /* IsProjectedView */) {\r\n        return;\r\n    }\r\n    // Note: For performance reasons, we\r\n    // - add a view to template._projectedViews only 1x throughout its lifetime,\r\n    //   and remove it not until the view is destroyed.\r\n    //   (hard, as when a parent view is attached/detached we would need to attach/detach all\r\n    //    nested projected views as well, even across component boundaries).\r\n    // - don't track the insertion order of views in the projected views array\r\n    //   (hard, as when the views of the same template are inserted different view containers)\r\n    view.state |= 16 /* IsProjectedView */;\r\n    var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;\r\n    if (!projectedViews) {\r\n        projectedViews = dvcElementData.template._projectedViews = [];\r\n    }\r\n    projectedViews.push(view);\r\n    // Note: we are changing the NodeDef here as we cannot calculate\r\n    // the fact whether a template is used for projection during compilation.\r\n    markNodeAsProjectedTemplate(/** @type {?} */ ((view.parent)).def, /** @type {?} */ ((view.parentNodeDef)));\r\n}\r\n/**\r\n * @param {?} viewDef\r\n * @param {?} nodeDef\r\n * @return {?}\r\n */\r\nfunction markNodeAsProjectedTemplate(viewDef, nodeDef) {\r\n    if (nodeDef.flags & 4 /* ProjectedTemplate */) {\r\n        return;\r\n    }\r\n    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\r\n    nodeDef.flags |= 4 /* ProjectedTemplate */;\r\n    var /** @type {?} */ parentNodeDef = nodeDef.parent;\r\n    while (parentNodeDef) {\r\n        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\r\n        parentNodeDef = parentNodeDef.parent;\r\n    }\r\n}\r\n/**\r\n * @param {?} elementData\r\n * @param {?=} viewIndex\r\n * @return {?}\r\n */\r\nfunction detachEmbeddedView(elementData, viewIndex) {\r\n    var /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\r\n    if (viewIndex == null || viewIndex >= embeddedViews.length) {\r\n        viewIndex = embeddedViews.length - 1;\r\n    }\r\n    if (viewIndex < 0) {\r\n        return null;\r\n    }\r\n    var /** @type {?} */ view = embeddedViews[viewIndex];\r\n    view.viewContainerParent = null;\r\n    removeFromArray(embeddedViews, viewIndex);\r\n    // See attachProjectedView for why we don't update projectedViews here.\r\n    Services.dirtyParentQueries(view);\r\n    renderDetachView(view);\r\n    return view;\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction detachProjectedView(view) {\r\n    if (!(view.state & 16 /* IsProjectedView */)) {\r\n        return;\r\n    }\r\n    var /** @type {?} */ dvcElementData = declaredViewContainer(view);\r\n    if (dvcElementData) {\r\n        var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;\r\n        if (projectedViews) {\r\n            removeFromArray(projectedViews, projectedViews.indexOf(view));\r\n            Services.dirtyParentQueries(view);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} elementData\r\n * @param {?} oldViewIndex\r\n * @param {?} newViewIndex\r\n * @return {?}\r\n */\r\nfunction moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\r\n    var /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\r\n    var /** @type {?} */ view = embeddedViews[oldViewIndex];\r\n    removeFromArray(embeddedViews, oldViewIndex);\r\n    if (newViewIndex == null) {\r\n        newViewIndex = embeddedViews.length;\r\n    }\r\n    addToArray(embeddedViews, newViewIndex, view);\r\n    // Note: Don't need to change projectedViews as the order in there\r\n    // as always invalid...\r\n    Services.dirtyParentQueries(view);\r\n    renderDetachView(view);\r\n    var /** @type {?} */ prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\r\n    renderAttachEmbeddedView(elementData, prevView, view);\r\n    return view;\r\n}\r\n/**\r\n * @param {?} elementData\r\n * @param {?} prevView\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction renderAttachEmbeddedView(elementData, prevView, view) {\r\n    var /** @type {?} */ prevRenderNode = prevView ? renderNode(prevView, /** @type {?} */ ((prevView.def.lastRenderRootNode))) :\r\n        elementData.renderElement;\r\n    var /** @type {?} */ parentNode = view.renderer.parentNode(prevRenderNode);\r\n    var /** @type {?} */ nextSibling = view.renderer.nextSibling(prevRenderNode);\r\n    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\r\n    // However, browsers automatically do `appendChild` when there is no `nextSibling`.\r\n    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction renderDetachView(view) {\r\n    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\r\n}\r\n/**\r\n * @param {?} arr\r\n * @param {?} index\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction addToArray(arr, index, value) {\r\n    // perf: array.push is faster than array.splice!\r\n    if (index >= arr.length) {\r\n        arr.push(value);\r\n    }\r\n    else {\r\n        arr.splice(index, 0, value);\r\n    }\r\n}\r\n/**\r\n * @param {?} arr\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction removeFromArray(arr, index) {\r\n    // perf: array.pop is faster than array.splice!\r\n    if (index >= arr.length - 1) {\r\n        arr.pop();\r\n    }\r\n    else {\r\n        arr.splice(index, 1);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar EMPTY_CONTEXT = new Object();\r\n/**\r\n * @param {?} selector\r\n * @param {?} componentType\r\n * @param {?} viewDefFactory\r\n * @param {?} inputs\r\n * @param {?} outputs\r\n * @param {?} ngContentSelectors\r\n * @return {?}\r\n */\r\nfunction createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\r\n    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\r\n}\r\n/**\r\n * @param {?} componentFactory\r\n * @return {?}\r\n */\r\nfunction getComponentViewDefinitionFactory(componentFactory) {\r\n    return (/** @type {?} */ (componentFactory)).viewDefFactory;\r\n}\r\nvar ComponentFactory_ = /** @class */ (function (_super) {\r\n    __extends(ComponentFactory_, _super);\r\n    function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\r\n        var _this = \r\n        // Attention: this ctor is called as top level function.\r\n        // Putting any logic in here will destroy closure tree shaking!\r\n        _super.call(this) || this;\r\n        _this.selector = selector;\r\n        _this.componentType = componentType;\r\n        _this._inputs = _inputs;\r\n        _this._outputs = _outputs;\r\n        _this.ngContentSelectors = ngContentSelectors;\r\n        _this.viewDefFactory = viewDefFactory;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ComponentFactory_.prototype, \"inputs\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var /** @type {?} */ inputsArr = [];\r\n            var /** @type {?} */ inputs = /** @type {?} */ ((this._inputs));\r\n            for (var /** @type {?} */ propName in inputs) {\r\n                var /** @type {?} */ templateName = inputs[propName];\r\n                inputsArr.push({ propName: propName, templateName: templateName });\r\n            }\r\n            return inputsArr;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ComponentFactory_.prototype, \"outputs\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var /** @type {?} */ outputsArr = [];\r\n            for (var /** @type {?} */ propName in this._outputs) {\r\n                var /** @type {?} */ templateName = this._outputs[propName];\r\n                outputsArr.push({ propName: propName, templateName: templateName });\r\n            }\r\n            return outputsArr;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates a new component.\r\n     */\r\n    /**\r\n     * Creates a new component.\r\n     * @param {?} injector\r\n     * @param {?=} projectableNodes\r\n     * @param {?=} rootSelectorOrNode\r\n     * @param {?=} ngModule\r\n     * @return {?}\r\n     */\r\n    ComponentFactory_.prototype.create = /**\r\n     * Creates a new component.\r\n     * @param {?} injector\r\n     * @param {?=} projectableNodes\r\n     * @param {?=} rootSelectorOrNode\r\n     * @param {?=} ngModule\r\n     * @return {?}\r\n     */\r\n    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\r\n        if (!ngModule) {\r\n            throw new Error('ngModule should be provided');\r\n        }\r\n        var /** @type {?} */ viewDef = resolveDefinition(this.viewDefFactory);\r\n        var /** @type {?} */ componentNodeIndex = /** @type {?} */ ((/** @type {?} */ ((viewDef.nodes[0].element)).componentProvider)).nodeIndex;\r\n        var /** @type {?} */ view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\r\n        var /** @type {?} */ component = asProviderData(view, componentNodeIndex).instance;\r\n        if (rootSelectorOrNode) {\r\n            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\r\n        }\r\n        return new ComponentRef_(view, new ViewRef_(view), component);\r\n    };\r\n    return ComponentFactory_;\r\n}(ComponentFactory));\r\nvar ComponentRef_ = /** @class */ (function (_super) {\r\n    __extends(ComponentRef_, _super);\r\n    function ComponentRef_(_view, _viewRef, _component) {\r\n        var _this = _super.call(this) || this;\r\n        _this._view = _view;\r\n        _this._viewRef = _viewRef;\r\n        _this._component = _component;\r\n        _this._elDef = _this._view.def.nodes[0];\r\n        _this.hostView = _viewRef;\r\n        _this.changeDetectorRef = _viewRef;\r\n        _this.instance = _component;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ComponentRef_.prototype, \"location\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ComponentRef_.prototype, \"injector\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return new Injector_(this._view, this._elDef); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ComponentRef_.prototype, \"componentType\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return /** @type {?} */ (this._component.constructor); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ComponentRef_.prototype.destroy = /**\r\n     * @return {?}\r\n     */\r\n    function () { this._viewRef.destroy(); };\r\n    /**\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    ComponentRef_.prototype.onDestroy = /**\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    function (callback) { this._viewRef.onDestroy(callback); };\r\n    return ComponentRef_;\r\n}(ComponentRef));\r\n/**\r\n * @param {?} view\r\n * @param {?} elDef\r\n * @param {?} elData\r\n * @return {?}\r\n */\r\nfunction createViewContainerData(view, elDef, elData) {\r\n    return new ViewContainerRef_(view, elDef, elData);\r\n}\r\nvar ViewContainerRef_ = /** @class */ (function () {\r\n    function ViewContainerRef_(_view, _elDef, _data) {\r\n        this._view = _view;\r\n        this._elDef = _elDef;\r\n        this._data = _data;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._embeddedViews = [];\r\n    }\r\n    Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return new ElementRef(this._data.renderElement); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return new Injector_(this._view, this._elDef); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var /** @type {?} */ view = this._view;\r\n            var /** @type {?} */ elDef = this._elDef.parent;\r\n            while (!elDef && view) {\r\n                elDef = viewParentEl(view);\r\n                view = /** @type {?} */ ((view.parent));\r\n            }\r\n            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ViewContainerRef_.prototype.clear = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var /** @type {?} */ len = this._embeddedViews.length;\r\n        for (var /** @type {?} */ i = len - 1; i >= 0; i--) {\r\n            var /** @type {?} */ view = /** @type {?} */ ((detachEmbeddedView(this._data, i)));\r\n            Services.destroyView(view);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    ViewContainerRef_.prototype.get = /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    function (index) {\r\n        var /** @type {?} */ view = this._embeddedViews[index];\r\n        if (view) {\r\n            var /** @type {?} */ ref = new ViewRef_(view);\r\n            ref.attachToViewContainerRef(this);\r\n            return ref;\r\n        }\r\n        return null;\r\n    };\r\n    Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return this._embeddedViews.length; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @template C\r\n     * @param {?} templateRef\r\n     * @param {?=} context\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    ViewContainerRef_.prototype.createEmbeddedView = /**\r\n     * @template C\r\n     * @param {?} templateRef\r\n     * @param {?=} context\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    function (templateRef, context, index) {\r\n        var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context || /** @type {?} */ ({}));\r\n        this.insert(viewRef, index);\r\n        return viewRef;\r\n    };\r\n    /**\r\n     * @template C\r\n     * @param {?} componentFactory\r\n     * @param {?=} index\r\n     * @param {?=} injector\r\n     * @param {?=} projectableNodes\r\n     * @param {?=} ngModuleRef\r\n     * @return {?}\r\n     */\r\n    ViewContainerRef_.prototype.createComponent = /**\r\n     * @template C\r\n     * @param {?} componentFactory\r\n     * @param {?=} index\r\n     * @param {?=} injector\r\n     * @param {?=} projectableNodes\r\n     * @param {?=} ngModuleRef\r\n     * @return {?}\r\n     */\r\n    function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\r\n        var /** @type {?} */ contextInjector = injector || this.parentInjector;\r\n        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\r\n            ngModuleRef = contextInjector.get(NgModuleRef);\r\n        }\r\n        var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\r\n        this.insert(componentRef.hostView, index);\r\n        return componentRef;\r\n    };\r\n    /**\r\n     * @param {?} viewRef\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    ViewContainerRef_.prototype.insert = /**\r\n     * @param {?} viewRef\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    function (viewRef, index) {\r\n        if (viewRef.destroyed) {\r\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\r\n        }\r\n        var /** @type {?} */ viewRef_ = /** @type {?} */ (viewRef);\r\n        var /** @type {?} */ viewData = viewRef_._view;\r\n        attachEmbeddedView(this._view, this._data, index, viewData);\r\n        viewRef_.attachToViewContainerRef(this);\r\n        return viewRef;\r\n    };\r\n    /**\r\n     * @param {?} viewRef\r\n     * @param {?} currentIndex\r\n     * @return {?}\r\n     */\r\n    ViewContainerRef_.prototype.move = /**\r\n     * @param {?} viewRef\r\n     * @param {?} currentIndex\r\n     * @return {?}\r\n     */\r\n    function (viewRef, currentIndex) {\r\n        if (viewRef.destroyed) {\r\n            throw new Error('Cannot move a destroyed View in a ViewContainer!');\r\n        }\r\n        var /** @type {?} */ previousIndex = this._embeddedViews.indexOf(viewRef._view);\r\n        moveEmbeddedView(this._data, previousIndex, currentIndex);\r\n        return viewRef;\r\n    };\r\n    /**\r\n     * @param {?} viewRef\r\n     * @return {?}\r\n     */\r\n    ViewContainerRef_.prototype.indexOf = /**\r\n     * @param {?} viewRef\r\n     * @return {?}\r\n     */\r\n    function (viewRef) {\r\n        return this._embeddedViews.indexOf((/** @type {?} */ (viewRef))._view);\r\n    };\r\n    /**\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    ViewContainerRef_.prototype.remove = /**\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    function (index) {\r\n        var /** @type {?} */ viewData = detachEmbeddedView(this._data, index);\r\n        if (viewData) {\r\n            Services.destroyView(viewData);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    ViewContainerRef_.prototype.detach = /**\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    function (index) {\r\n        var /** @type {?} */ view = detachEmbeddedView(this._data, index);\r\n        return view ? new ViewRef_(view) : null;\r\n    };\r\n    return ViewContainerRef_;\r\n}());\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction createChangeDetectorRef(view) {\r\n    return new ViewRef_(view);\r\n}\r\nvar ViewRef_ = /** @class */ (function () {\r\n    function ViewRef_(_view) {\r\n        this._view = _view;\r\n        this._viewContainerRef = null;\r\n        this._appRef = null;\r\n    }\r\n    Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return rootRenderNodes(this._view); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ViewRef_.prototype, \"context\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return this._view.context; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return (this._view.state & 128 /* Destroyed */) !== 0; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ViewRef_.prototype.markForCheck = /**\r\n     * @return {?}\r\n     */\r\n    function () { markParentViewsForCheck(this._view); };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ViewRef_.prototype.detach = /**\r\n     * @return {?}\r\n     */\r\n    function () { this._view.state &= ~4 /* Attached */; };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ViewRef_.prototype.detectChanges = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var /** @type {?} */ fs = this._view.root.rendererFactory;\r\n        if (fs.begin) {\r\n            fs.begin();\r\n        }\r\n        try {\r\n            Services.checkAndUpdateView(this._view);\r\n        }\r\n        finally {\r\n            if (fs.end) {\r\n                fs.end();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ViewRef_.prototype.checkNoChanges = /**\r\n     * @return {?}\r\n     */\r\n    function () { Services.checkNoChangesView(this._view); };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ViewRef_.prototype.reattach = /**\r\n     * @return {?}\r\n     */\r\n    function () { this._view.state |= 4 /* Attached */; };\r\n    /**\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    ViewRef_.prototype.onDestroy = /**\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    function (callback) {\r\n        if (!this._view.disposables) {\r\n            this._view.disposables = [];\r\n        }\r\n        this._view.disposables.push(/** @type {?} */ (callback));\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ViewRef_.prototype.destroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._appRef) {\r\n            this._appRef.detachView(this);\r\n        }\r\n        else if (this._viewContainerRef) {\r\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\r\n        }\r\n        Services.destroyView(this._view);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ViewRef_.prototype.detachFromAppRef = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._appRef = null;\r\n        renderDetachView(this._view);\r\n        Services.dirtyParentQueries(this._view);\r\n    };\r\n    /**\r\n     * @param {?} appRef\r\n     * @return {?}\r\n     */\r\n    ViewRef_.prototype.attachToAppRef = /**\r\n     * @param {?} appRef\r\n     * @return {?}\r\n     */\r\n    function (appRef) {\r\n        if (this._viewContainerRef) {\r\n            throw new Error('This view is already attached to a ViewContainer!');\r\n        }\r\n        this._appRef = appRef;\r\n    };\r\n    /**\r\n     * @param {?} vcRef\r\n     * @return {?}\r\n     */\r\n    ViewRef_.prototype.attachToViewContainerRef = /**\r\n     * @param {?} vcRef\r\n     * @return {?}\r\n     */\r\n    function (vcRef) {\r\n        if (this._appRef) {\r\n            throw new Error('This view is already attached directly to the ApplicationRef!');\r\n        }\r\n        this._viewContainerRef = vcRef;\r\n    };\r\n    return ViewRef_;\r\n}());\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction createTemplateData(view, def) {\r\n    return new TemplateRef_(view, def);\r\n}\r\nvar TemplateRef_ = /** @class */ (function (_super) {\r\n    __extends(TemplateRef_, _super);\r\n    function TemplateRef_(_parentView, _def) {\r\n        var _this = _super.call(this) || this;\r\n        _this._parentView = _parentView;\r\n        _this._def = _def;\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    TemplateRef_.prototype.createEmbeddedView = /**\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    function (context) {\r\n        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, /** @type {?} */ ((/** @type {?} */ ((this._def.element)).template)), context));\r\n    };\r\n    Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return TemplateRef_;\r\n}(TemplateRef));\r\n/**\r\n * @param {?} view\r\n * @param {?} elDef\r\n * @return {?}\r\n */\r\nfunction createInjector$1(view, elDef) {\r\n    return new Injector_(view, elDef);\r\n}\r\nvar Injector_ = /** @class */ (function () {\r\n    function Injector_(view, elDef) {\r\n        this.view = view;\r\n        this.elDef = elDef;\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @return {?}\r\n     */\r\n    Injector_.prototype.get = /**\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @return {?}\r\n     */\r\n    function (token, notFoundValue) {\r\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\r\n        var /** @type {?} */ allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\r\n        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);\r\n    };\r\n    return Injector_;\r\n}());\r\n/**\r\n * @param {?} view\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction nodeValue(view, index) {\r\n    var /** @type {?} */ def = view.def.nodes[index];\r\n    if (def.flags & 1 /* TypeElement */) {\r\n        var /** @type {?} */ elData = asElementData(view, def.nodeIndex);\r\n        return /** @type {?} */ ((def.element)).template ? elData.template : elData.renderElement;\r\n    }\r\n    else if (def.flags & 2 /* TypeText */) {\r\n        return asTextData(view, def.nodeIndex).renderText;\r\n    }\r\n    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\r\n        return asProviderData(view, def.nodeIndex).instance;\r\n    }\r\n    throw new Error(\"Illegal state: read nodeValue for node index \" + index);\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction createRendererV1(view) {\r\n    return new RendererAdapter(view.renderer);\r\n}\r\nvar RendererAdapter = /** @class */ (function () {\r\n    function RendererAdapter(delegate) {\r\n        this.delegate = delegate;\r\n    }\r\n    /**\r\n     * @param {?} selectorOrNode\r\n     * @return {?}\r\n     */\r\n    RendererAdapter.prototype.selectRootElement = /**\r\n     * @param {?} selectorOrNode\r\n     * @return {?}\r\n     */\r\n    function (selectorOrNode) {\r\n        return this.delegate.selectRootElement(selectorOrNode);\r\n    };\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} namespaceAndName\r\n     * @return {?}\r\n     */\r\n    RendererAdapter.prototype.createElement = /**\r\n     * @param {?} parent\r\n     * @param {?} namespaceAndName\r\n     * @return {?}\r\n     */\r\n    function (parent, namespaceAndName) {\r\n        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\r\n        var /** @type {?} */ el = this.delegate.createElement(name, ns);\r\n        if (parent) {\r\n            this.delegate.appendChild(parent, el);\r\n        }\r\n        return el;\r\n    };\r\n    /**\r\n     * @param {?} hostElement\r\n     * @return {?}\r\n     */\r\n    RendererAdapter.prototype.createViewRoot = /**\r\n     * @param {?} hostElement\r\n     * @return {?}\r\n     */\r\n    function (hostElement) { return hostElement; };\r\n    /**\r\n     * @param {?} parentElement\r\n     * @return {?}\r\n     */\r\n    RendererAdapter.prototype.createTemplateAnchor = /**\r\n     * @param {?} parentElement\r\n     * @return {?}\r\n     */\r\n    function (parentElement) {\r\n        var /** @type {?} */ comment = this.delegate.createComment('');\r\n        if (parentElement) {\r\n            this.delegate.appendChild(parentElement, comment);\r\n        }\r\n        return comment;\r\n    };\r\n    /**\r\n     * @param {?} parentElement\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    RendererAdapter.prototype.createText = /**\r\n     * @param {?} parentElement\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (parentElement, value) {\r\n        var /** @type {?} */ node = this.delegate.createText(value);\r\n        if (parentElement) {\r\n            this.delegate.appendChild(parentElement, node);\r\n        }\r\n        return node;\r\n    };\r\n    /**\r\n     * @param {?} parentElement\r\n     * @param {?} nodes\r\n     * @return {?}\r\n     */\r\n    RendererAdapter.prototype.projectNodes = /**\r\n     * @param {?} parentElement\r\n     * @param {?} nodes\r\n     * @return {?}\r\n     */\r\n    function (parentElement, nodes) {\r\n        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {\r\n            this.delegate.appendChild(parentElement, nodes[i]);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} node\r\n     * @param {?} viewRootNodes\r\n     * @return {?}\r\n     */\r\n    RendererAdapter.prototype.attachViewAfter = /**\r\n     * @param {?} node\r\n     * @param {?} viewRootNodes\r\n     * @return {?}\r\n     */\r\n    function (node, viewRootNodes) {\r\n        var /** @type {?} */ parentElement = this.delegate.parentNode(node);\r\n        var /** @type {?} */ nextSibling = this.delegate.nextSibling(node);\r\n        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {\r\n            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} viewRootNodes\r\n     * @return {?}\r\n     */\r\n    RendererAdapter.prototype.detachView = /**\r\n     * @param {?} viewRootNodes\r\n     * @return {?}\r\n     */\r\n    function (viewRootNodes) {\r\n        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {\r\n            var /** @type {?} */ node = viewRootNodes[i];\r\n            var /** @type {?} */ parentElement = this.delegate.parentNode(node);\r\n            this.delegate.removeChild(parentElement, node);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} hostElement\r\n     * @param {?} viewAllNodes\r\n     * @return {?}\r\n     */\r\n    RendererAdapter.prototype.destroyView = /**\r\n     * @param {?} hostElement\r\n     * @param {?} viewAllNodes\r\n     * @return {?}\r\n     */\r\n    function (hostElement, viewAllNodes) {\r\n        for (var /** @type {?} */ i = 0; i < viewAllNodes.length; i++) {\r\n            /** @type {?} */ ((this.delegate.destroyNode))(viewAllNodes[i]);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} renderElement\r\n     * @param {?} name\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    RendererAdapter.prototype.listen = /**\r\n     * @param {?} renderElement\r\n     * @param {?} name\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    function (renderElement, name, callback) {\r\n        return this.delegate.listen(renderElement, name, /** @type {?} */ (callback));\r\n    };\r\n    /**\r\n     * @param {?} target\r\n     * @param {?} name\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    RendererAdapter.prototype.listenGlobal = /**\r\n     * @param {?} target\r\n     * @param {?} name\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    function (target, name, callback) {\r\n        return this.delegate.listen(target, name, /** @type {?} */ (callback));\r\n    };\r\n    /**\r\n     * @param {?} renderElement\r\n     * @param {?} propertyName\r\n     * @param {?} propertyValue\r\n     * @return {?}\r\n     */\r\n    RendererAdapter.prototype.setElementProperty = /**\r\n     * @param {?} renderElement\r\n     * @param {?} propertyName\r\n     * @param {?} propertyValue\r\n     * @return {?}\r\n     */\r\n    function (renderElement, propertyName, propertyValue) {\r\n        this.delegate.setProperty(renderElement, propertyName, propertyValue);\r\n    };\r\n    /**\r\n     * @param {?} renderElement\r\n     * @param {?} namespaceAndName\r\n     * @param {?} attributeValue\r\n     * @return {?}\r\n     */\r\n    RendererAdapter.prototype.setElementAttribute = /**\r\n     * @param {?} renderElement\r\n     * @param {?} namespaceAndName\r\n     * @param {?} attributeValue\r\n     * @return {?}\r\n     */\r\n    function (renderElement, namespaceAndName, attributeValue) {\r\n        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\r\n        if (attributeValue != null) {\r\n            this.delegate.setAttribute(renderElement, name, attributeValue, ns);\r\n        }\r\n        else {\r\n            this.delegate.removeAttribute(renderElement, name, ns);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} renderElement\r\n     * @param {?} propertyName\r\n     * @param {?} propertyValue\r\n     * @return {?}\r\n     */\r\n    RendererAdapter.prototype.setBindingDebugInfo = /**\r\n     * @param {?} renderElement\r\n     * @param {?} propertyName\r\n     * @param {?} propertyValue\r\n     * @return {?}\r\n     */\r\n    function (renderElement, propertyName, propertyValue) { };\r\n    /**\r\n     * @param {?} renderElement\r\n     * @param {?} className\r\n     * @param {?} isAdd\r\n     * @return {?}\r\n     */\r\n    RendererAdapter.prototype.setElementClass = /**\r\n     * @param {?} renderElement\r\n     * @param {?} className\r\n     * @param {?} isAdd\r\n     * @return {?}\r\n     */\r\n    function (renderElement, className, isAdd) {\r\n        if (isAdd) {\r\n            this.delegate.addClass(renderElement, className);\r\n        }\r\n        else {\r\n            this.delegate.removeClass(renderElement, className);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} renderElement\r\n     * @param {?} styleName\r\n     * @param {?} styleValue\r\n     * @return {?}\r\n     */\r\n    RendererAdapter.prototype.setElementStyle = /**\r\n     * @param {?} renderElement\r\n     * @param {?} styleName\r\n     * @param {?} styleValue\r\n     * @return {?}\r\n     */\r\n    function (renderElement, styleName, styleValue) {\r\n        if (styleValue != null) {\r\n            this.delegate.setStyle(renderElement, styleName, styleValue);\r\n        }\r\n        else {\r\n            this.delegate.removeStyle(renderElement, styleName);\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} renderElement\r\n     * @param {?} methodName\r\n     * @param {?} args\r\n     * @return {?}\r\n     */\r\n    RendererAdapter.prototype.invokeElementMethod = /**\r\n     * @param {?} renderElement\r\n     * @param {?} methodName\r\n     * @param {?} args\r\n     * @return {?}\r\n     */\r\n    function (renderElement, methodName, args) {\r\n        (/** @type {?} */ (renderElement))[methodName].apply(renderElement, args);\r\n    };\r\n    /**\r\n     * @param {?} renderNode\r\n     * @param {?} text\r\n     * @return {?}\r\n     */\r\n    RendererAdapter.prototype.setText = /**\r\n     * @param {?} renderNode\r\n     * @param {?} text\r\n     * @return {?}\r\n     */\r\n    function (renderNode$$1, text) { this.delegate.setValue(renderNode$$1, text); };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    RendererAdapter.prototype.animate = /**\r\n     * @return {?}\r\n     */\r\n    function () { throw new Error('Renderer.animate is no longer supported!'); };\r\n    return RendererAdapter;\r\n}());\r\n/**\r\n * @param {?} moduleType\r\n * @param {?} parent\r\n * @param {?} bootstrapComponents\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\r\n    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\r\n}\r\nvar NgModuleRef_ = /** @class */ (function () {\r\n    function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {\r\n        this._moduleType = _moduleType;\r\n        this._parent = _parent;\r\n        this._bootstrapComponents = _bootstrapComponents;\r\n        this._def = _def;\r\n        this._destroyListeners = [];\r\n        this._destroyed = false;\r\n        this.injector = this;\r\n        initNgModule(this);\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @param {?=} injectFlags\r\n     * @return {?}\r\n     */\r\n    NgModuleRef_.prototype.get = /**\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @param {?=} injectFlags\r\n     * @return {?}\r\n     */\r\n    function (token, notFoundValue, injectFlags) {\r\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\r\n        if (injectFlags === void 0) { injectFlags = 0 /* Default */; }\r\n        var /** @type {?} */ flags = 0;\r\n        if (injectFlags & 1 /* SkipSelf */) {\r\n            flags |= 1 /* SkipSelf */;\r\n        }\r\n        else if (injectFlags & 2 /* Self */) {\r\n            flags |= 4 /* Self */;\r\n        }\r\n        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);\r\n    };\r\n    Object.defineProperty(NgModuleRef_.prototype, \"instance\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return this.get(this._moduleType); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NgModuleRef_.prototype, \"componentFactoryResolver\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return this.get(ComponentFactoryResolver); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    NgModuleRef_.prototype.destroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._destroyed) {\r\n            throw new Error(\"The ng module \" + stringify(this.instance.constructor) + \" has already been destroyed.\");\r\n        }\r\n        this._destroyed = true;\r\n        callNgModuleLifecycle(this, 131072 /* OnDestroy */);\r\n        this._destroyListeners.forEach(function (listener) { return listener(); });\r\n    };\r\n    /**\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    NgModuleRef_.prototype.onDestroy = /**\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    function (callback) { this._destroyListeners.push(callback); };\r\n    return NgModuleRef_;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar RendererV1TokenKey = tokenKey(Renderer);\r\nvar Renderer2TokenKey = tokenKey(Renderer2);\r\nvar ElementRefTokenKey = tokenKey(ElementRef);\r\nvar ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\r\nvar TemplateRefTokenKey = tokenKey(TemplateRef);\r\nvar ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\r\nvar InjectorRefTokenKey = tokenKey(Injector);\r\nvar INJECTORRefTokenKey = tokenKey(INJECTOR);\r\n/**\r\n * @param {?} checkIndex\r\n * @param {?} flags\r\n * @param {?} matchedQueries\r\n * @param {?} childCount\r\n * @param {?} ctor\r\n * @param {?} deps\r\n * @param {?=} props\r\n * @param {?=} outputs\r\n * @return {?}\r\n */\r\nfunction directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\r\n    var /** @type {?} */ bindings = [];\r\n    if (props) {\r\n        for (var /** @type {?} */ prop in props) {\r\n            var _a = props[prop], bindingIndex = _a[0], nonMinifiedName = _a[1];\r\n            bindings[bindingIndex] = {\r\n                flags: 8 /* TypeProperty */,\r\n                name: prop, nonMinifiedName: nonMinifiedName,\r\n                ns: null,\r\n                securityContext: null,\r\n                suffix: null\r\n            };\r\n        }\r\n    }\r\n    var /** @type {?} */ outputDefs = [];\r\n    if (outputs) {\r\n        for (var /** @type {?} */ propName in outputs) {\r\n            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });\r\n        }\r\n    }\r\n    flags |= 16384 /* TypeDirective */;\r\n    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\r\n}\r\n/**\r\n * @param {?} flags\r\n * @param {?} ctor\r\n * @param {?} deps\r\n * @return {?}\r\n */\r\nfunction pipeDef(flags, ctor, deps) {\r\n    flags |= 16 /* TypePipe */;\r\n    return _def(-1, flags, null, 0, ctor, ctor, deps);\r\n}\r\n/**\r\n * @param {?} flags\r\n * @param {?} matchedQueries\r\n * @param {?} token\r\n * @param {?} value\r\n * @param {?} deps\r\n * @return {?}\r\n */\r\nfunction providerDef(flags, matchedQueries, token, value, deps) {\r\n    return _def(-1, flags, matchedQueries, 0, token, value, deps);\r\n}\r\n/**\r\n * @param {?} checkIndex\r\n * @param {?} flags\r\n * @param {?} matchedQueriesDsl\r\n * @param {?} childCount\r\n * @param {?} token\r\n * @param {?} value\r\n * @param {?} deps\r\n * @param {?=} bindings\r\n * @param {?=} outputs\r\n * @return {?}\r\n */\r\nfunction _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\r\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\r\n    if (!outputs) {\r\n        outputs = [];\r\n    }\r\n    if (!bindings) {\r\n        bindings = [];\r\n    }\r\n    // Need to resolve forwardRefs as e.g. for `useValue` we\r\n    // lowered the expression and then stopped evaluating it,\r\n    // i.e. also didn't unwrap it.\r\n    value = resolveForwardRef(value);\r\n    var /** @type {?} */ depDefs = splitDepsDsl(deps, stringify(token));\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        checkIndex: checkIndex,\r\n        flags: flags,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,\r\n        ngContentIndex: -1, childCount: childCount, bindings: bindings,\r\n        bindingFlags: calcBindingFlags(bindings), outputs: outputs,\r\n        element: null,\r\n        provider: { token: token, value: value, deps: depDefs },\r\n        text: null,\r\n        query: null,\r\n        ngContent: null\r\n    };\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction createProviderInstance(view, def) {\r\n    return _createProviderInstance(view, def);\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction createPipeInstance(view, def) {\r\n    // deps are looked up from component.\r\n    var /** @type {?} */ compView = view;\r\n    while (compView.parent && !isComponentView(compView)) {\r\n        compView = compView.parent;\r\n    }\r\n    // pipes can see the private services of the component\r\n    var /** @type {?} */ allowPrivateServices = true;\r\n    // pipes are always eager and classes!\r\n    return createClass(/** @type {?} */ ((compView.parent)), /** @type {?} */ ((viewParentEl(compView))), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction createDirectiveInstance(view, def) {\r\n    // components can see other private services, other directives can't.\r\n    var /** @type {?} */ allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\r\n    // directives are always eager and classes!\r\n    var /** @type {?} */ instance = createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);\r\n    if (def.outputs.length) {\r\n        for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {\r\n            var /** @type {?} */ output = def.outputs[i];\r\n            var /** @type {?} */ subscription = instance[/** @type {?} */ ((output.propName))].subscribe(eventHandlerClosure(view, /** @type {?} */ ((def.parent)).nodeIndex, output.eventName)); /** @type {?} */\r\n            ((view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\r\n        }\r\n    }\r\n    return instance;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} index\r\n * @param {?} eventName\r\n * @return {?}\r\n */\r\nfunction eventHandlerClosure(view, index, eventName) {\r\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} v0\r\n * @param {?} v1\r\n * @param {?} v2\r\n * @param {?} v3\r\n * @param {?} v4\r\n * @param {?} v5\r\n * @param {?} v6\r\n * @param {?} v7\r\n * @param {?} v8\r\n * @param {?} v9\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    var /** @type {?} */ providerData = asProviderData(view, def.nodeIndex);\r\n    var /** @type {?} */ directive = providerData.instance;\r\n    var /** @type {?} */ changed = false;\r\n    var /** @type {?} */ changes = /** @type {?} */ ((undefined));\r\n    var /** @type {?} */ bindLen = def.bindings.length;\r\n    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 0, v0, changes);\r\n    }\r\n    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 1, v1, changes);\r\n    }\r\n    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 2, v2, changes);\r\n    }\r\n    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 3, v3, changes);\r\n    }\r\n    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 4, v4, changes);\r\n    }\r\n    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 5, v5, changes);\r\n    }\r\n    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 6, v6, changes);\r\n    }\r\n    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 7, v7, changes);\r\n    }\r\n    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 8, v8, changes);\r\n    }\r\n    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 9, v9, changes);\r\n    }\r\n    if (changes) {\r\n        directive.ngOnChanges(changes);\r\n    }\r\n    if ((def.flags & 65536 /* OnInit */) &&\r\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\r\n        directive.ngOnInit();\r\n    }\r\n    if (def.flags & 262144 /* DoCheck */) {\r\n        directive.ngDoCheck();\r\n    }\r\n    return changed;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} values\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateDirectiveDynamic(view, def, values) {\r\n    var /** @type {?} */ providerData = asProviderData(view, def.nodeIndex);\r\n    var /** @type {?} */ directive = providerData.instance;\r\n    var /** @type {?} */ changed = false;\r\n    var /** @type {?} */ changes = /** @type {?} */ ((undefined));\r\n    for (var /** @type {?} */ i = 0; i < values.length; i++) {\r\n        if (checkBinding(view, def, i, values[i])) {\r\n            changed = true;\r\n            changes = updateProp(view, providerData, def, i, values[i], changes);\r\n        }\r\n    }\r\n    if (changes) {\r\n        directive.ngOnChanges(changes);\r\n    }\r\n    if ((def.flags & 65536 /* OnInit */) &&\r\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\r\n        directive.ngOnInit();\r\n    }\r\n    if (def.flags & 262144 /* DoCheck */) {\r\n        directive.ngDoCheck();\r\n    }\r\n    return changed;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction _createProviderInstance(view, def) {\r\n    // private services can see other private services\r\n    var /** @type {?} */ allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\r\n    var /** @type {?} */ providerDef = def.provider;\r\n    switch (def.flags & 201347067 /* Types */) {\r\n        case 512 /* TypeClassProvider */:\r\n            return createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);\r\n        case 1024 /* TypeFactoryProvider */:\r\n            return callFactory(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);\r\n        case 2048 /* TypeUseExistingProvider */:\r\n            return resolveDep(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).deps[0]);\r\n        case 256 /* TypeValueProvider */:\r\n            return /** @type {?} */ ((providerDef)).value;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} elDef\r\n * @param {?} allowPrivateServices\r\n * @param {?} ctor\r\n * @param {?} deps\r\n * @return {?}\r\n */\r\nfunction createClass(view, elDef, allowPrivateServices, ctor, deps) {\r\n    var /** @type {?} */ len = deps.length;\r\n    switch (len) {\r\n        case 0:\r\n            return new ctor();\r\n        case 1:\r\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\r\n        case 2:\r\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\r\n        case 3:\r\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\r\n        default:\r\n            var /** @type {?} */ depValues = new Array(len);\r\n            for (var /** @type {?} */ i = 0; i < len; i++) {\r\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\r\n            }\r\n            return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} elDef\r\n * @param {?} allowPrivateServices\r\n * @param {?} factory\r\n * @param {?} deps\r\n * @return {?}\r\n */\r\nfunction callFactory(view, elDef, allowPrivateServices, factory, deps) {\r\n    var /** @type {?} */ len = deps.length;\r\n    switch (len) {\r\n        case 0:\r\n            return factory();\r\n        case 1:\r\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\r\n        case 2:\r\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\r\n        case 3:\r\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\r\n        default:\r\n            var /** @type {?} */ depValues = Array(len);\r\n            for (var /** @type {?} */ i = 0; i < len; i++) {\r\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\r\n            }\r\n            return factory.apply(void 0, depValues);\r\n    }\r\n}\r\n// This default value is when checking the hierarchy for a token.\r\n//\r\n// It means both:\r\n// - the token is not provided by the current injector,\r\n// - only the element injectors should be checked (ie do not check module injectors\r\n//\r\n//          mod1\r\n//         /\r\n//       el1   mod2\r\n//         \\  /\r\n//         el2\r\n//\r\n// When requesting el2.injector.get(token), we should check in the following order and return the\r\n// first found value:\r\n// - el2.injector.get(token, default)\r\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\r\n// - mod2.injector.get(token, default)\r\nvar NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\r\n/**\r\n * @param {?} view\r\n * @param {?} elDef\r\n * @param {?} allowPrivateServices\r\n * @param {?} depDef\r\n * @param {?=} notFoundValue\r\n * @return {?}\r\n */\r\nfunction resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {\r\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\r\n    if (depDef.flags & 8 /* Value */) {\r\n        return depDef.token;\r\n    }\r\n    var /** @type {?} */ startView = view;\r\n    if (depDef.flags & 2 /* Optional */) {\r\n        notFoundValue = null;\r\n    }\r\n    var /** @type {?} */ tokenKey$$1 = depDef.tokenKey;\r\n    if (tokenKey$$1 === ChangeDetectorRefTokenKey) {\r\n        // directives on the same element as a component should be able to control the change detector\r\n        // of that component as well.\r\n        allowPrivateServices = !!(elDef && /** @type {?} */ ((elDef.element)).componentView);\r\n    }\r\n    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\r\n        allowPrivateServices = false;\r\n        elDef = /** @type {?} */ ((elDef.parent));\r\n    }\r\n    var /** @type {?} */ searchView = view;\r\n    while (searchView) {\r\n        if (elDef) {\r\n            switch (tokenKey$$1) {\r\n                case RendererV1TokenKey: {\r\n                    var /** @type {?} */ compView = findCompView(searchView, elDef, allowPrivateServices);\r\n                    return createRendererV1(compView);\r\n                }\r\n                case Renderer2TokenKey: {\r\n                    var /** @type {?} */ compView = findCompView(searchView, elDef, allowPrivateServices);\r\n                    return compView.renderer;\r\n                }\r\n                case ElementRefTokenKey:\r\n                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\r\n                case ViewContainerRefTokenKey:\r\n                    return asElementData(searchView, elDef.nodeIndex).viewContainer;\r\n                case TemplateRefTokenKey: {\r\n                    if (/** @type {?} */ ((elDef.element)).template) {\r\n                        return asElementData(searchView, elDef.nodeIndex).template;\r\n                    }\r\n                    break;\r\n                }\r\n                case ChangeDetectorRefTokenKey: {\r\n                    var /** @type {?} */ cdView = findCompView(searchView, elDef, allowPrivateServices);\r\n                    return createChangeDetectorRef(cdView);\r\n                }\r\n                case InjectorRefTokenKey:\r\n                case INJECTORRefTokenKey:\r\n                    return createInjector$1(searchView, elDef);\r\n                default:\r\n                    var /** @type {?} */ providerDef_1 = /** @type {?} */ (((allowPrivateServices ? /** @type {?} */ ((elDef.element)).allProviders : /** @type {?} */ ((elDef.element)).publicProviders)))[tokenKey$$1];\r\n                    if (providerDef_1) {\r\n                        var /** @type {?} */ providerData = asProviderData(searchView, providerDef_1.nodeIndex);\r\n                        if (!providerData) {\r\n                            providerData = { instance: _createProviderInstance(searchView, providerDef_1) };\r\n                            searchView.nodes[providerDef_1.nodeIndex] = /** @type {?} */ (providerData);\r\n                        }\r\n                        return providerData.instance;\r\n                    }\r\n            }\r\n        }\r\n        allowPrivateServices = isComponentView(searchView);\r\n        elDef = /** @type {?} */ ((viewParentEl(searchView)));\r\n        searchView = /** @type {?} */ ((searchView.parent));\r\n        if (depDef.flags & 4 /* Self */) {\r\n            searchView = null;\r\n        }\r\n    }\r\n    var /** @type {?} */ value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\r\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\r\n        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\r\n        // Return the value from the root element injector when\r\n        // - it provides it\r\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\r\n        // - the module injector should not be checked\r\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\r\n        return value;\r\n    }\r\n    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} elDef\r\n * @param {?} allowPrivateServices\r\n * @return {?}\r\n */\r\nfunction findCompView(view, elDef, allowPrivateServices) {\r\n    var /** @type {?} */ compView;\r\n    if (allowPrivateServices) {\r\n        compView = asElementData(view, elDef.nodeIndex).componentView;\r\n    }\r\n    else {\r\n        compView = view;\r\n        while (compView.parent && !isComponentView(compView)) {\r\n            compView = compView.parent;\r\n        }\r\n    }\r\n    return compView;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} providerData\r\n * @param {?} def\r\n * @param {?} bindingIdx\r\n * @param {?} value\r\n * @param {?} changes\r\n * @return {?}\r\n */\r\nfunction updateProp(view, providerData, def, bindingIdx, value, changes) {\r\n    if (def.flags & 32768 /* Component */) {\r\n        var /** @type {?} */ compView = asElementData(view, /** @type {?} */ ((def.parent)).nodeIndex).componentView;\r\n        if (compView.def.flags & 2 /* OnPush */) {\r\n            compView.state |= 8 /* ChecksEnabled */;\r\n        }\r\n    }\r\n    var /** @type {?} */ binding = def.bindings[bindingIdx];\r\n    var /** @type {?} */ propName = /** @type {?} */ ((binding.name));\r\n    // Note: This is still safe with Closure Compiler as\r\n    // the user passed in the property name as an object has to `providerDef`,\r\n    // so Closure Compiler will have renamed the property correctly already.\r\n    providerData.instance[propName] = value;\r\n    if (def.flags & 524288 /* OnChanges */) {\r\n        changes = changes || {};\r\n        var /** @type {?} */ oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\r\n        var /** @type {?} */ binding_1 = def.bindings[bindingIdx];\r\n        changes[/** @type {?} */ ((binding_1.nonMinifiedName))] =\r\n            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\r\n    }\r\n    view.oldValues[def.bindingIndex + bindingIdx] = value;\r\n    return changes;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} lifecycles\r\n * @return {?}\r\n */\r\nfunction callLifecycleHooksChildrenFirst(view, lifecycles) {\r\n    if (!(view.def.nodeFlags & lifecycles)) {\r\n        return;\r\n    }\r\n    var /** @type {?} */ nodes = view.def.nodes;\r\n    var /** @type {?} */ initIndex = 0;\r\n    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {\r\n        var /** @type {?} */ nodeDef = nodes[i];\r\n        var /** @type {?} */ parent_1 = nodeDef.parent;\r\n        if (!parent_1 && nodeDef.flags & lifecycles) {\r\n            // matching root node (e.g. a pipe)\r\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\r\n        }\r\n        if ((nodeDef.childFlags & lifecycles) === 0) {\r\n            // no child matches one of the lifecycles\r\n            i += nodeDef.childCount;\r\n        }\r\n        while (parent_1 && (parent_1.flags & 1 /* TypeElement */) &&\r\n            i === parent_1.nodeIndex + parent_1.childCount) {\r\n            // last child of an element\r\n            if (parent_1.directChildFlags & lifecycles) {\r\n                initIndex = callElementProvidersLifecycles(view, parent_1, lifecycles, initIndex);\r\n            }\r\n            parent_1 = parent_1.parent;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} elDef\r\n * @param {?} lifecycles\r\n * @param {?} initIndex\r\n * @return {?}\r\n */\r\nfunction callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\r\n    for (var /** @type {?} */ i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\r\n        var /** @type {?} */ nodeDef = view.def.nodes[i];\r\n        if (nodeDef.flags & lifecycles) {\r\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\r\n        }\r\n        // only visit direct children\r\n        i += nodeDef.childCount;\r\n    }\r\n    return initIndex;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} index\r\n * @param {?} lifecycles\r\n * @param {?} initIndex\r\n * @return {?}\r\n */\r\nfunction callProviderLifecycles(view, index, lifecycles, initIndex) {\r\n    var /** @type {?} */ providerData = asProviderData(view, index);\r\n    if (!providerData) {\r\n        return;\r\n    }\r\n    var /** @type {?} */ provider = providerData.instance;\r\n    if (!provider) {\r\n        return;\r\n    }\r\n    Services.setCurrentNode(view, index);\r\n    if (lifecycles & 1048576 /* AfterContentInit */ &&\r\n        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\r\n        provider.ngAfterContentInit();\r\n    }\r\n    if (lifecycles & 2097152 /* AfterContentChecked */) {\r\n        provider.ngAfterContentChecked();\r\n    }\r\n    if (lifecycles & 4194304 /* AfterViewInit */ &&\r\n        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\r\n        provider.ngAfterViewInit();\r\n    }\r\n    if (lifecycles & 8388608 /* AfterViewChecked */) {\r\n        provider.ngAfterViewChecked();\r\n    }\r\n    if (lifecycles & 131072 /* OnDestroy */) {\r\n        provider.ngOnDestroy();\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} flags\r\n * @param {?} id\r\n * @param {?} bindings\r\n * @return {?}\r\n */\r\nfunction queryDef(flags, id, bindings) {\r\n    var /** @type {?} */ bindingDefs = [];\r\n    for (var /** @type {?} */ propName in bindings) {\r\n        var /** @type {?} */ bindingType = bindings[propName];\r\n        bindingDefs.push({ propName: propName, bindingType: bindingType });\r\n    }\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        // TODO(vicb): check\r\n        checkIndex: -1, flags: flags,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0,\r\n        ngContentIndex: -1,\r\n        matchedQueries: {},\r\n        matchedQueryIds: 0,\r\n        references: {},\r\n        childCount: 0,\r\n        bindings: [],\r\n        bindingFlags: 0,\r\n        outputs: [],\r\n        element: null,\r\n        provider: null,\r\n        text: null,\r\n        query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },\r\n        ngContent: null\r\n    };\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction createQuery() {\r\n    return new QueryList();\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction dirtyParentQueries(view) {\r\n    var /** @type {?} */ queryIds = view.def.nodeMatchedQueries;\r\n    while (view.parent && isEmbeddedView(view)) {\r\n        var /** @type {?} */ tplDef = /** @type {?} */ ((view.parentNodeDef));\r\n        view = view.parent;\r\n        // content queries\r\n        var /** @type {?} */ end = tplDef.nodeIndex + tplDef.childCount;\r\n        for (var /** @type {?} */ i = 0; i <= end; i++) {\r\n            var /** @type {?} */ nodeDef = view.def.nodes[i];\r\n            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&\r\n                (nodeDef.flags & 536870912 /* DynamicQuery */) &&\r\n                (/** @type {?} */ ((nodeDef.query)).filterId & queryIds) === /** @type {?} */ ((nodeDef.query)).filterId) {\r\n                asQueryList(view, i).setDirty();\r\n            }\r\n            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||\r\n                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||\r\n                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\r\n                // skip elements that don't contain the template element or no query.\r\n                i += nodeDef.childCount;\r\n            }\r\n        }\r\n    }\r\n    // view queries\r\n    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\r\n        for (var /** @type {?} */ i = 0; i < view.def.nodes.length; i++) {\r\n            var /** @type {?} */ nodeDef = view.def.nodes[i];\r\n            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {\r\n                asQueryList(view, i).setDirty();\r\n            }\r\n            // only visit the root nodes\r\n            i += nodeDef.childCount;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateQuery(view, nodeDef) {\r\n    var /** @type {?} */ queryList = asQueryList(view, nodeDef.nodeIndex);\r\n    if (!queryList.dirty) {\r\n        return;\r\n    }\r\n    var /** @type {?} */ directiveInstance;\r\n    var /** @type {?} */ newValues = /** @type {?} */ ((undefined));\r\n    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\r\n        var /** @type {?} */ elementDef = /** @type {?} */ ((/** @type {?} */ ((nodeDef.parent)).parent));\r\n        newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, /** @type {?} */ ((nodeDef.query)), []);\r\n        directiveInstance = asProviderData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).instance;\r\n    }\r\n    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\r\n        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, /** @type {?} */ ((nodeDef.query)), []);\r\n        directiveInstance = view.component;\r\n    }\r\n    queryList.reset(newValues);\r\n    var /** @type {?} */ bindings = /** @type {?} */ ((nodeDef.query)).bindings;\r\n    var /** @type {?} */ notify = false;\r\n    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {\r\n        var /** @type {?} */ binding = bindings[i];\r\n        var /** @type {?} */ boundValue = void 0;\r\n        switch (binding.bindingType) {\r\n            case 0 /* First */:\r\n                boundValue = queryList.first;\r\n                break;\r\n            case 1 /* All */:\r\n                boundValue = queryList;\r\n                notify = true;\r\n                break;\r\n        }\r\n        directiveInstance[binding.propName] = boundValue;\r\n    }\r\n    if (notify) {\r\n        queryList.notifyOnChanges();\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} startIndex\r\n * @param {?} endIndex\r\n * @param {?} queryDef\r\n * @param {?} values\r\n * @return {?}\r\n */\r\nfunction calcQueryValues(view, startIndex, endIndex, queryDef, values) {\r\n    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {\r\n        var /** @type {?} */ nodeDef = view.def.nodes[i];\r\n        var /** @type {?} */ valueType = nodeDef.matchedQueries[queryDef.id];\r\n        if (valueType != null) {\r\n            values.push(getQueryValue(view, nodeDef, valueType));\r\n        }\r\n        if (nodeDef.flags & 1 /* TypeElement */ && /** @type {?} */ ((nodeDef.element)).template &&\r\n            (/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===\r\n                queryDef.filterId) {\r\n            var /** @type {?} */ elementData = asElementData(view, i);\r\n            // check embedded views that were attached at the place of their template,\r\n            // but process child nodes first if some match the query (see issue #16568)\r\n            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\r\n                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\r\n                i += nodeDef.childCount;\r\n            }\r\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\r\n                var /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\r\n                for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {\r\n                    var /** @type {?} */ embeddedView = embeddedViews[k];\r\n                    var /** @type {?} */ dvc = declaredViewContainer(embeddedView);\r\n                    if (dvc && dvc === elementData) {\r\n                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\r\n                    }\r\n                }\r\n            }\r\n            var /** @type {?} */ projectedViews = elementData.template._projectedViews;\r\n            if (projectedViews) {\r\n                for (var /** @type {?} */ k = 0; k < projectedViews.length; k++) {\r\n                    var /** @type {?} */ projectedView = projectedViews[k];\r\n                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\r\n                }\r\n            }\r\n        }\r\n        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\r\n            // if no child matches the query, skip the children.\r\n            i += nodeDef.childCount;\r\n        }\r\n    }\r\n    return values;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} queryValueType\r\n * @return {?}\r\n */\r\nfunction getQueryValue(view, nodeDef, queryValueType) {\r\n    if (queryValueType != null) {\r\n        // a match\r\n        switch (queryValueType) {\r\n            case 1 /* RenderElement */:\r\n                return asElementData(view, nodeDef.nodeIndex).renderElement;\r\n            case 0 /* ElementRef */:\r\n                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\r\n            case 2 /* TemplateRef */:\r\n                return asElementData(view, nodeDef.nodeIndex).template;\r\n            case 3 /* ViewContainerRef */:\r\n                return asElementData(view, nodeDef.nodeIndex).viewContainer;\r\n            case 4 /* Provider */:\r\n                return asProviderData(view, nodeDef.nodeIndex).instance;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} ngContentIndex\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction ngContentDef(ngContentIndex, index) {\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        checkIndex: -1,\r\n        flags: 8 /* TypeNgContent */,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0,\r\n        matchedQueries: {},\r\n        matchedQueryIds: 0,\r\n        references: {}, ngContentIndex: ngContentIndex,\r\n        childCount: 0,\r\n        bindings: [],\r\n        bindingFlags: 0,\r\n        outputs: [],\r\n        element: null,\r\n        provider: null,\r\n        text: null,\r\n        query: null,\r\n        ngContent: { index: index }\r\n    };\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} renderHost\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction appendNgContent(view, renderHost, def) {\r\n    var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);\r\n    if (!parentEl) {\r\n        // Nothing to do if there is no parent element.\r\n        return;\r\n    }\r\n    var /** @type {?} */ ngContentIndex = /** @type {?} */ ((def.ngContent)).index;\r\n    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} checkIndex\r\n * @param {?} argCount\r\n * @return {?}\r\n */\r\nfunction purePipeDef(checkIndex, argCount) {\r\n    // argCount + 1 to include the pipe as first arg\r\n    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));\r\n}\r\n/**\r\n * @param {?} checkIndex\r\n * @param {?} argCount\r\n * @return {?}\r\n */\r\nfunction pureArrayDef(checkIndex, argCount) {\r\n    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));\r\n}\r\n/**\r\n * @param {?} checkIndex\r\n * @param {?} propToIndex\r\n * @return {?}\r\n */\r\nfunction pureObjectDef(checkIndex, propToIndex) {\r\n    var /** @type {?} */ keys = Object.keys(propToIndex);\r\n    var /** @type {?} */ nbKeys = keys.length;\r\n    var /** @type {?} */ propertyNames = new Array(nbKeys);\r\n    for (var /** @type {?} */ i = 0; i < nbKeys; i++) {\r\n        var /** @type {?} */ key = keys[i];\r\n        var /** @type {?} */ index = propToIndex[key];\r\n        propertyNames[index] = key;\r\n    }\r\n    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\r\n}\r\n/**\r\n * @param {?} flags\r\n * @param {?} checkIndex\r\n * @param {?} propertyNames\r\n * @return {?}\r\n */\r\nfunction _pureExpressionDef(flags, checkIndex, propertyNames) {\r\n    var /** @type {?} */ bindings = new Array(propertyNames.length);\r\n    for (var /** @type {?} */ i = 0; i < propertyNames.length; i++) {\r\n        var /** @type {?} */ prop = propertyNames[i];\r\n        bindings[i] = {\r\n            flags: 8 /* TypeProperty */,\r\n            name: prop,\r\n            ns: null,\r\n            nonMinifiedName: prop,\r\n            securityContext: null,\r\n            suffix: null\r\n        };\r\n    }\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        checkIndex: checkIndex,\r\n        flags: flags,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0,\r\n        matchedQueries: {},\r\n        matchedQueryIds: 0,\r\n        references: {},\r\n        ngContentIndex: -1,\r\n        childCount: 0, bindings: bindings,\r\n        bindingFlags: calcBindingFlags(bindings),\r\n        outputs: [],\r\n        element: null,\r\n        provider: null,\r\n        text: null,\r\n        query: null,\r\n        ngContent: null\r\n    };\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction createPureExpression(view, def) {\r\n    return { value: undefined };\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} v0\r\n * @param {?} v1\r\n * @param {?} v2\r\n * @param {?} v3\r\n * @param {?} v4\r\n * @param {?} v5\r\n * @param {?} v6\r\n * @param {?} v7\r\n * @param {?} v8\r\n * @param {?} v9\r\n * @return {?}\r\n */\r\nfunction checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    var /** @type {?} */ bindings = def.bindings;\r\n    var /** @type {?} */ changed = false;\r\n    var /** @type {?} */ bindLen = bindings.length;\r\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\r\n        changed = true;\r\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\r\n        changed = true;\r\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\r\n        changed = true;\r\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\r\n        changed = true;\r\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\r\n        changed = true;\r\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\r\n        changed = true;\r\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\r\n        changed = true;\r\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\r\n        changed = true;\r\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\r\n        changed = true;\r\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\r\n        changed = true;\r\n    if (changed) {\r\n        var /** @type {?} */ data = asPureExpressionData(view, def.nodeIndex);\r\n        var /** @type {?} */ value = void 0;\r\n        switch (def.flags & 201347067 /* Types */) {\r\n            case 32 /* TypePureArray */:\r\n                value = new Array(bindings.length);\r\n                if (bindLen > 0)\r\n                    value[0] = v0;\r\n                if (bindLen > 1)\r\n                    value[1] = v1;\r\n                if (bindLen > 2)\r\n                    value[2] = v2;\r\n                if (bindLen > 3)\r\n                    value[3] = v3;\r\n                if (bindLen > 4)\r\n                    value[4] = v4;\r\n                if (bindLen > 5)\r\n                    value[5] = v5;\r\n                if (bindLen > 6)\r\n                    value[6] = v6;\r\n                if (bindLen > 7)\r\n                    value[7] = v7;\r\n                if (bindLen > 8)\r\n                    value[8] = v8;\r\n                if (bindLen > 9)\r\n                    value[9] = v9;\r\n                break;\r\n            case 64 /* TypePureObject */:\r\n                value = {};\r\n                if (bindLen > 0)\r\n                    value[/** @type {?} */ ((bindings[0].name))] = v0;\r\n                if (bindLen > 1)\r\n                    value[/** @type {?} */ ((bindings[1].name))] = v1;\r\n                if (bindLen > 2)\r\n                    value[/** @type {?} */ ((bindings[2].name))] = v2;\r\n                if (bindLen > 3)\r\n                    value[/** @type {?} */ ((bindings[3].name))] = v3;\r\n                if (bindLen > 4)\r\n                    value[/** @type {?} */ ((bindings[4].name))] = v4;\r\n                if (bindLen > 5)\r\n                    value[/** @type {?} */ ((bindings[5].name))] = v5;\r\n                if (bindLen > 6)\r\n                    value[/** @type {?} */ ((bindings[6].name))] = v6;\r\n                if (bindLen > 7)\r\n                    value[/** @type {?} */ ((bindings[7].name))] = v7;\r\n                if (bindLen > 8)\r\n                    value[/** @type {?} */ ((bindings[8].name))] = v8;\r\n                if (bindLen > 9)\r\n                    value[/** @type {?} */ ((bindings[9].name))] = v9;\r\n                break;\r\n            case 128 /* TypePurePipe */:\r\n                var /** @type {?} */ pipe = v0;\r\n                switch (bindLen) {\r\n                    case 1:\r\n                        value = pipe.transform(v0);\r\n                        break;\r\n                    case 2:\r\n                        value = pipe.transform(v1);\r\n                        break;\r\n                    case 3:\r\n                        value = pipe.transform(v1, v2);\r\n                        break;\r\n                    case 4:\r\n                        value = pipe.transform(v1, v2, v3);\r\n                        break;\r\n                    case 5:\r\n                        value = pipe.transform(v1, v2, v3, v4);\r\n                        break;\r\n                    case 6:\r\n                        value = pipe.transform(v1, v2, v3, v4, v5);\r\n                        break;\r\n                    case 7:\r\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6);\r\n                        break;\r\n                    case 8:\r\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\r\n                        break;\r\n                    case 9:\r\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\r\n                        break;\r\n                    case 10:\r\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n        data.value = value;\r\n    }\r\n    return changed;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} values\r\n * @return {?}\r\n */\r\nfunction checkAndUpdatePureExpressionDynamic(view, def, values) {\r\n    var /** @type {?} */ bindings = def.bindings;\r\n    var /** @type {?} */ changed = false;\r\n    for (var /** @type {?} */ i = 0; i < values.length; i++) {\r\n        // Note: We need to loop over all values, so that\r\n        // the old values are updates as well!\r\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\r\n            changed = true;\r\n        }\r\n    }\r\n    if (changed) {\r\n        var /** @type {?} */ data = asPureExpressionData(view, def.nodeIndex);\r\n        var /** @type {?} */ value = void 0;\r\n        switch (def.flags & 201347067 /* Types */) {\r\n            case 32 /* TypePureArray */:\r\n                value = values;\r\n                break;\r\n            case 64 /* TypePureObject */:\r\n                value = {};\r\n                for (var /** @type {?} */ i = 0; i < values.length; i++) {\r\n                    value[/** @type {?} */ ((bindings[i].name))] = values[i];\r\n                }\r\n                break;\r\n            case 128 /* TypePurePipe */:\r\n                var /** @type {?} */ pipe = values[0];\r\n                var /** @type {?} */ params = values.slice(1);\r\n                value = pipe.transform.apply(pipe, params);\r\n                break;\r\n        }\r\n        data.value = value;\r\n    }\r\n    return changed;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} checkIndex\r\n * @param {?} ngContentIndex\r\n * @param {?} staticText\r\n * @return {?}\r\n */\r\nfunction textDef(checkIndex, ngContentIndex, staticText) {\r\n    var /** @type {?} */ bindings = new Array(staticText.length - 1);\r\n    for (var /** @type {?} */ i = 1; i < staticText.length; i++) {\r\n        bindings[i - 1] = {\r\n            flags: 8 /* TypeProperty */,\r\n            name: null,\r\n            ns: null,\r\n            nonMinifiedName: null,\r\n            securityContext: null,\r\n            suffix: staticText[i],\r\n        };\r\n    }\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        checkIndex: checkIndex,\r\n        flags: 2 /* TypeText */,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0,\r\n        matchedQueries: {},\r\n        matchedQueryIds: 0,\r\n        references: {}, ngContentIndex: ngContentIndex,\r\n        childCount: 0, bindings: bindings,\r\n        bindingFlags: 8 /* TypeProperty */,\r\n        outputs: [],\r\n        element: null,\r\n        provider: null,\r\n        text: { prefix: staticText[0] },\r\n        query: null,\r\n        ngContent: null,\r\n    };\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} renderHost\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction createText(view, renderHost, def) {\r\n    var /** @type {?} */ renderNode$$1;\r\n    var /** @type {?} */ renderer = view.renderer;\r\n    renderNode$$1 = renderer.createText(/** @type {?} */ ((def.text)).prefix);\r\n    var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);\r\n    if (parentEl) {\r\n        renderer.appendChild(parentEl, renderNode$$1);\r\n    }\r\n    return { renderText: renderNode$$1 };\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} v0\r\n * @param {?} v1\r\n * @param {?} v2\r\n * @param {?} v3\r\n * @param {?} v4\r\n * @param {?} v5\r\n * @param {?} v6\r\n * @param {?} v7\r\n * @param {?} v8\r\n * @param {?} v9\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    var /** @type {?} */ changed = false;\r\n    var /** @type {?} */ bindings = def.bindings;\r\n    var /** @type {?} */ bindLen = bindings.length;\r\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\r\n        changed = true;\r\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\r\n        changed = true;\r\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\r\n        changed = true;\r\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\r\n        changed = true;\r\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\r\n        changed = true;\r\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\r\n        changed = true;\r\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\r\n        changed = true;\r\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\r\n        changed = true;\r\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\r\n        changed = true;\r\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\r\n        changed = true;\r\n    if (changed) {\r\n        var /** @type {?} */ value = /** @type {?} */ ((def.text)).prefix;\r\n        if (bindLen > 0)\r\n            value += _addInterpolationPart(v0, bindings[0]);\r\n        if (bindLen > 1)\r\n            value += _addInterpolationPart(v1, bindings[1]);\r\n        if (bindLen > 2)\r\n            value += _addInterpolationPart(v2, bindings[2]);\r\n        if (bindLen > 3)\r\n            value += _addInterpolationPart(v3, bindings[3]);\r\n        if (bindLen > 4)\r\n            value += _addInterpolationPart(v4, bindings[4]);\r\n        if (bindLen > 5)\r\n            value += _addInterpolationPart(v5, bindings[5]);\r\n        if (bindLen > 6)\r\n            value += _addInterpolationPart(v6, bindings[6]);\r\n        if (bindLen > 7)\r\n            value += _addInterpolationPart(v7, bindings[7]);\r\n        if (bindLen > 8)\r\n            value += _addInterpolationPart(v8, bindings[8]);\r\n        if (bindLen > 9)\r\n            value += _addInterpolationPart(v9, bindings[9]);\r\n        var /** @type {?} */ renderNode$$1 = asTextData(view, def.nodeIndex).renderText;\r\n        view.renderer.setValue(renderNode$$1, value);\r\n    }\r\n    return changed;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} values\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateTextDynamic(view, def, values) {\r\n    var /** @type {?} */ bindings = def.bindings;\r\n    var /** @type {?} */ changed = false;\r\n    for (var /** @type {?} */ i = 0; i < values.length; i++) {\r\n        // Note: We need to loop over all values, so that\r\n        // the old values are updates as well!\r\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\r\n            changed = true;\r\n        }\r\n    }\r\n    if (changed) {\r\n        var /** @type {?} */ value = '';\r\n        for (var /** @type {?} */ i = 0; i < values.length; i++) {\r\n            value = value + _addInterpolationPart(values[i], bindings[i]);\r\n        }\r\n        value = /** @type {?} */ ((def.text)).prefix + value;\r\n        var /** @type {?} */ renderNode$$1 = asTextData(view, def.nodeIndex).renderText;\r\n        view.renderer.setValue(renderNode$$1, value);\r\n    }\r\n    return changed;\r\n}\r\n/**\r\n * @param {?} value\r\n * @param {?} binding\r\n * @return {?}\r\n */\r\nfunction _addInterpolationPart(value, binding) {\r\n    var /** @type {?} */ valueStr = value != null ? value.toString() : '';\r\n    return valueStr + binding.suffix;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} flags\r\n * @param {?} nodes\r\n * @param {?=} updateDirectives\r\n * @param {?=} updateRenderer\r\n * @return {?}\r\n */\r\nfunction viewDef(flags, nodes, updateDirectives, updateRenderer) {\r\n    // clone nodes and set auto calculated values\r\n    var /** @type {?} */ viewBindingCount = 0;\r\n    var /** @type {?} */ viewDisposableCount = 0;\r\n    var /** @type {?} */ viewNodeFlags = 0;\r\n    var /** @type {?} */ viewRootNodeFlags = 0;\r\n    var /** @type {?} */ viewMatchedQueries = 0;\r\n    var /** @type {?} */ currentParent = null;\r\n    var /** @type {?} */ currentRenderParent = null;\r\n    var /** @type {?} */ currentElementHasPublicProviders = false;\r\n    var /** @type {?} */ currentElementHasPrivateProviders = false;\r\n    var /** @type {?} */ lastRenderRootNode = null;\r\n    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {\r\n        var /** @type {?} */ node = nodes[i];\r\n        node.nodeIndex = i;\r\n        node.parent = currentParent;\r\n        node.bindingIndex = viewBindingCount;\r\n        node.outputIndex = viewDisposableCount;\r\n        node.renderParent = currentRenderParent;\r\n        viewNodeFlags |= node.flags;\r\n        viewMatchedQueries |= node.matchedQueryIds;\r\n        if (node.element) {\r\n            var /** @type {?} */ elDef = node.element;\r\n            elDef.publicProviders =\r\n                currentParent ? /** @type {?} */ ((currentParent.element)).publicProviders : Object.create(null);\r\n            elDef.allProviders = elDef.publicProviders;\r\n            // Note: We assume that all providers of an element are before any child element!\r\n            currentElementHasPublicProviders = false;\r\n            currentElementHasPrivateProviders = false;\r\n            if (node.element.template) {\r\n                viewMatchedQueries |= node.element.template.nodeMatchedQueries;\r\n            }\r\n        }\r\n        validateNode(currentParent, node, nodes.length);\r\n        viewBindingCount += node.bindings.length;\r\n        viewDisposableCount += node.outputs.length;\r\n        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {\r\n            lastRenderRootNode = node;\r\n        }\r\n        if (node.flags & 20224 /* CatProvider */) {\r\n            if (!currentElementHasPublicProviders) {\r\n                currentElementHasPublicProviders = true; /** @type {?} */\r\n                ((/** @type {?} */ ((currentParent)).element)).publicProviders = Object.create(/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders); /** @type {?} */\r\n                ((/** @type {?} */ ((currentParent)).element)).allProviders = /** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders;\r\n            }\r\n            var /** @type {?} */ isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\r\n            var /** @type {?} */ isComponent = (node.flags & 32768 /* Component */) !== 0;\r\n            if (!isPrivateService || isComponent) {\r\n                /** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;\r\n            }\r\n            else {\r\n                if (!currentElementHasPrivateProviders) {\r\n                    currentElementHasPrivateProviders = true; /** @type {?} */\r\n                    ((/** @type {?} */ ((currentParent)).element)).allProviders = Object.create(/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders);\r\n                } /** @type {?} */\r\n                ((/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).allProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;\r\n            }\r\n            if (isComponent) {\r\n                /** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).componentProvider = node;\r\n            }\r\n        }\r\n        if (currentParent) {\r\n            currentParent.childFlags |= node.flags;\r\n            currentParent.directChildFlags |= node.flags;\r\n            currentParent.childMatchedQueries |= node.matchedQueryIds;\r\n            if (node.element && node.element.template) {\r\n                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\r\n            }\r\n        }\r\n        else {\r\n            viewRootNodeFlags |= node.flags;\r\n        }\r\n        if (node.childCount > 0) {\r\n            currentParent = node;\r\n            if (!isNgContainer(node)) {\r\n                currentRenderParent = node;\r\n            }\r\n        }\r\n        else {\r\n            // When the current node has no children, check if it is the last children of its parent.\r\n            // When it is, propagate the flags up.\r\n            // The loop is required because an element could be the last transitive children of several\r\n            // elements. We loop to either the root or the highest opened element (= with remaining\r\n            // children)\r\n            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\r\n                var /** @type {?} */ newParent = currentParent.parent;\r\n                if (newParent) {\r\n                    newParent.childFlags |= currentParent.childFlags;\r\n                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;\r\n                }\r\n                currentParent = newParent;\r\n                // We also need to update the render parent & account for ng-container\r\n                if (currentParent && isNgContainer(currentParent)) {\r\n                    currentRenderParent = currentParent.renderParent;\r\n                }\r\n                else {\r\n                    currentRenderParent = currentParent;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    var /** @type {?} */ handleEvent = function (view, nodeIndex, eventName, event) { return ((/** @type {?} */ ((nodes[nodeIndex].element)).handleEvent))(view, eventName, event); };\r\n    return {\r\n        // Will be filled later...\r\n        factory: null,\r\n        nodeFlags: viewNodeFlags,\r\n        rootNodeFlags: viewRootNodeFlags,\r\n        nodeMatchedQueries: viewMatchedQueries, flags: flags,\r\n        nodes: nodes,\r\n        updateDirectives: updateDirectives || NOOP,\r\n        updateRenderer: updateRenderer || NOOP, handleEvent: handleEvent,\r\n        bindingCount: viewBindingCount,\r\n        outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode\r\n    };\r\n}\r\n/**\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction isNgContainer(node) {\r\n    return (node.flags & 1 /* TypeElement */) !== 0 && /** @type {?} */ ((node.element)).name === null;\r\n}\r\n/**\r\n * @param {?} parent\r\n * @param {?} node\r\n * @param {?} nodeCount\r\n * @return {?}\r\n */\r\nfunction validateNode(parent, node, nodeCount) {\r\n    var /** @type {?} */ template = node.element && node.element.template;\r\n    if (template) {\r\n        if (!template.lastRenderRootNode) {\r\n            throw new Error(\"Illegal State: Embedded templates without nodes are not allowed!\");\r\n        }\r\n        if (template.lastRenderRootNode &&\r\n            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\r\n            throw new Error(\"Illegal State: Last root node of a template can't have embedded views, at index \" + node.nodeIndex + \"!\");\r\n        }\r\n    }\r\n    if (node.flags & 20224 /* CatProvider */) {\r\n        var /** @type {?} */ parentFlags = parent ? parent.flags : 0;\r\n        if ((parentFlags & 1 /* TypeElement */) === 0) {\r\n            throw new Error(\"Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index \" + node.nodeIndex + \"!\");\r\n        }\r\n    }\r\n    if (node.query) {\r\n        if (node.flags & 67108864 /* TypeContentQuery */ &&\r\n            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\r\n            throw new Error(\"Illegal State: Content Query nodes need to be children of directives, at index \" + node.nodeIndex + \"!\");\r\n        }\r\n        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\r\n            throw new Error(\"Illegal State: View Query nodes have to be top level nodes, at index \" + node.nodeIndex + \"!\");\r\n        }\r\n    }\r\n    if (node.childCount) {\r\n        var /** @type {?} */ parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\r\n        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\r\n            throw new Error(\"Illegal State: childCount of node leads outside of parent, at index \" + node.nodeIndex + \"!\");\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} parent\r\n * @param {?} anchorDef\r\n * @param {?} viewDef\r\n * @param {?=} context\r\n * @return {?}\r\n */\r\nfunction createEmbeddedView(parent, anchorDef$$1, viewDef, context) {\r\n    // embedded views are seen as siblings to the anchor, so we need\r\n    // to get the parent of the anchor and use it as parentIndex.\r\n    var /** @type {?} */ view = createView(parent.root, parent.renderer, parent, anchorDef$$1, viewDef);\r\n    initView(view, parent.component, context);\r\n    createViewNodes(view);\r\n    return view;\r\n}\r\n/**\r\n * @param {?} root\r\n * @param {?} def\r\n * @param {?=} context\r\n * @return {?}\r\n */\r\nfunction createRootView(root, def, context) {\r\n    var /** @type {?} */ view = createView(root, root.renderer, null, null, def);\r\n    initView(view, context, context);\r\n    createViewNodes(view);\r\n    return view;\r\n}\r\n/**\r\n * @param {?} parentView\r\n * @param {?} nodeDef\r\n * @param {?} viewDef\r\n * @param {?} hostElement\r\n * @return {?}\r\n */\r\nfunction createComponentView(parentView, nodeDef, viewDef, hostElement) {\r\n    var /** @type {?} */ rendererType = /** @type {?} */ ((nodeDef.element)).componentRendererType;\r\n    var /** @type {?} */ compRenderer;\r\n    if (!rendererType) {\r\n        compRenderer = parentView.root.renderer;\r\n    }\r\n    else {\r\n        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\r\n    }\r\n    return createView(parentView.root, compRenderer, parentView, /** @type {?} */ ((nodeDef.element)).componentProvider, viewDef);\r\n}\r\n/**\r\n * @param {?} root\r\n * @param {?} renderer\r\n * @param {?} parent\r\n * @param {?} parentNodeDef\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction createView(root, renderer, parent, parentNodeDef, def) {\r\n    var /** @type {?} */ nodes = new Array(def.nodes.length);\r\n    var /** @type {?} */ disposables = def.outputCount ? new Array(def.outputCount) : null;\r\n    var /** @type {?} */ view = {\r\n        def: def,\r\n        parent: parent,\r\n        viewContainerParent: null, parentNodeDef: parentNodeDef,\r\n        context: null,\r\n        component: null, nodes: nodes,\r\n        state: 13 /* CatInit */, root: root, renderer: renderer,\r\n        oldValues: new Array(def.bindingCount), disposables: disposables,\r\n        initIndex: -1\r\n    };\r\n    return view;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} component\r\n * @param {?} context\r\n * @return {?}\r\n */\r\nfunction initView(view, component, context) {\r\n    view.component = component;\r\n    view.context = context;\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction createViewNodes(view) {\r\n    var /** @type {?} */ renderHost;\r\n    if (isComponentView(view)) {\r\n        var /** @type {?} */ hostDef = view.parentNodeDef;\r\n        renderHost = asElementData(/** @type {?} */ ((view.parent)), /** @type {?} */ ((/** @type {?} */ ((hostDef)).parent)).nodeIndex).renderElement;\r\n    }\r\n    var /** @type {?} */ def = view.def;\r\n    var /** @type {?} */ nodes = view.nodes;\r\n    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\r\n        var /** @type {?} */ nodeDef = def.nodes[i];\r\n        Services.setCurrentNode(view, i);\r\n        var /** @type {?} */ nodeData = void 0;\r\n        switch (nodeDef.flags & 201347067 /* Types */) {\r\n            case 1 /* TypeElement */:\r\n                var /** @type {?} */ el = /** @type {?} */ (createElement(view, renderHost, nodeDef));\r\n                var /** @type {?} */ componentView = /** @type {?} */ ((undefined));\r\n                if (nodeDef.flags & 33554432 /* ComponentView */) {\r\n                    var /** @type {?} */ compViewDef = resolveDefinition(/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).componentView)));\r\n                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\r\n                }\r\n                listenToElementOutputs(view, componentView, nodeDef, el);\r\n                nodeData = /** @type {?} */ ({\r\n                    renderElement: el,\r\n                    componentView: componentView,\r\n                    viewContainer: null,\r\n                    template: /** @type {?} */ ((nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined\r\n                });\r\n                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\r\n                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\r\n                }\r\n                break;\r\n            case 2 /* TypeText */:\r\n                nodeData = /** @type {?} */ (createText(view, renderHost, nodeDef));\r\n                break;\r\n            case 512 /* TypeClassProvider */:\r\n            case 1024 /* TypeFactoryProvider */:\r\n            case 2048 /* TypeUseExistingProvider */:\r\n            case 256 /* TypeValueProvider */: {\r\n                nodeData = nodes[i];\r\n                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\r\n                    var /** @type {?} */ instance = createProviderInstance(view, nodeDef);\r\n                    nodeData = /** @type {?} */ ({ instance: instance });\r\n                }\r\n                break;\r\n            }\r\n            case 16 /* TypePipe */: {\r\n                var /** @type {?} */ instance = createPipeInstance(view, nodeDef);\r\n                nodeData = /** @type {?} */ ({ instance: instance });\r\n                break;\r\n            }\r\n            case 16384 /* TypeDirective */: {\r\n                nodeData = nodes[i];\r\n                if (!nodeData) {\r\n                    var /** @type {?} */ instance = createDirectiveInstance(view, nodeDef);\r\n                    nodeData = /** @type {?} */ ({ instance: instance });\r\n                }\r\n                if (nodeDef.flags & 32768 /* Component */) {\r\n                    var /** @type {?} */ compView = asElementData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).componentView;\r\n                    initView(compView, nodeData.instance, nodeData.instance);\r\n                }\r\n                break;\r\n            }\r\n            case 32 /* TypePureArray */:\r\n            case 64 /* TypePureObject */:\r\n            case 128 /* TypePurePipe */:\r\n                nodeData = /** @type {?} */ (createPureExpression(view, nodeDef));\r\n                break;\r\n            case 67108864 /* TypeContentQuery */:\r\n            case 134217728 /* TypeViewQuery */:\r\n                nodeData = /** @type {?} */ (createQuery());\r\n                break;\r\n            case 8 /* TypeNgContent */:\r\n                appendNgContent(view, renderHost, nodeDef);\r\n                // no runtime data needed for NgContent...\r\n                nodeData = undefined;\r\n                break;\r\n        }\r\n        nodes[i] = nodeData;\r\n    }\r\n    // Create the ViewData.nodes of component views after we created everything else,\r\n    // so that e.g. ng-content works\r\n    execComponentViewsAction(view, ViewAction.CreateViewNodes);\r\n    // fill static content and view queries\r\n    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction checkNoChangesView(view) {\r\n    markProjectedViewsForCheck(view);\r\n    Services.updateDirectives(view, 1 /* CheckNoChanges */);\r\n    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\r\n    Services.updateRenderer(view, 1 /* CheckNoChanges */);\r\n    execComponentViewsAction(view, ViewAction.CheckNoChanges);\r\n    // Note: We don't check queries for changes as we didn't do this in v2.x.\r\n    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\r\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateView(view) {\r\n    if (view.state & 1 /* BeforeFirstCheck */) {\r\n        view.state &= ~1 /* BeforeFirstCheck */;\r\n        view.state |= 2 /* FirstCheck */;\r\n    }\r\n    else {\r\n        view.state &= ~2 /* FirstCheck */;\r\n    }\r\n    shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);\r\n    markProjectedViewsForCheck(view);\r\n    Services.updateDirectives(view, 0 /* CheckAndUpdate */);\r\n    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\r\n    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\r\n    var /** @type {?} */ callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);\r\n    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));\r\n    Services.updateRenderer(view, 0 /* CheckAndUpdate */);\r\n    execComponentViewsAction(view, ViewAction.CheckAndUpdate);\r\n    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\r\n    callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);\r\n    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));\r\n    if (view.def.flags & 2 /* OnPush */) {\r\n        view.state &= ~8 /* ChecksEnabled */;\r\n    }\r\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\r\n    shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} argStyle\r\n * @param {?=} v0\r\n * @param {?=} v1\r\n * @param {?=} v2\r\n * @param {?=} v3\r\n * @param {?=} v4\r\n * @param {?=} v5\r\n * @param {?=} v6\r\n * @param {?=} v7\r\n * @param {?=} v8\r\n * @param {?=} v9\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    if (argStyle === 0 /* Inline */) {\r\n        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n    }\r\n    else {\r\n        return checkAndUpdateNodeDynamic(view, nodeDef, v0);\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction markProjectedViewsForCheck(view) {\r\n    var /** @type {?} */ def = view.def;\r\n    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\r\n        return;\r\n    }\r\n    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\r\n        var /** @type {?} */ nodeDef = def.nodes[i];\r\n        if (nodeDef.flags & 4 /* ProjectedTemplate */) {\r\n            var /** @type {?} */ projectedViews = asElementData(view, i).template._projectedViews;\r\n            if (projectedViews) {\r\n                for (var /** @type {?} */ i_1 = 0; i_1 < projectedViews.length; i_1++) {\r\n                    var /** @type {?} */ projectedView = projectedViews[i_1];\r\n                    projectedView.state |= 32 /* CheckProjectedView */;\r\n                    markParentViewsForCheckProjectedViews(projectedView, view);\r\n                }\r\n            }\r\n        }\r\n        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\r\n            // a parent with leafs\r\n            // no child is a component,\r\n            // then skip the children\r\n            i += nodeDef.childCount;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?=} v0\r\n * @param {?=} v1\r\n * @param {?=} v2\r\n * @param {?=} v3\r\n * @param {?=} v4\r\n * @param {?=} v5\r\n * @param {?=} v6\r\n * @param {?=} v7\r\n * @param {?=} v8\r\n * @param {?=} v9\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    switch (nodeDef.flags & 201347067 /* Types */) {\r\n        case 1 /* TypeElement */:\r\n            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n        case 2 /* TypeText */:\r\n            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n        case 16384 /* TypeDirective */:\r\n            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n        case 32 /* TypePureArray */:\r\n        case 64 /* TypePureObject */:\r\n        case 128 /* TypePurePipe */:\r\n            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n        default:\r\n            throw 'unreachable';\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} values\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateNodeDynamic(view, nodeDef, values) {\r\n    switch (nodeDef.flags & 201347067 /* Types */) {\r\n        case 1 /* TypeElement */:\r\n            return checkAndUpdateElementDynamic(view, nodeDef, values);\r\n        case 2 /* TypeText */:\r\n            return checkAndUpdateTextDynamic(view, nodeDef, values);\r\n        case 16384 /* TypeDirective */:\r\n            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\r\n        case 32 /* TypePureArray */:\r\n        case 64 /* TypePureObject */:\r\n        case 128 /* TypePurePipe */:\r\n            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\r\n        default:\r\n            throw 'unreachable';\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} argStyle\r\n * @param {?=} v0\r\n * @param {?=} v1\r\n * @param {?=} v2\r\n * @param {?=} v3\r\n * @param {?=} v4\r\n * @param {?=} v5\r\n * @param {?=} v6\r\n * @param {?=} v7\r\n * @param {?=} v8\r\n * @param {?=} v9\r\n * @return {?}\r\n */\r\nfunction checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    if (argStyle === 0 /* Inline */) {\r\n        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n    }\r\n    else {\r\n        checkNoChangesNodeDynamic(view, nodeDef, v0);\r\n    }\r\n    // Returning false is ok here as we would have thrown in case of a change.\r\n    return false;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} v0\r\n * @param {?} v1\r\n * @param {?} v2\r\n * @param {?} v3\r\n * @param {?} v4\r\n * @param {?} v5\r\n * @param {?} v6\r\n * @param {?} v7\r\n * @param {?} v8\r\n * @param {?} v9\r\n * @return {?}\r\n */\r\nfunction checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    var /** @type {?} */ bindLen = nodeDef.bindings.length;\r\n    if (bindLen > 0)\r\n        checkBindingNoChanges(view, nodeDef, 0, v0);\r\n    if (bindLen > 1)\r\n        checkBindingNoChanges(view, nodeDef, 1, v1);\r\n    if (bindLen > 2)\r\n        checkBindingNoChanges(view, nodeDef, 2, v2);\r\n    if (bindLen > 3)\r\n        checkBindingNoChanges(view, nodeDef, 3, v3);\r\n    if (bindLen > 4)\r\n        checkBindingNoChanges(view, nodeDef, 4, v4);\r\n    if (bindLen > 5)\r\n        checkBindingNoChanges(view, nodeDef, 5, v5);\r\n    if (bindLen > 6)\r\n        checkBindingNoChanges(view, nodeDef, 6, v6);\r\n    if (bindLen > 7)\r\n        checkBindingNoChanges(view, nodeDef, 7, v7);\r\n    if (bindLen > 8)\r\n        checkBindingNoChanges(view, nodeDef, 8, v8);\r\n    if (bindLen > 9)\r\n        checkBindingNoChanges(view, nodeDef, 9, v9);\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} values\r\n * @return {?}\r\n */\r\nfunction checkNoChangesNodeDynamic(view, nodeDef, values) {\r\n    for (var /** @type {?} */ i = 0; i < values.length; i++) {\r\n        checkBindingNoChanges(view, nodeDef, i, values[i]);\r\n    }\r\n}\r\n/**\r\n * Workaround https://github.com/angular/tsickle/issues/497\r\n * @suppress {misplacedTypeAnnotation}\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @return {?}\r\n */\r\nfunction checkNoChangesQuery(view, nodeDef) {\r\n    var /** @type {?} */ queryList = asQueryList(view, nodeDef.nodeIndex);\r\n    if (queryList.dirty) {\r\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), \"Query \" + (/** @type {?} */ ((nodeDef.query))).id + \" not dirty\", \"Query \" + (/** @type {?} */ ((nodeDef.query))).id + \" dirty\", (view.state & 1 /* BeforeFirstCheck */) !== 0);\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction destroyView(view) {\r\n    if (view.state & 128 /* Destroyed */) {\r\n        return;\r\n    }\r\n    execEmbeddedViewsAction(view, ViewAction.Destroy);\r\n    execComponentViewsAction(view, ViewAction.Destroy);\r\n    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\r\n    if (view.disposables) {\r\n        for (var /** @type {?} */ i = 0; i < view.disposables.length; i++) {\r\n            view.disposables[i]();\r\n        }\r\n    }\r\n    detachProjectedView(view);\r\n    if (view.renderer.destroyNode) {\r\n        destroyViewNodes(view);\r\n    }\r\n    if (isComponentView(view)) {\r\n        view.renderer.destroy();\r\n    }\r\n    view.state |= 128 /* Destroyed */;\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction destroyViewNodes(view) {\r\n    var /** @type {?} */ len = view.def.nodes.length;\r\n    for (var /** @type {?} */ i = 0; i < len; i++) {\r\n        var /** @type {?} */ def = view.def.nodes[i];\r\n        if (def.flags & 1 /* TypeElement */) {\r\n            /** @type {?} */ ((view.renderer.destroyNode))(asElementData(view, i).renderElement);\r\n        }\r\n        else if (def.flags & 2 /* TypeText */) {\r\n            /** @type {?} */ ((view.renderer.destroyNode))(asTextData(view, i).renderText);\r\n        }\r\n        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\r\n            asQueryList(view, i).destroy();\r\n        }\r\n    }\r\n}\r\n/** @enum {number} */\r\nvar ViewAction = {\r\n    CreateViewNodes: 0,\r\n    CheckNoChanges: 1,\r\n    CheckNoChangesProjectedViews: 2,\r\n    CheckAndUpdate: 3,\r\n    CheckAndUpdateProjectedViews: 4,\r\n    Destroy: 5,\r\n};\r\nViewAction[ViewAction.CreateViewNodes] = \"CreateViewNodes\";\r\nViewAction[ViewAction.CheckNoChanges] = \"CheckNoChanges\";\r\nViewAction[ViewAction.CheckNoChangesProjectedViews] = \"CheckNoChangesProjectedViews\";\r\nViewAction[ViewAction.CheckAndUpdate] = \"CheckAndUpdate\";\r\nViewAction[ViewAction.CheckAndUpdateProjectedViews] = \"CheckAndUpdateProjectedViews\";\r\nViewAction[ViewAction.Destroy] = \"Destroy\";\r\n/**\r\n * @param {?} view\r\n * @param {?} action\r\n * @return {?}\r\n */\r\nfunction execComponentViewsAction(view, action) {\r\n    var /** @type {?} */ def = view.def;\r\n    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\r\n        return;\r\n    }\r\n    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\r\n        var /** @type {?} */ nodeDef = def.nodes[i];\r\n        if (nodeDef.flags & 33554432 /* ComponentView */) {\r\n            // a leaf\r\n            callViewAction(asElementData(view, i).componentView, action);\r\n        }\r\n        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\r\n            // a parent with leafs\r\n            // no child is a component,\r\n            // then skip the children\r\n            i += nodeDef.childCount;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} action\r\n * @return {?}\r\n */\r\nfunction execEmbeddedViewsAction(view, action) {\r\n    var /** @type {?} */ def = view.def;\r\n    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\r\n        return;\r\n    }\r\n    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\r\n        var /** @type {?} */ nodeDef = def.nodes[i];\r\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\r\n            // a leaf\r\n            var /** @type {?} */ embeddedViews = /** @type {?} */ ((asElementData(view, i).viewContainer))._embeddedViews;\r\n            for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {\r\n                callViewAction(embeddedViews[k], action);\r\n            }\r\n        }\r\n        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\r\n            // a parent with leafs\r\n            // no child is a component,\r\n            // then skip the children\r\n            i += nodeDef.childCount;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} action\r\n * @return {?}\r\n */\r\nfunction callViewAction(view, action) {\r\n    var /** @type {?} */ viewState = view.state;\r\n    switch (action) {\r\n        case ViewAction.CheckNoChanges:\r\n            if ((viewState & 128 /* Destroyed */) === 0) {\r\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\r\n                    checkNoChangesView(view);\r\n                }\r\n                else if (viewState & 64 /* CheckProjectedViews */) {\r\n                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\r\n                }\r\n            }\r\n            break;\r\n        case ViewAction.CheckNoChangesProjectedViews:\r\n            if ((viewState & 128 /* Destroyed */) === 0) {\r\n                if (viewState & 32 /* CheckProjectedView */) {\r\n                    checkNoChangesView(view);\r\n                }\r\n                else if (viewState & 64 /* CheckProjectedViews */) {\r\n                    execProjectedViewsAction(view, action);\r\n                }\r\n            }\r\n            break;\r\n        case ViewAction.CheckAndUpdate:\r\n            if ((viewState & 128 /* Destroyed */) === 0) {\r\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\r\n                    checkAndUpdateView(view);\r\n                }\r\n                else if (viewState & 64 /* CheckProjectedViews */) {\r\n                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\r\n                }\r\n            }\r\n            break;\r\n        case ViewAction.CheckAndUpdateProjectedViews:\r\n            if ((viewState & 128 /* Destroyed */) === 0) {\r\n                if (viewState & 32 /* CheckProjectedView */) {\r\n                    checkAndUpdateView(view);\r\n                }\r\n                else if (viewState & 64 /* CheckProjectedViews */) {\r\n                    execProjectedViewsAction(view, action);\r\n                }\r\n            }\r\n            break;\r\n        case ViewAction.Destroy:\r\n            // Note: destroyView recurses over all views,\r\n            // so we don't need to special case projected views here.\r\n            destroyView(view);\r\n            break;\r\n        case ViewAction.CreateViewNodes:\r\n            createViewNodes(view);\r\n            break;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} action\r\n * @return {?}\r\n */\r\nfunction execProjectedViewsAction(view, action) {\r\n    execEmbeddedViewsAction(view, action);\r\n    execComponentViewsAction(view, action);\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} queryFlags\r\n * @param {?} staticDynamicQueryFlag\r\n * @param {?} checkType\r\n * @return {?}\r\n */\r\nfunction execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\r\n    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\r\n        return;\r\n    }\r\n    var /** @type {?} */ nodeCount = view.def.nodes.length;\r\n    for (var /** @type {?} */ i = 0; i < nodeCount; i++) {\r\n        var /** @type {?} */ nodeDef = view.def.nodes[i];\r\n        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\r\n            Services.setCurrentNode(view, nodeDef.nodeIndex);\r\n            switch (checkType) {\r\n                case 0 /* CheckAndUpdate */:\r\n                    checkAndUpdateQuery(view, nodeDef);\r\n                    break;\r\n                case 1 /* CheckNoChanges */:\r\n                    checkNoChangesQuery(view, nodeDef);\r\n                    break;\r\n            }\r\n        }\r\n        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\r\n            // no child has a matching query\r\n            // then skip the children\r\n            i += nodeDef.childCount;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar initialized = false;\r\n/**\r\n * @return {?}\r\n */\r\nfunction initServicesIfNeeded() {\r\n    if (initialized) {\r\n        return;\r\n    }\r\n    initialized = true;\r\n    var /** @type {?} */ services = isDevMode() ? createDebugServices() : createProdServices();\r\n    Services.setCurrentNode = services.setCurrentNode;\r\n    Services.createRootView = services.createRootView;\r\n    Services.createEmbeddedView = services.createEmbeddedView;\r\n    Services.createComponentView = services.createComponentView;\r\n    Services.createNgModuleRef = services.createNgModuleRef;\r\n    Services.overrideProvider = services.overrideProvider;\r\n    Services.overrideComponentView = services.overrideComponentView;\r\n    Services.clearOverrides = services.clearOverrides;\r\n    Services.checkAndUpdateView = services.checkAndUpdateView;\r\n    Services.checkNoChangesView = services.checkNoChangesView;\r\n    Services.destroyView = services.destroyView;\r\n    Services.resolveDep = resolveDep;\r\n    Services.createDebugContext = services.createDebugContext;\r\n    Services.handleEvent = services.handleEvent;\r\n    Services.updateDirectives = services.updateDirectives;\r\n    Services.updateRenderer = services.updateRenderer;\r\n    Services.dirtyParentQueries = dirtyParentQueries;\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction createProdServices() {\r\n    return {\r\n        setCurrentNode: function () { },\r\n        createRootView: createProdRootView,\r\n        createEmbeddedView: createEmbeddedView,\r\n        createComponentView: createComponentView,\r\n        createNgModuleRef: createNgModuleRef,\r\n        overrideProvider: NOOP,\r\n        overrideComponentView: NOOP,\r\n        clearOverrides: NOOP,\r\n        checkAndUpdateView: checkAndUpdateView,\r\n        checkNoChangesView: checkNoChangesView,\r\n        destroyView: destroyView,\r\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\r\n        handleEvent: function (view, nodeIndex, eventName, event) {\r\n            return view.def.handleEvent(view, nodeIndex, eventName, event);\r\n        },\r\n        updateDirectives: function (view, checkType) {\r\n            return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\r\n                prodCheckNoChangesNode, view);\r\n        },\r\n        updateRenderer: function (view, checkType) {\r\n            return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\r\n                prodCheckNoChangesNode, view);\r\n        },\r\n    };\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction createDebugServices() {\r\n    return {\r\n        setCurrentNode: debugSetCurrentNode,\r\n        createRootView: debugCreateRootView,\r\n        createEmbeddedView: debugCreateEmbeddedView,\r\n        createComponentView: debugCreateComponentView,\r\n        createNgModuleRef: debugCreateNgModuleRef,\r\n        overrideProvider: debugOverrideProvider,\r\n        overrideComponentView: debugOverrideComponentView,\r\n        clearOverrides: debugClearOverrides,\r\n        checkAndUpdateView: debugCheckAndUpdateView,\r\n        checkNoChangesView: debugCheckNoChangesView,\r\n        destroyView: debugDestroyView,\r\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\r\n        handleEvent: debugHandleEvent,\r\n        updateDirectives: debugUpdateDirectives,\r\n        updateRenderer: debugUpdateRenderer,\r\n    };\r\n}\r\n/**\r\n * @param {?} elInjector\r\n * @param {?} projectableNodes\r\n * @param {?} rootSelectorOrNode\r\n * @param {?} def\r\n * @param {?} ngModule\r\n * @param {?=} context\r\n * @return {?}\r\n */\r\nfunction createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\r\n    var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);\r\n    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\r\n}\r\n/**\r\n * @param {?} elInjector\r\n * @param {?} projectableNodes\r\n * @param {?} rootSelectorOrNode\r\n * @param {?} def\r\n * @param {?} ngModule\r\n * @param {?=} context\r\n * @return {?}\r\n */\r\nfunction debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\r\n    var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);\r\n    var /** @type {?} */ root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\r\n    var /** @type {?} */ defWithOverride = applyProviderOverridesToView(def);\r\n    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\r\n}\r\n/**\r\n * @param {?} elInjector\r\n * @param {?} ngModule\r\n * @param {?} rendererFactory\r\n * @param {?} projectableNodes\r\n * @param {?} rootSelectorOrNode\r\n * @return {?}\r\n */\r\nfunction createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\r\n    var /** @type {?} */ sanitizer = ngModule.injector.get(Sanitizer);\r\n    var /** @type {?} */ errorHandler = ngModule.injector.get(ErrorHandler);\r\n    var /** @type {?} */ renderer = rendererFactory.createRenderer(null, null);\r\n    return {\r\n        ngModule: ngModule,\r\n        injector: elInjector, projectableNodes: projectableNodes,\r\n        selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer, errorHandler: errorHandler\r\n    };\r\n}\r\n/**\r\n * @param {?} parentView\r\n * @param {?} anchorDef\r\n * @param {?} viewDef\r\n * @param {?=} context\r\n * @return {?}\r\n */\r\nfunction debugCreateEmbeddedView(parentView, anchorDef, viewDef$$1, context) {\r\n    var /** @type {?} */ defWithOverride = applyProviderOverridesToView(viewDef$$1);\r\n    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\r\n}\r\n/**\r\n * @param {?} parentView\r\n * @param {?} nodeDef\r\n * @param {?} viewDef\r\n * @param {?} hostElement\r\n * @return {?}\r\n */\r\nfunction debugCreateComponentView(parentView, nodeDef, viewDef$$1, hostElement) {\r\n    var /** @type {?} */ overrideComponentView = viewDefOverrides.get(/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).componentProvider)).provider)).token);\r\n    if (overrideComponentView) {\r\n        viewDef$$1 = overrideComponentView;\r\n    }\r\n    else {\r\n        viewDef$$1 = applyProviderOverridesToView(viewDef$$1);\r\n    }\r\n    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef$$1, hostElement]);\r\n}\r\n/**\r\n * @param {?} moduleType\r\n * @param {?} parentInjector\r\n * @param {?} bootstrapComponents\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\r\n    var /** @type {?} */ defWithOverride = applyProviderOverridesToNgModule(def);\r\n    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\r\n}\r\nvar providerOverrides = new Map();\r\nvar providerOverridesWithScope = new Map();\r\nvar viewDefOverrides = new Map();\r\n/**\r\n * @param {?} override\r\n * @return {?}\r\n */\r\nfunction debugOverrideProvider(override) {\r\n    providerOverrides.set(override.token, override);\r\n    if (typeof override.token === 'function' && override.token.ngInjectableDef &&\r\n        typeof override.token.ngInjectableDef.providedIn === 'function') {\r\n        providerOverridesWithScope.set(/** @type {?} */ (override.token), override);\r\n    }\r\n}\r\n/**\r\n * @param {?} comp\r\n * @param {?} compFactory\r\n * @return {?}\r\n */\r\nfunction debugOverrideComponentView(comp, compFactory) {\r\n    var /** @type {?} */ hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));\r\n    var /** @type {?} */ compViewDef = resolveDefinition(/** @type {?} */ ((/** @type {?} */ ((hostViewDef.nodes[0].element)).componentView)));\r\n    viewDefOverrides.set(comp, compViewDef);\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction debugClearOverrides() {\r\n    providerOverrides.clear();\r\n    providerOverridesWithScope.clear();\r\n    viewDefOverrides.clear();\r\n}\r\n/**\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction applyProviderOverridesToView(def) {\r\n    if (providerOverrides.size === 0) {\r\n        return def;\r\n    }\r\n    var /** @type {?} */ elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\r\n    if (elementIndicesWithOverwrittenProviders.length === 0) {\r\n        return def;\r\n    }\r\n    // clone the whole view definition,\r\n    // as it maintains references between the nodes that are hard to update.\r\n    def = /** @type {?} */ ((def.factory))(function () { return NOOP; });\r\n    for (var /** @type {?} */ i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\r\n        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\r\n    }\r\n    return def;\r\n    /**\r\n     * @param {?} def\r\n     * @return {?}\r\n     */\r\n    function findElementIndicesWithOverwrittenProviders(def) {\r\n        var /** @type {?} */ elIndicesWithOverwrittenProviders = [];\r\n        var /** @type {?} */ lastElementDef = null;\r\n        for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {\r\n            var /** @type {?} */ nodeDef = def.nodes[i];\r\n            if (nodeDef.flags & 1 /* TypeElement */) {\r\n                lastElementDef = nodeDef;\r\n            }\r\n            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&\r\n                providerOverrides.has(/** @type {?} */ ((nodeDef.provider)).token)) {\r\n                elIndicesWithOverwrittenProviders.push(/** @type {?} */ ((lastElementDef)).nodeIndex);\r\n                lastElementDef = null;\r\n            }\r\n        }\r\n        return elIndicesWithOverwrittenProviders;\r\n    }\r\n    /**\r\n     * @param {?} viewDef\r\n     * @param {?} elIndex\r\n     * @return {?}\r\n     */\r\n    function applyProviderOverridesToElement(viewDef$$1, elIndex) {\r\n        for (var /** @type {?} */ i = elIndex + 1; i < viewDef$$1.nodes.length; i++) {\r\n            var /** @type {?} */ nodeDef = viewDef$$1.nodes[i];\r\n            if (nodeDef.flags & 1 /* TypeElement */) {\r\n                // stop at the next element\r\n                return;\r\n            }\r\n            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\r\n                var /** @type {?} */ provider = /** @type {?} */ ((nodeDef.provider));\r\n                var /** @type {?} */ override = providerOverrides.get(provider.token);\r\n                if (override) {\r\n                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\r\n                    provider.deps = splitDepsDsl(override.deps);\r\n                    provider.value = override.value;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction applyProviderOverridesToNgModule(def) {\r\n    var _a = calcHasOverrides(def), hasOverrides = _a.hasOverrides, hasDeprecatedOverrides = _a.hasDeprecatedOverrides;\r\n    if (!hasOverrides) {\r\n        return def;\r\n    }\r\n    // clone the whole view definition,\r\n    // as it maintains references between the nodes that are hard to update.\r\n    def = /** @type {?} */ ((def.factory))(function () { return NOOP; });\r\n    applyProviderOverrides(def);\r\n    return def;\r\n    /**\r\n     * @param {?} def\r\n     * @return {?}\r\n     */\r\n    function calcHasOverrides(def) {\r\n        var /** @type {?} */ hasOverrides = false;\r\n        var /** @type {?} */ hasDeprecatedOverrides = false;\r\n        if (providerOverrides.size === 0) {\r\n            return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\r\n        }\r\n        def.providers.forEach(function (node) {\r\n            var /** @type {?} */ override = providerOverrides.get(node.token);\r\n            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {\r\n                hasOverrides = true;\r\n                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\r\n            }\r\n        });\r\n        def.modules.forEach(function (module) {\r\n            providerOverridesWithScope.forEach(function (override, token) {\r\n                if (token.ngInjectableDef.providedIn === module) {\r\n                    hasOverrides = true;\r\n                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\r\n                }\r\n            });\r\n        });\r\n        return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\r\n    }\r\n    /**\r\n     * @param {?} def\r\n     * @return {?}\r\n     */\r\n    function applyProviderOverrides(def) {\r\n        for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {\r\n            var /** @type {?} */ provider = def.providers[i];\r\n            if (hasDeprecatedOverrides) {\r\n                // We had a bug where me made\r\n                // all providers lazy. Keep this logic behind a flag\r\n                // for migrating existing users.\r\n                provider.flags |= 4096 /* LazyProvider */;\r\n            }\r\n            var /** @type {?} */ override = providerOverrides.get(provider.token);\r\n            if (override) {\r\n                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\r\n                provider.deps = splitDepsDsl(override.deps);\r\n                provider.value = override.value;\r\n            }\r\n        }\r\n        if (providerOverridesWithScope.size > 0) {\r\n            var /** @type {?} */ moduleSet_1 = new Set(def.modules);\r\n            providerOverridesWithScope.forEach(function (override, token) {\r\n                if (moduleSet_1.has(token.ngInjectableDef.providedIn)) {\r\n                    var /** @type {?} */ provider = {\r\n                        token: token,\r\n                        flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),\r\n                        deps: splitDepsDsl(override.deps),\r\n                        value: override.value,\r\n                        index: def.providers.length,\r\n                    };\r\n                    def.providers.push(provider);\r\n                    def.providersByKey[tokenKey(token)] = provider;\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} checkIndex\r\n * @param {?} argStyle\r\n * @param {?=} v0\r\n * @param {?=} v1\r\n * @param {?=} v2\r\n * @param {?=} v3\r\n * @param {?=} v4\r\n * @param {?=} v5\r\n * @param {?=} v6\r\n * @param {?=} v7\r\n * @param {?=} v8\r\n * @param {?=} v9\r\n * @return {?}\r\n */\r\nfunction prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    var /** @type {?} */ nodeDef = view.def.nodes[checkIndex];\r\n    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\r\n        asPureExpressionData(view, checkIndex).value :\r\n        undefined;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} checkIndex\r\n * @param {?} argStyle\r\n * @param {?=} v0\r\n * @param {?=} v1\r\n * @param {?=} v2\r\n * @param {?=} v3\r\n * @param {?=} v4\r\n * @param {?=} v5\r\n * @param {?=} v6\r\n * @param {?=} v7\r\n * @param {?=} v8\r\n * @param {?=} v9\r\n * @return {?}\r\n */\r\nfunction prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    var /** @type {?} */ nodeDef = view.def.nodes[checkIndex];\r\n    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\r\n        asPureExpressionData(view, checkIndex).value :\r\n        undefined;\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction debugCheckAndUpdateView(view) {\r\n    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction debugCheckNoChangesView(view) {\r\n    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction debugDestroyView(view) {\r\n    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\r\n}\r\n/** @enum {number} */\r\nvar DebugAction = {\r\n    create: 0,\r\n    detectChanges: 1,\r\n    checkNoChanges: 2,\r\n    destroy: 3,\r\n    handleEvent: 4,\r\n};\r\nDebugAction[DebugAction.create] = \"create\";\r\nDebugAction[DebugAction.detectChanges] = \"detectChanges\";\r\nDebugAction[DebugAction.checkNoChanges] = \"checkNoChanges\";\r\nDebugAction[DebugAction.destroy] = \"destroy\";\r\nDebugAction[DebugAction.handleEvent] = \"handleEvent\";\r\nvar _currentAction;\r\nvar _currentView;\r\nvar _currentNodeIndex;\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeIndex\r\n * @return {?}\r\n */\r\nfunction debugSetCurrentNode(view, nodeIndex) {\r\n    _currentView = view;\r\n    _currentNodeIndex = nodeIndex;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeIndex\r\n * @param {?} eventName\r\n * @param {?} event\r\n * @return {?}\r\n */\r\nfunction debugHandleEvent(view, nodeIndex, eventName, event) {\r\n    debugSetCurrentNode(view, nodeIndex);\r\n    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} checkType\r\n * @return {?}\r\n */\r\nfunction debugUpdateDirectives(view, checkType) {\r\n    if (view.state & 128 /* Destroyed */) {\r\n        throw viewDestroyedError(DebugAction[_currentAction]);\r\n    }\r\n    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\r\n    return view.def.updateDirectives(debugCheckDirectivesFn, view);\r\n    /**\r\n     * @param {?} view\r\n     * @param {?} nodeIndex\r\n     * @param {?} argStyle\r\n     * @param {...?} values\r\n     * @return {?}\r\n     */\r\n    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {\r\n        var values = [];\r\n        for (var _i = 3; _i < arguments.length; _i++) {\r\n            values[_i - 3] = arguments[_i];\r\n        }\r\n        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];\r\n        if (checkType === 0 /* CheckAndUpdate */) {\r\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\r\n        }\r\n        else {\r\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\r\n        }\r\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\r\n            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\r\n        }\r\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\r\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\r\n            undefined;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} checkType\r\n * @return {?}\r\n */\r\nfunction debugUpdateRenderer(view, checkType) {\r\n    if (view.state & 128 /* Destroyed */) {\r\n        throw viewDestroyedError(DebugAction[_currentAction]);\r\n    }\r\n    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\r\n    return view.def.updateRenderer(debugCheckRenderNodeFn, view);\r\n    /**\r\n     * @param {?} view\r\n     * @param {?} nodeIndex\r\n     * @param {?} argStyle\r\n     * @param {...?} values\r\n     * @return {?}\r\n     */\r\n    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {\r\n        var values = [];\r\n        for (var _i = 3; _i < arguments.length; _i++) {\r\n            values[_i - 3] = arguments[_i];\r\n        }\r\n        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];\r\n        if (checkType === 0 /* CheckAndUpdate */) {\r\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\r\n        }\r\n        else {\r\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\r\n        }\r\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\r\n            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\r\n        }\r\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\r\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\r\n            undefined;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} argStyle\r\n * @param {?} givenValues\r\n * @return {?}\r\n */\r\nfunction debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\r\n    var /** @type {?} */ changed = (/** @type {?} */ (checkAndUpdateNode)).apply(void 0, [view, nodeDef, argStyle].concat(givenValues));\r\n    if (changed) {\r\n        var /** @type {?} */ values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\r\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\r\n            var /** @type {?} */ bindingValues = {};\r\n            for (var /** @type {?} */ i = 0; i < nodeDef.bindings.length; i++) {\r\n                var /** @type {?} */ binding = nodeDef.bindings[i];\r\n                var /** @type {?} */ value = values[i];\r\n                if (binding.flags & 8 /* TypeProperty */) {\r\n                    bindingValues[normalizeDebugBindingName(/** @type {?} */ ((binding.nonMinifiedName)))] =\r\n                        normalizeDebugBindingValue(value);\r\n                }\r\n            }\r\n            var /** @type {?} */ elDef = /** @type {?} */ ((nodeDef.parent));\r\n            var /** @type {?} */ el = asElementData(view, elDef.nodeIndex).renderElement;\r\n            if (!/** @type {?} */ ((elDef.element)).name) {\r\n                // a comment.\r\n                view.renderer.setValue(el, \"bindings=\" + JSON.stringify(bindingValues, null, 2));\r\n            }\r\n            else {\r\n                // a regular element.\r\n                for (var /** @type {?} */ attr in bindingValues) {\r\n                    var /** @type {?} */ value = bindingValues[attr];\r\n                    if (value != null) {\r\n                        view.renderer.setAttribute(el, attr, value);\r\n                    }\r\n                    else {\r\n                        view.renderer.removeAttribute(el, attr);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} argStyle\r\n * @param {?} values\r\n * @return {?}\r\n */\r\nfunction debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\r\n    (/** @type {?} */ (checkNoChangesNode)).apply(void 0, [view, nodeDef, argStyle].concat(values));\r\n}\r\n/**\r\n * @param {?} name\r\n * @return {?}\r\n */\r\nfunction normalizeDebugBindingName(name) {\r\n    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\r\n    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\r\n    return \"ng-reflect-\" + name;\r\n}\r\nvar CAMEL_CASE_REGEXP = /([A-Z])/g;\r\n/**\r\n * @param {?} input\r\n * @return {?}\r\n */\r\nfunction camelCaseToDashCase(input) {\r\n    return input.replace(CAMEL_CASE_REGEXP, function () {\r\n        var m = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            m[_i] = arguments[_i];\r\n        }\r\n        return '-' + m[1].toLowerCase();\r\n    });\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction normalizeDebugBindingValue(value) {\r\n    try {\r\n        // Limit the size of the value as otherwise the DOM just gets polluted.\r\n        return value != null ? value.toString().slice(0, 30) : value;\r\n    }\r\n    catch (/** @type {?} */ e) {\r\n        return '[ERROR] Exception while trying to serialize the value';\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeIndex\r\n * @return {?}\r\n */\r\nfunction nextDirectiveWithBinding(view, nodeIndex) {\r\n    for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {\r\n        var /** @type {?} */ nodeDef = view.def.nodes[i];\r\n        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\r\n            return i;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeIndex\r\n * @return {?}\r\n */\r\nfunction nextRenderNodeWithBinding(view, nodeIndex) {\r\n    for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {\r\n        var /** @type {?} */ nodeDef = view.def.nodes[i];\r\n        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {\r\n            return i;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nvar DebugContext_ = /** @class */ (function () {\r\n    function DebugContext_(view, nodeIndex) {\r\n        this.view = view;\r\n        this.nodeIndex = nodeIndex;\r\n        if (nodeIndex == null) {\r\n            this.nodeIndex = nodeIndex = 0;\r\n        }\r\n        this.nodeDef = view.def.nodes[nodeIndex];\r\n        var /** @type {?} */ elDef = this.nodeDef;\r\n        var /** @type {?} */ elView = view;\r\n        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\r\n            elDef = /** @type {?} */ ((elDef.parent));\r\n        }\r\n        if (!elDef) {\r\n            while (!elDef && elView) {\r\n                elDef = /** @type {?} */ ((viewParentEl(elView)));\r\n                elView = /** @type {?} */ ((elView.parent));\r\n            }\r\n        }\r\n        this.elDef = elDef;\r\n        this.elView = elView;\r\n    }\r\n    Object.defineProperty(DebugContext_.prototype, \"elOrCompView\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            // Has to be done lazily as we use the DebugContext also during creation of elements...\r\n            return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugContext_.prototype, \"injector\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return createInjector$1(this.elView, this.elDef); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugContext_.prototype, \"component\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return this.elOrCompView.component; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugContext_.prototype, \"context\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return this.elOrCompView.context; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugContext_.prototype, \"providerTokens\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var /** @type {?} */ tokens = [];\r\n            if (this.elDef) {\r\n                for (var /** @type {?} */ i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\r\n                    var /** @type {?} */ childDef = this.elView.def.nodes[i];\r\n                    if (childDef.flags & 20224 /* CatProvider */) {\r\n                        tokens.push(/** @type {?} */ ((childDef.provider)).token);\r\n                    }\r\n                    i += childDef.childCount;\r\n                }\r\n            }\r\n            return tokens;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugContext_.prototype, \"references\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var /** @type {?} */ references = {};\r\n            if (this.elDef) {\r\n                collectReferences(this.elView, this.elDef, references);\r\n                for (var /** @type {?} */ i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\r\n                    var /** @type {?} */ childDef = this.elView.def.nodes[i];\r\n                    if (childDef.flags & 20224 /* CatProvider */) {\r\n                        collectReferences(this.elView, childDef, references);\r\n                    }\r\n                    i += childDef.childCount;\r\n                }\r\n            }\r\n            return references;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugContext_.prototype, \"componentRenderElement\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var /** @type {?} */ elData = findHostElement(this.elOrCompView);\r\n            return elData ? elData.renderElement : undefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DebugContext_.prototype, \"renderNode\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :\r\n                renderNode(this.elView, this.elDef);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {?} console\r\n     * @param {...?} values\r\n     * @return {?}\r\n     */\r\n    DebugContext_.prototype.logError = /**\r\n     * @param {?} console\r\n     * @param {...?} values\r\n     * @return {?}\r\n     */\r\n    function (console) {\r\n        var values = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            values[_i - 1] = arguments[_i];\r\n        }\r\n        var /** @type {?} */ logViewDef;\r\n        var /** @type {?} */ logNodeIndex;\r\n        if (this.nodeDef.flags & 2 /* TypeText */) {\r\n            logViewDef = this.view.def;\r\n            logNodeIndex = this.nodeDef.nodeIndex;\r\n        }\r\n        else {\r\n            logViewDef = this.elView.def;\r\n            logNodeIndex = this.elDef.nodeIndex;\r\n        }\r\n        // Note: we only generate a log function for text and element nodes\r\n        // to make the generated code as small as possible.\r\n        var /** @type {?} */ renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\r\n        var /** @type {?} */ currRenderNodeIndex = -1;\r\n        var /** @type {?} */ nodeLogger = function () {\r\n            currRenderNodeIndex++;\r\n            if (currRenderNodeIndex === renderNodeIndex) {\r\n                return (_a = console.error).bind.apply(_a, [console].concat(values));\r\n            }\r\n            else {\r\n                return NOOP;\r\n            }\r\n            var _a;\r\n        }; /** @type {?} */\r\n        ((logViewDef.factory))(nodeLogger);\r\n        if (currRenderNodeIndex < renderNodeIndex) {\r\n            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\r\n            console.error.apply(console, values);\r\n        }\r\n    };\r\n    return DebugContext_;\r\n}());\r\n/**\r\n * @param {?} viewDef\r\n * @param {?} nodeIndex\r\n * @return {?}\r\n */\r\nfunction getRenderNodeIndex(viewDef$$1, nodeIndex) {\r\n    var /** @type {?} */ renderNodeIndex = -1;\r\n    for (var /** @type {?} */ i = 0; i <= nodeIndex; i++) {\r\n        var /** @type {?} */ nodeDef = viewDef$$1.nodes[i];\r\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\r\n            renderNodeIndex++;\r\n        }\r\n    }\r\n    return renderNodeIndex;\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction findHostElement(view) {\r\n    while (view && !isComponentView(view)) {\r\n        view = /** @type {?} */ ((view.parent));\r\n    }\r\n    if (view.parent) {\r\n        return asElementData(view.parent, /** @type {?} */ ((viewParentEl(view))).nodeIndex);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} references\r\n * @return {?}\r\n */\r\nfunction collectReferences(view, nodeDef, references) {\r\n    for (var /** @type {?} */ refName in nodeDef.references) {\r\n        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\r\n    }\r\n}\r\n/**\r\n * @param {?} action\r\n * @param {?} fn\r\n * @param {?} self\r\n * @param {?} args\r\n * @return {?}\r\n */\r\nfunction callWithDebugContext(action, fn, self, args) {\r\n    var /** @type {?} */ oldAction = _currentAction;\r\n    var /** @type {?} */ oldView = _currentView;\r\n    var /** @type {?} */ oldNodeIndex = _currentNodeIndex;\r\n    try {\r\n        _currentAction = action;\r\n        var /** @type {?} */ result = fn.apply(self, args);\r\n        _currentView = oldView;\r\n        _currentNodeIndex = oldNodeIndex;\r\n        _currentAction = oldAction;\r\n        return result;\r\n    }\r\n    catch (/** @type {?} */ e) {\r\n        if (isViewDebugError(e) || !_currentView) {\r\n            throw e;\r\n        }\r\n        throw viewWrappedDebugError(e, /** @type {?} */ ((getCurrentDebugContext())));\r\n    }\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction getCurrentDebugContext() {\r\n    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\r\n}\r\nvar DebugRendererFactory2 = /** @class */ (function () {\r\n    function DebugRendererFactory2(delegate) {\r\n        this.delegate = delegate;\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} renderData\r\n     * @return {?}\r\n     */\r\n    DebugRendererFactory2.prototype.createRenderer = /**\r\n     * @param {?} element\r\n     * @param {?} renderData\r\n     * @return {?}\r\n     */\r\n    function (element, renderData) {\r\n        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    DebugRendererFactory2.prototype.begin = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.delegate.begin) {\r\n            this.delegate.begin();\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    DebugRendererFactory2.prototype.end = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.delegate.end) {\r\n            this.delegate.end();\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    DebugRendererFactory2.prototype.whenRenderingDone = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.delegate.whenRenderingDone) {\r\n            return this.delegate.whenRenderingDone();\r\n        }\r\n        return Promise.resolve(null);\r\n    };\r\n    return DebugRendererFactory2;\r\n}());\r\nvar DebugRenderer2 = /** @class */ (function () {\r\n    function DebugRenderer2(delegate) {\r\n        this.delegate = delegate;\r\n        this.data = this.delegate.data;\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.destroyNode = /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    function (node) {\r\n        removeDebugNodeFromIndex(/** @type {?} */ ((getDebugNode(node))));\r\n        if (this.delegate.destroyNode) {\r\n            this.delegate.destroyNode(node);\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.destroy = /**\r\n     * @return {?}\r\n     */\r\n    function () { this.delegate.destroy(); };\r\n    /**\r\n     * @param {?} name\r\n     * @param {?=} namespace\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.createElement = /**\r\n     * @param {?} name\r\n     * @param {?=} namespace\r\n     * @return {?}\r\n     */\r\n    function (name, namespace) {\r\n        var /** @type {?} */ el = this.delegate.createElement(name, namespace);\r\n        var /** @type {?} */ debugCtx = getCurrentDebugContext();\r\n        if (debugCtx) {\r\n            var /** @type {?} */ debugEl = new DebugElement(el, null, debugCtx);\r\n            debugEl.name = name;\r\n            indexDebugNode(debugEl);\r\n        }\r\n        return el;\r\n    };\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.createComment = /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (value) {\r\n        var /** @type {?} */ comment = this.delegate.createComment(value);\r\n        var /** @type {?} */ debugCtx = getCurrentDebugContext();\r\n        if (debugCtx) {\r\n            indexDebugNode(new DebugNode(comment, null, debugCtx));\r\n        }\r\n        return comment;\r\n    };\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.createText = /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (value) {\r\n        var /** @type {?} */ text = this.delegate.createText(value);\r\n        var /** @type {?} */ debugCtx = getCurrentDebugContext();\r\n        if (debugCtx) {\r\n            indexDebugNode(new DebugNode(text, null, debugCtx));\r\n        }\r\n        return text;\r\n    };\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} newChild\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.appendChild = /**\r\n     * @param {?} parent\r\n     * @param {?} newChild\r\n     * @return {?}\r\n     */\r\n    function (parent, newChild) {\r\n        var /** @type {?} */ debugEl = getDebugNode(parent);\r\n        var /** @type {?} */ debugChildEl = getDebugNode(newChild);\r\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\r\n            debugEl.addChild(debugChildEl);\r\n        }\r\n        this.delegate.appendChild(parent, newChild);\r\n    };\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} newChild\r\n     * @param {?} refChild\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.insertBefore = /**\r\n     * @param {?} parent\r\n     * @param {?} newChild\r\n     * @param {?} refChild\r\n     * @return {?}\r\n     */\r\n    function (parent, newChild, refChild) {\r\n        var /** @type {?} */ debugEl = getDebugNode(parent);\r\n        var /** @type {?} */ debugChildEl = getDebugNode(newChild);\r\n        var /** @type {?} */ debugRefEl = /** @type {?} */ ((getDebugNode(refChild)));\r\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\r\n            debugEl.insertBefore(debugRefEl, debugChildEl);\r\n        }\r\n        this.delegate.insertBefore(parent, newChild, refChild);\r\n    };\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} oldChild\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.removeChild = /**\r\n     * @param {?} parent\r\n     * @param {?} oldChild\r\n     * @return {?}\r\n     */\r\n    function (parent, oldChild) {\r\n        var /** @type {?} */ debugEl = getDebugNode(parent);\r\n        var /** @type {?} */ debugChildEl = getDebugNode(oldChild);\r\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\r\n            debugEl.removeChild(debugChildEl);\r\n        }\r\n        this.delegate.removeChild(parent, oldChild);\r\n    };\r\n    /**\r\n     * @param {?} selectorOrNode\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.selectRootElement = /**\r\n     * @param {?} selectorOrNode\r\n     * @return {?}\r\n     */\r\n    function (selectorOrNode) {\r\n        var /** @type {?} */ el = this.delegate.selectRootElement(selectorOrNode);\r\n        var /** @type {?} */ debugCtx = getCurrentDebugContext();\r\n        if (debugCtx) {\r\n            indexDebugNode(new DebugElement(el, null, debugCtx));\r\n        }\r\n        return el;\r\n    };\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @param {?=} namespace\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.setAttribute = /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @param {?=} namespace\r\n     * @return {?}\r\n     */\r\n    function (el, name, value, namespace) {\r\n        var /** @type {?} */ debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;\r\n            debugEl.attributes[fullName] = value;\r\n        }\r\n        this.delegate.setAttribute(el, name, value, namespace);\r\n    };\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @param {?=} namespace\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.removeAttribute = /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @param {?=} namespace\r\n     * @return {?}\r\n     */\r\n    function (el, name, namespace) {\r\n        var /** @type {?} */ debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;\r\n            debugEl.attributes[fullName] = null;\r\n        }\r\n        this.delegate.removeAttribute(el, name, namespace);\r\n    };\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.addClass = /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    function (el, name) {\r\n        var /** @type {?} */ debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            debugEl.classes[name] = true;\r\n        }\r\n        this.delegate.addClass(el, name);\r\n    };\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.removeClass = /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    function (el, name) {\r\n        var /** @type {?} */ debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            debugEl.classes[name] = false;\r\n        }\r\n        this.delegate.removeClass(el, name);\r\n    };\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} style\r\n     * @param {?} value\r\n     * @param {?} flags\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.setStyle = /**\r\n     * @param {?} el\r\n     * @param {?} style\r\n     * @param {?} value\r\n     * @param {?} flags\r\n     * @return {?}\r\n     */\r\n    function (el, style, value, flags) {\r\n        var /** @type {?} */ debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            debugEl.styles[style] = value;\r\n        }\r\n        this.delegate.setStyle(el, style, value, flags);\r\n    };\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} style\r\n     * @param {?} flags\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.removeStyle = /**\r\n     * @param {?} el\r\n     * @param {?} style\r\n     * @param {?} flags\r\n     * @return {?}\r\n     */\r\n    function (el, style, flags) {\r\n        var /** @type {?} */ debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            debugEl.styles[style] = null;\r\n        }\r\n        this.delegate.removeStyle(el, style, flags);\r\n    };\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.setProperty = /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (el, name, value) {\r\n        var /** @type {?} */ debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            debugEl.properties[name] = value;\r\n        }\r\n        this.delegate.setProperty(el, name, value);\r\n    };\r\n    /**\r\n     * @param {?} target\r\n     * @param {?} eventName\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.listen = /**\r\n     * @param {?} target\r\n     * @param {?} eventName\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    function (target, eventName, callback) {\r\n        if (typeof target !== 'string') {\r\n            var /** @type {?} */ debugEl = getDebugNode(target);\r\n            if (debugEl) {\r\n                debugEl.listeners.push(new EventListener(eventName, callback));\r\n            }\r\n        }\r\n        return this.delegate.listen(target, eventName, callback);\r\n    };\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.parentNode = /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    function (node) { return this.delegate.parentNode(node); };\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.nextSibling = /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    function (node) { return this.delegate.nextSibling(node); };\r\n    /**\r\n     * @param {?} node\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    DebugRenderer2.prototype.setValue = /**\r\n     * @param {?} node\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (node, value) { return this.delegate.setValue(node, value); };\r\n    return DebugRenderer2;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} override\r\n * @return {?}\r\n */\r\nfunction overrideProvider(override) {\r\n    initServicesIfNeeded();\r\n    return Services.overrideProvider(override);\r\n}\r\n/**\r\n * @param {?} comp\r\n * @param {?} componentFactory\r\n * @return {?}\r\n */\r\nfunction overrideComponentView(comp, componentFactory) {\r\n    initServicesIfNeeded();\r\n    return Services.overrideComponentView(comp, componentFactory);\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction clearOverrides() {\r\n    initServicesIfNeeded();\r\n    return Services.clearOverrides();\r\n}\r\n/**\r\n * @param {?} ngModuleType\r\n * @param {?} bootstrapComponents\r\n * @param {?} defFactory\r\n * @return {?}\r\n */\r\nfunction createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\r\n    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\r\n}\r\nvar NgModuleFactory_ = /** @class */ (function (_super) {\r\n    __extends(NgModuleFactory_, _super);\r\n    function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\r\n        var _this = \r\n        // Attention: this ctor is called as top level function.\r\n        // Putting any logic in here will destroy closure tree shaking!\r\n        _super.call(this) || this;\r\n        _this.moduleType = moduleType;\r\n        _this._bootstrapComponents = _bootstrapComponents;\r\n        _this._ngModuleDefFactory = _ngModuleDefFactory;\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {?} parentInjector\r\n     * @return {?}\r\n     */\r\n    NgModuleFactory_.prototype.create = /**\r\n     * @param {?} parentInjector\r\n     * @return {?}\r\n     */\r\n    function (parentInjector) {\r\n        initServicesIfNeeded();\r\n        var /** @type {?} */ def = resolveDefinition(this._ngModuleDefFactory);\r\n        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\r\n    };\r\n    return NgModuleFactory_;\r\n}(NgModuleFactory));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// The functions in this file verify that the assumptions we are making\r\n// about state in an instruction are correct before implementing any logic.\r\n// They are meant only to be called in dev mode as sanity checks.\r\n/**\r\n * @param {?} actual\r\n * @param {?} msg\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * @template T\r\n * @param {?} actual\r\n * @param {?} expected\r\n * @param {?} msg\r\n * @return {?}\r\n */\r\nfunction assertEqual(actual, expected, msg) {\r\n    if (actual != expected) {\r\n        throwError(msg);\r\n    }\r\n}\r\n/**\r\n * @template T\r\n * @param {?} actual\r\n * @param {?} expected\r\n * @param {?} msg\r\n * @return {?}\r\n */\r\nfunction assertNotEqual(actual, expected, msg) {\r\n    if (actual == expected) {\r\n        throwError(msg);\r\n    }\r\n}\r\n/**\r\n * @template T\r\n * @param {?} actual\r\n * @param {?} expected\r\n * @param {?} msg\r\n * @return {?}\r\n */\r\nfunction assertSame(actual, expected, msg) {\r\n    if (actual !== expected) {\r\n        throwError(msg);\r\n    }\r\n}\r\n/**\r\n * @template T\r\n * @param {?} actual\r\n * @param {?} expected\r\n * @param {?} msg\r\n * @return {?}\r\n */\r\nfunction assertLessThan(actual, expected, msg) {\r\n    if (actual >= expected) {\r\n        throwError(msg);\r\n    }\r\n}\r\n/**\r\n * @template T\r\n * @param {?} actual\r\n * @param {?} msg\r\n * @return {?}\r\n */\r\nfunction assertNull(actual, msg) {\r\n    if (actual != null) {\r\n        throwError(msg);\r\n    }\r\n}\r\n/**\r\n * @template T\r\n * @param {?} actual\r\n * @param {?} msg\r\n * @return {?}\r\n */\r\nfunction assertNotNull(actual, msg) {\r\n    if (actual == null) {\r\n        throwError(msg);\r\n    }\r\n}\r\n/**\r\n * @param {?} actual\r\n * @param {?=} msg\r\n * @return {?}\r\n */\r\nfunction assertComponentType(actual, msg) {\r\n    if (msg === void 0) { msg = 'Type passed in is not ComponentType, it does not have \\'ngComponentDef\\' property.'; }\r\n    if (!actual.ngComponentDef) {\r\n        throwError(msg);\r\n    }\r\n}\r\n/**\r\n * @param {?} msg\r\n * @return {?}\r\n */\r\nfunction throwError(msg) {\r\n    throw new Error(\"ASSERTION ERROR: \" + msg);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * If this is the first template pass, any ngOnInit or ngDoCheck hooks will be queued into\r\n * TView.initHooks during directiveCreate.\r\n *\r\n * The directive index and hook type are encoded into one number (1st bit: type, remaining bits:\r\n * directive index), then saved in the even indices of the initHooks array. The odd indices\r\n * hold the hook functions themselves.\r\n *\r\n * @param {?} index The index of the directive in LView.data\r\n * @param {?} onInit\r\n * @param {?} doCheck\r\n * @param {?} tView The current TView\r\n * @return {?}\r\n */\r\nfunction queueInitHooks(index, onInit, doCheck, tView) {\r\n    ngDevMode &&\r\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');\r\n    if (onInit) {\r\n        (tView.initHooks || (tView.initHooks = [])).push(index, onInit);\r\n    }\r\n    if (doCheck) {\r\n        (tView.initHooks || (tView.initHooks = [])).push(index, doCheck);\r\n        (tView.checkHooks || (tView.checkHooks = [])).push(index, doCheck);\r\n    }\r\n}\r\n/**\r\n * Loops through the directives on a node and queues all their hooks except ngOnInit\r\n * and ngDoCheck, which are queued separately in directiveCreate.\r\n * @param {?} flags\r\n * @param {?} currentView\r\n * @return {?}\r\n */\r\nfunction queueLifecycleHooks(flags, currentView) {\r\n    var /** @type {?} */ tView = currentView.tView;\r\n    if (tView.firstTemplatePass === true) {\r\n        var /** @type {?} */ start = flags >> 13;\r\n        var /** @type {?} */ size = (flags & 8190 /* SIZE_MASK */) >> 1;\r\n        var /** @type {?} */ end = start + size;\r\n        // It's necessary to loop through the directives at elementEnd() (rather than processing in\r\n        // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\r\n        // hooks for projected components and directives must be called *before* their hosts.\r\n        for (var /** @type {?} */ i = start; i < end; i++) {\r\n            var /** @type {?} */ def = (/** @type {?} */ (((tView.directives))[i]));\r\n            queueContentHooks(def, tView, i);\r\n            queueViewHooks(def, tView, i);\r\n            queueDestroyHooks(def, tView, i);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Queues afterContentInit and afterContentChecked hooks on TView\r\n * @param {?} def\r\n * @param {?} tView\r\n * @param {?} i\r\n * @return {?}\r\n */\r\nfunction queueContentHooks(def, tView, i) {\r\n    if (def.afterContentInit) {\r\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentInit);\r\n    }\r\n    if (def.afterContentChecked) {\r\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentChecked);\r\n        (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, def.afterContentChecked);\r\n    }\r\n}\r\n/**\r\n * Queues afterViewInit and afterViewChecked hooks on TView\r\n * @param {?} def\r\n * @param {?} tView\r\n * @param {?} i\r\n * @return {?}\r\n */\r\nfunction queueViewHooks(def, tView, i) {\r\n    if (def.afterViewInit) {\r\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewInit);\r\n    }\r\n    if (def.afterViewChecked) {\r\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewChecked);\r\n        (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, def.afterViewChecked);\r\n    }\r\n}\r\n/**\r\n * Queues onDestroy hooks on TView\r\n * @param {?} def\r\n * @param {?} tView\r\n * @param {?} i\r\n * @return {?}\r\n */\r\nfunction queueDestroyHooks(def, tView, i) {\r\n    if (def.onDestroy != null) {\r\n        (tView.destroyHooks || (tView.destroyHooks = [])).push(i, def.onDestroy);\r\n    }\r\n}\r\n/**\r\n * Calls onInit and doCheck calls if they haven't already been called.\r\n *\r\n * @param {?} currentView The current view\r\n * @param {?} tView\r\n * @param {?} creationMode\r\n * @return {?}\r\n */\r\nfunction executeInitHooks(currentView, tView, creationMode) {\r\n    if (currentView.lifecycleStage === 1 /* INIT */) {\r\n        executeHooks(/** @type {?} */ ((currentView.directives)), tView.initHooks, tView.checkHooks, creationMode);\r\n        currentView.lifecycleStage = 2 /* AFTER_INIT */;\r\n    }\r\n}\r\n/**\r\n * Iterates over afterViewInit and afterViewChecked functions and calls them.\r\n *\r\n * @param {?} data\r\n * @param {?} allHooks\r\n * @param {?} checkHooks\r\n * @param {?} creationMode\r\n * @return {?}\r\n */\r\nfunction executeHooks(data, allHooks, checkHooks, creationMode) {\r\n    var /** @type {?} */ hooksToCall = creationMode ? allHooks : checkHooks;\r\n    if (hooksToCall) {\r\n        callHooks(data, hooksToCall);\r\n    }\r\n}\r\n/**\r\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\r\n * creation mode.\r\n *\r\n * @param {?} data\r\n * @param {?} arr The array in which the hooks are found\r\n * @return {?}\r\n */\r\nfunction callHooks(data, arr) {\r\n    for (var /** @type {?} */ i = 0; i < arr.length; i += 2) {\r\n        (/** @type {?} */ (arr[i | 1])).call(data[/** @type {?} */ (arr[i])]);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nif (typeof ngDevMode == 'undefined') {\r\n    if (typeof window != 'undefined')\r\n        (/** @type {?} */ (window)).ngDevMode = true;\r\n    if (typeof self != 'undefined')\r\n        (/** @type {?} */ (self)).ngDevMode = true;\r\n    if (typeof global != 'undefined')\r\n        (/** @type {?} */ (global)).ngDevMode = true;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Linked list of projected nodes (using the pNextOrParent property).\r\n * @record\r\n */\r\n\r\nvar NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs';\r\n// Note: This hack is necessary so we don't erroneously get a circular dependency\r\n// failure based on types.\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} node\r\n * @param {?} type\r\n * @return {?}\r\n */\r\nfunction assertNodeType(node, type) {\r\n    assertNotNull(node, 'should be called with a node');\r\n    assertEqual(node.type, type, \"should be a \" + typeName(type));\r\n}\r\n/**\r\n * @param {?} node\r\n * @param {...?} types\r\n * @return {?}\r\n */\r\nfunction assertNodeOfPossibleTypes(node) {\r\n    var types = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        types[_i - 1] = arguments[_i];\r\n    }\r\n    assertNotNull(node, 'should be called with a node');\r\n    var /** @type {?} */ found = types.some(function (type) { return node.type === type; });\r\n    assertEqual(found, true, \"Should be one of \" + types.map(typeName).join(', '));\r\n}\r\n/**\r\n * @param {?} type\r\n * @return {?}\r\n */\r\nfunction typeName(type) {\r\n    if (type == 1 /* Projection */)\r\n        return 'Projection';\r\n    if (type == 0 /* Container */)\r\n        return 'Container';\r\n    if (type == 2 /* View */)\r\n        return 'View';\r\n    if (type == 3 /* Element */)\r\n        return 'Element';\r\n    return '<unknown>';\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * The state associated with an LContainer\r\n * @record\r\n */\r\n\r\n// Note: This hack is necessary so we don't erroneously get a circular dependency\r\n// failure based on types.\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @enum {number} */\r\n/**\r\n * LNode is an internal data structure which is used for the incremental DOM algorithm.\r\n * The \"L\" stands for \"Logical\" to differentiate between `RNodes` (actual rendered DOM\r\n * node) and our logical representation of DOM nodes, `LNodes`.\r\n *\r\n * The data structure is optimized for speed and size.\r\n *\r\n * In order to be fast, all subtypes of `LNode` should have the same shape.\r\n * Because size of the `LNode` matters, many fields have multiple roles depending\r\n * on the `LNode` subtype.\r\n *\r\n * See: https://en.wikipedia.org/wiki/Inline_caching#Monomorphic_inline_caching\r\n *\r\n * NOTE: This is a private data structure and should not be exported by any of the\r\n * instructions.\r\n * @record\r\n */\r\n\r\n/**\r\n * LNode representing an element.\r\n * @record\r\n */\r\n\r\n/**\r\n * LNode representing a #text node.\r\n * @record\r\n */\r\n\r\n/**\r\n * Abstract node which contains root nodes of a view.\r\n * @record\r\n */\r\n\r\n/**\r\n * Abstract node container which contains other views.\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * LNode binding data (flyweight) for a particular node that is shared between all templates\r\n * of a specific type.\r\n *\r\n * If a property is:\r\n *    - PropertyAliases: that property's data was generated and this is it\r\n *    - Null: that property's data was already generated and nothing was found.\r\n *    - Undefined: that property's data has not yet been generated\r\n *\r\n * see: https://en.wikipedia.org/wiki/Flyweight_pattern for more on the Flyweight pattern\r\n * @record\r\n */\r\n\r\n/**\r\n * Static data for an LElementNode\r\n * @record\r\n */\r\n\r\n/**\r\n * Static data for an LContainerNode\r\n * @record\r\n */\r\n\r\n// Note: This hack is necessary so we don't erroneously get a circular dependency\r\n// failure based on types.\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @enum {number} */\r\nvar RendererStyleFlags3 = {\r\n    Important: 1,\r\n    DashCase: 2,\r\n};\r\nRendererStyleFlags3[RendererStyleFlags3.Important] = \"Important\";\r\nRendererStyleFlags3[RendererStyleFlags3.DashCase] = \"DashCase\";\r\n/**\r\n * Object Oriented style of API needed to create elements and text nodes.\r\n *\r\n * This is the native browser API style, e.g. operations are methods on individual objects\r\n * like HTMLElement. With this style, no additional code is needed as a facade\r\n * (reducing payload size).\r\n *\r\n * @record\r\n */\r\n\r\n/**\r\n * Returns whether the `renderer` is a `ProceduralRenderer3`\r\n * @param {?} renderer\r\n * @return {?}\r\n */\r\nfunction isProceduralRenderer(renderer) {\r\n    return !!((/** @type {?} */ (renderer)).listen);\r\n}\r\n/**\r\n * Procedural style of API needed to create elements and text nodes.\r\n *\r\n * In non-native browser environments (e.g. platforms such as web-workers), this is the\r\n * facade that enables element manipulation. This also facilitates backwards compatibility\r\n * with Renderer2.\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\nvar domRendererFactory3 = {\r\n    createRenderer: function (hostElement, rendererType) { return document; }\r\n};\r\n/**\r\n * Subset of API needed for appending elements and text nodes.\r\n * @record\r\n */\r\n\r\n/**\r\n * Subset of API needed for writing attributes, properties, and setting up\r\n * listeners on Element.\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n// Note: This hack is necessary so we don't erroneously get a circular dependency\r\n// failure based on types.\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * `LView` stores all of the information needed to process the instructions as\r\n * they are invoked from the template. Each embedded view and component view has its\r\n * own `LView`. When processing a particular view, we set the `currentView` to that\r\n * `LView`. When that view is done processing, the `currentView` is set back to\r\n * whatever the original `currentView` was before (the parent `LView`).\r\n *\r\n * Keeping separate state for each view facilities view insertion / deletion, so we\r\n * don't have to edit the data array based on which views are present.\r\n * @record\r\n */\r\n\r\n/**\r\n * Interface necessary to work with view tree traversal\r\n * @record\r\n */\r\n\r\n/**\r\n * The static data for an LView (shared between all templates of a\r\n * given type).\r\n *\r\n * Stored on the template function as ngPrivateData.\r\n * @record\r\n */\r\n\r\n/**\r\n * RootContext contains information which is shared for all components which\r\n * were bootstrapped with {\\@link renderComponent}.\r\n * @record\r\n */\r\n\r\n// Note: This hack is necessary so we don't erroneously get a circular dependency\r\n// failure based on types.\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Returns the first RNode following the given LNode in the same parent DOM element.\r\n *\r\n * This is needed in order to insert the given node with insertBefore.\r\n *\r\n * @param {?} node The node whose following DOM node must be found.\r\n * @param {?} stopNode A parent node at which the lookup in the tree should be stopped, or null if the\r\n * lookup should not be stopped until the result is found.\r\n * @return {?} RNode before which the provided node should be inserted or null if the lookup was\r\n * stopped\r\n * or if there is no native node after the given logical node in the same native parent.\r\n */\r\nfunction findNextRNodeSibling(node, stopNode) {\r\n    var /** @type {?} */ currentNode = node;\r\n    while (currentNode && currentNode !== stopNode) {\r\n        var /** @type {?} */ pNextOrParent = currentNode.pNextOrParent;\r\n        if (pNextOrParent) {\r\n            while (pNextOrParent.type !== 1 /* Projection */) {\r\n                var /** @type {?} */ nativeNode = findFirstRNode(pNextOrParent);\r\n                if (nativeNode) {\r\n                    return nativeNode;\r\n                }\r\n                pNextOrParent = /** @type {?} */ ((pNextOrParent.pNextOrParent));\r\n            }\r\n            currentNode = pNextOrParent;\r\n        }\r\n        else {\r\n            var /** @type {?} */ currentSibling = currentNode.next;\r\n            while (currentSibling) {\r\n                var /** @type {?} */ nativeNode = findFirstRNode(currentSibling);\r\n                if (nativeNode) {\r\n                    return nativeNode;\r\n                }\r\n                currentSibling = currentSibling.next;\r\n            }\r\n            var /** @type {?} */ parentNode = currentNode.parent;\r\n            currentNode = null;\r\n            if (parentNode) {\r\n                var /** @type {?} */ parentType = parentNode.type;\r\n                if (parentType === 0 /* Container */ || parentType === 2 /* View */) {\r\n                    currentNode = parentNode;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Get the next node in the LNode tree, taking into account the place where a node is\r\n * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\r\n *\r\n * @param {?} node The node whose next node in the LNode tree must be found.\r\n * @return {?} LNode|null The next sibling in the LNode tree.\r\n */\r\nfunction getNextLNodeWithProjection(node) {\r\n    var /** @type {?} */ pNextOrParent = node.pNextOrParent;\r\n    if (pNextOrParent) {\r\n        // The node is projected\r\n        var /** @type {?} */ isLastProjectedNode = pNextOrParent.type === 1;\r\n        // returns pNextOrParent if we are not at the end of the list, null otherwise\r\n        return isLastProjectedNode ? null : pNextOrParent;\r\n    }\r\n    // returns node.next because the the node is not projected\r\n    return node.next;\r\n}\r\n/**\r\n * Find the next node in the LNode tree, taking into account the place where a node is\r\n * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\r\n *\r\n * If there is no sibling node, this function goes to the next sibling of the parent node...\r\n * until it reaches rootNode (at which point null is returned).\r\n *\r\n * @param {?} initialNode The node whose following node in the LNode tree must be found.\r\n * @param {?} rootNode The root node at which the lookup should stop.\r\n * @return {?} LNode|null The following node in the LNode tree.\r\n */\r\nfunction getNextOrParentSiblingNode(initialNode, rootNode) {\r\n    var /** @type {?} */ node = initialNode;\r\n    var /** @type {?} */ nextNode = getNextLNodeWithProjection(node);\r\n    while (node && !nextNode) {\r\n        // if node.pNextOrParent is not null here, it is not the next node\r\n        // (because, at this point, nextNode is null, so it is the parent)\r\n        node = node.pNextOrParent || node.parent;\r\n        if (node === rootNode) {\r\n            return null;\r\n        }\r\n        nextNode = node && getNextLNodeWithProjection(node);\r\n    }\r\n    return nextNode;\r\n}\r\n/**\r\n * Returns the first RNode inside the given LNode.\r\n *\r\n * @param {?} rootNode\r\n * @return {?} RNode The first RNode of the given LNode or null if there is none.\r\n */\r\nfunction findFirstRNode(rootNode) {\r\n    var /** @type {?} */ node = rootNode;\r\n    while (node) {\r\n        var /** @type {?} */ nextNode = null;\r\n        if (node.type === 3 /* Element */) {\r\n            // A LElementNode has a matching RNode in LElementNode.native\r\n            return (/** @type {?} */ (node)).native;\r\n        }\r\n        else if (node.type === 0 /* Container */) {\r\n            // For container look at the first node of the view next\r\n            var /** @type {?} */ childContainerData = (/** @type {?} */ (node)).data;\r\n            nextNode = childContainerData.views.length ? childContainerData.views[0].child : null;\r\n        }\r\n        else if (node.type === 1 /* Projection */) {\r\n            // For Projection look at the first projected node\r\n            nextNode = (/** @type {?} */ (node)).data.head;\r\n        }\r\n        else {\r\n            // Otherwise look at the first child\r\n            nextNode = (/** @type {?} */ (node)).child;\r\n        }\r\n        node = nextNode === null ? getNextOrParentSiblingNode(node, rootNode) : nextNode;\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @param {?} container\r\n * @param {?} rootNode\r\n * @param {?} insertMode\r\n * @param {?=} beforeNode\r\n * @return {?}\r\n */\r\nfunction addRemoveViewFromContainer(container, rootNode, insertMode, beforeNode) {\r\n    ngDevMode && assertNodeType(container, 0 /* Container */);\r\n    ngDevMode && assertNodeType(rootNode, 2 /* View */);\r\n    var /** @type {?} */ parentNode = container.data.renderParent;\r\n    var /** @type {?} */ parent = parentNode ? parentNode.native : null;\r\n    var /** @type {?} */ node = rootNode.child;\r\n    if (parent) {\r\n        while (node) {\r\n            var /** @type {?} */ nextNode = null;\r\n            var /** @type {?} */ renderer = container.view.renderer;\r\n            if (node.type === 3 /* Element */) {\r\n                if (insertMode) {\r\n                    isProceduralRenderer(renderer) ?\r\n                        renderer.insertBefore(parent, /** @type {?} */ ((node.native)), /** @type {?} */ (beforeNode)) :\r\n                        parent.insertBefore(/** @type {?} */ ((node.native)), /** @type {?} */ (beforeNode), true);\r\n                }\r\n                else {\r\n                    isProceduralRenderer(renderer) ? renderer.removeChild(/** @type {?} */ (parent), /** @type {?} */ ((node.native))) :\r\n                        parent.removeChild(/** @type {?} */ ((node.native)));\r\n                }\r\n                nextNode = node.next;\r\n            }\r\n            else if (node.type === 0 /* Container */) {\r\n                // if we get to a container, it must be a root node of a view because we are only\r\n                // propagating down into child views / containers and not child elements\r\n                var /** @type {?} */ childContainerData = (/** @type {?} */ (node)).data;\r\n                childContainerData.renderParent = parentNode;\r\n                nextNode = childContainerData.views.length ? childContainerData.views[0].child : null;\r\n            }\r\n            else if (node.type === 1 /* Projection */) {\r\n                nextNode = (/** @type {?} */ (node)).data.head;\r\n            }\r\n            else {\r\n                nextNode = (/** @type {?} */ (node)).child;\r\n            }\r\n            if (nextNode === null) {\r\n                node = getNextOrParentSiblingNode(node, rootNode);\r\n            }\r\n            else {\r\n                node = nextNode;\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Traverses the tree of component views and containers to remove listeners and\r\n * call onDestroy callbacks.\r\n *\r\n * Notes:\r\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\r\n *  - Must process containers instead of their views to avoid splicing\r\n *  when views are destroyed and re-added.\r\n *  - Using a while loop because it's faster than recursion\r\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\r\n *\r\n *  \\@param rootView The view to destroy\r\n * @param {?} rootView\r\n * @return {?}\r\n */\r\nfunction destroyViewTree(rootView) {\r\n    var /** @type {?} */ viewOrContainer = rootView;\r\n    while (viewOrContainer) {\r\n        var /** @type {?} */ next = null;\r\n        if (viewOrContainer.views && viewOrContainer.views.length) {\r\n            next = viewOrContainer.views[0].data;\r\n        }\r\n        else if (viewOrContainer.child) {\r\n            next = viewOrContainer.child;\r\n        }\r\n        else if (viewOrContainer.next) {\r\n            cleanUpView(/** @type {?} */ (viewOrContainer));\r\n            next = viewOrContainer.next;\r\n        }\r\n        if (next == null) {\r\n            // If the viewOrContainer is the rootView, then the cleanup is done twice.\r\n            // Without this check, ngOnDestroy would be called twice for a directive on an element.\r\n            while (viewOrContainer && !/** @type {?} */ ((viewOrContainer)).next && viewOrContainer !== rootView) {\r\n                cleanUpView(/** @type {?} */ (viewOrContainer));\r\n                viewOrContainer = getParentState(viewOrContainer, rootView);\r\n            }\r\n            cleanUpView(/** @type {?} */ (viewOrContainer) || rootView);\r\n            next = viewOrContainer && viewOrContainer.next;\r\n        }\r\n        viewOrContainer = next;\r\n    }\r\n}\r\n/**\r\n * Inserts a view into a container.\r\n *\r\n * This adds the view to the container's array of active views in the correct\r\n * position. It also adds the view's elements to the DOM if the container isn't a\r\n * root node of another view (in that case, the view's elements will be added when\r\n * the container's parent view is added later).\r\n *\r\n * @param {?} container The container into which the view should be inserted\r\n * @param {?} newView The view to insert\r\n * @param {?} index The index at which to insert the view\r\n * @return {?} The inserted view\r\n */\r\nfunction insertView(container, newView, index) {\r\n    var /** @type {?} */ state = container.data;\r\n    var /** @type {?} */ views = state.views;\r\n    if (index > 0) {\r\n        // This is a new view, we need to add it to the children.\r\n        setViewNext(views[index - 1], newView);\r\n    }\r\n    if (index < views.length) {\r\n        setViewNext(newView, views[index]);\r\n        views.splice(index, 0, newView);\r\n    }\r\n    else {\r\n        views.push(newView);\r\n    }\r\n    // If the container's renderParent is null, we know that it is a root node of its own parent view\r\n    // and we should wait until that parent processes its nodes (otherwise, we will insert this view's\r\n    // nodes twice - once now and once when its parent inserts its views).\r\n    if (container.data.renderParent !== null) {\r\n        var /** @type {?} */ beforeNode = findNextRNodeSibling(newView, container);\r\n        if (!beforeNode) {\r\n            var /** @type {?} */ containerNextNativeNode = container.native;\r\n            if (containerNextNativeNode === undefined) {\r\n                containerNextNativeNode = container.native = findNextRNodeSibling(container, null);\r\n            }\r\n            beforeNode = containerNextNativeNode;\r\n        }\r\n        addRemoveViewFromContainer(container, newView, true, beforeNode);\r\n    }\r\n    return newView;\r\n}\r\n/**\r\n * Removes a view from a container.\r\n *\r\n * This method splices the view from the container's array of active views. It also\r\n * removes the view's elements from the DOM and conducts cleanup (e.g. removing\r\n * listeners, calling onDestroys).\r\n *\r\n * @param {?} container The container from which to remove a view\r\n * @param {?} removeIndex The index of the view to remove\r\n * @return {?} The removed view\r\n */\r\nfunction removeView(container, removeIndex) {\r\n    var /** @type {?} */ views = container.data.views;\r\n    var /** @type {?} */ viewNode = views[removeIndex];\r\n    if (removeIndex > 0) {\r\n        setViewNext(views[removeIndex - 1], viewNode.next);\r\n    }\r\n    views.splice(removeIndex, 1);\r\n    destroyViewTree(viewNode.data);\r\n    addRemoveViewFromContainer(container, viewNode, false);\r\n    // Notify query that view has been removed\r\n    container.data.queries && container.data.queries.removeView(removeIndex);\r\n    return viewNode;\r\n}\r\n/**\r\n * Sets a next on the view node, so views in for loops can easily jump from\r\n * one view to the next to add/remove elements. Also adds the LView (view.data)\r\n * to the view tree for easy traversal when cleaning up the view.\r\n *\r\n * @param {?} view The view to set up\r\n * @param {?} next The view's new next\r\n * @return {?}\r\n */\r\nfunction setViewNext(view, next) {\r\n    view.next = next;\r\n    view.data.next = next ? next.data : null;\r\n}\r\n/**\r\n * Determines which LViewOrLContainer to jump to when traversing back up the\r\n * tree in destroyViewTree.\r\n *\r\n * Normally, the view's parent LView should be checked, but in the case of\r\n * embedded views, the container (which is the view node's parent, but not the\r\n * LView's parent) needs to be checked for a possible next property.\r\n *\r\n * @param {?} state The LViewOrLContainer for which we need a parent state\r\n * @param {?} rootView The rootView, so we don't propagate too far up the view tree\r\n * @return {?} The correct parent LViewOrLContainer\r\n */\r\nfunction getParentState(state, rootView) {\r\n    var /** @type {?} */ node;\r\n    if ((node = /** @type {?} */ (((/** @type {?} */ (state)))).node) && node.type === 2 /* View */) {\r\n        // if it's an embedded view, the state needs to go up to the container, in case the\r\n        // container has a next\r\n        return /** @type {?} */ (((node.parent)).data);\r\n    }\r\n    else {\r\n        // otherwise, use parent view for containers or component views\r\n        return state.parent === rootView ? null : state.parent;\r\n    }\r\n}\r\n/**\r\n * Removes all listeners and call all onDestroys in a given view.\r\n *\r\n * @param {?} view The LView to clean up\r\n * @return {?}\r\n */\r\nfunction cleanUpView(view) {\r\n    removeListeners(view);\r\n    executeOnDestroys(view);\r\n    executePipeOnDestroys(view);\r\n}\r\n/**\r\n * Removes listeners and unsubscribes from output subscriptions\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction removeListeners(view) {\r\n    var /** @type {?} */ cleanup = /** @type {?} */ ((view.cleanup));\r\n    if (cleanup != null) {\r\n        for (var /** @type {?} */ i = 0; i < cleanup.length - 1; i += 2) {\r\n            if (typeof cleanup[i] === 'string') {\r\n                /** @type {?} */ ((cleanup))[i + 1].removeEventListener(cleanup[i], cleanup[i + 2], cleanup[i + 3]);\r\n                i += 2;\r\n            }\r\n            else {\r\n                cleanup[i].call(cleanup[i + 1]);\r\n            }\r\n        }\r\n        view.cleanup = null;\r\n    }\r\n}\r\n/**\r\n * Calls onDestroy hooks for this view\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction executeOnDestroys(view) {\r\n    var /** @type {?} */ tView = view.tView;\r\n    var /** @type {?} */ destroyHooks;\r\n    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\r\n        callHooks(/** @type {?} */ ((view.directives)), destroyHooks);\r\n    }\r\n}\r\n/**\r\n * Calls pipe destroy hooks for this view\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction executePipeOnDestroys(view) {\r\n    var /** @type {?} */ pipeDestroyHooks = view.tView && view.tView.pipeDestroyHooks;\r\n    if (pipeDestroyHooks) {\r\n        callHooks(/** @type {?} */ ((view.data)), pipeDestroyHooks);\r\n    }\r\n}\r\n/**\r\n * Returns whether a native element should be inserted in the given parent.\r\n *\r\n * The native node can be inserted when its parent is:\r\n * - A regular element => Yes\r\n * - A component host element =>\r\n *    - if the `currentView` === the parent `view`: The element is in the content (vs the\r\n *      template)\r\n *      => don't add as the parent component will project if needed.\r\n *    - `currentView` !== the parent `view` => The element is in the template (vs the content),\r\n *      add it\r\n * - View element => delay insertion, will be done on `viewEnd()`\r\n *\r\n * @param {?} parent The parent in which to insert the child\r\n * @param {?} currentView The LView being processed\r\n * @return {?} boolean Whether the child element should be inserted.\r\n */\r\nfunction canInsertNativeNode(parent, currentView) {\r\n    var /** @type {?} */ parentIsElement = parent.type === 3;\r\n    return parentIsElement &&\r\n        (parent.view !== currentView || parent.data === null /* Regular Element. */);\r\n}\r\n/**\r\n * Appends the `child` element to the `parent`.\r\n *\r\n * The element insertion might be delayed {\\@link canInsertNativeNode}\r\n *\r\n * @param {?} parent The parent to which to append the child\r\n * @param {?} child The child that should be appended\r\n * @param {?} currentView The current LView\r\n * @return {?} Whether or not the child was appended\r\n */\r\nfunction appendChild(parent, child, currentView) {\r\n    if (child !== null && canInsertNativeNode(parent, currentView)) {\r\n        // We only add element if not in View or not projected.\r\n        var /** @type {?} */ renderer = currentView.renderer;\r\n        isProceduralRenderer(renderer) ? renderer.appendChild(/** @type {?} */ (((parent.native))), child) : /** @type {?} */ ((parent.native)).appendChild(child);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Inserts the provided node before the correct element in the DOM.\r\n *\r\n * The element insertion might be delayed {\\@link canInsertNativeNode}\r\n *\r\n * @param {?} node Node to insert\r\n * @param {?} currentView Current LView\r\n * @return {?}\r\n */\r\nfunction insertChild(node, currentView) {\r\n    var /** @type {?} */ parent = /** @type {?} */ ((node.parent));\r\n    if (canInsertNativeNode(parent, currentView)) {\r\n        var /** @type {?} */ nativeSibling = findNextRNodeSibling(node, null);\r\n        var /** @type {?} */ renderer = currentView.renderer;\r\n        isProceduralRenderer(renderer) ?\r\n            renderer.insertBefore(/** @type {?} */ ((parent.native)), /** @type {?} */ ((node.native)), nativeSibling) : /** @type {?} */ ((parent.native)).insertBefore(/** @type {?} */ ((node.native)), nativeSibling, false);\r\n    }\r\n}\r\n/**\r\n * Appends a projected node to the DOM, or in the case of a projected container,\r\n * appends the nodes from all of the container's active views to the DOM.\r\n *\r\n * @param {?} node The node to process\r\n * @param {?} currentParent The last parent element to be processed\r\n * @param {?} currentView Current LView\r\n * @return {?}\r\n */\r\nfunction appendProjectedNode(node, currentParent, currentView) {\r\n    if (node.type !== 0 /* Container */) {\r\n        appendChild(currentParent, (/** @type {?} */ (node)).native, currentView);\r\n    }\r\n    else if (canInsertNativeNode(currentParent, currentView)) {\r\n        // The node we are adding is a Container and we are adding it to Element which\r\n        // is not a component (no more re-projection).\r\n        // Alternatively a container is projected at the root of a component's template\r\n        // and can't be re-projected (as not content of any component).\r\n        // Assignee the final projection location in those cases.\r\n        var /** @type {?} */ lContainer = (/** @type {?} */ (node)).data;\r\n        lContainer.renderParent = /** @type {?} */ (currentParent);\r\n        var /** @type {?} */ views = lContainer.views;\r\n        for (var /** @type {?} */ i = 0; i < views.length; i++) {\r\n            addRemoveViewFromContainer(/** @type {?} */ (node), views[i], true, null);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} nodeClassAttrVal\r\n * @param {?} cssClassToMatch\r\n * @return {?}\r\n */\r\nfunction isCssClassMatching(nodeClassAttrVal, cssClassToMatch) {\r\n    var /** @type {?} */ nodeClassesLen = nodeClassAttrVal.length;\r\n    var /** @type {?} */ matchIndex = /** @type {?} */ ((nodeClassAttrVal)).indexOf(cssClassToMatch);\r\n    var /** @type {?} */ matchEndIdx = matchIndex + cssClassToMatch.length;\r\n    if (matchIndex === -1 // no match\r\n        || (matchIndex > 0 && /** @type {?} */ ((nodeClassAttrVal))[matchIndex - 1] !== ' ') // no space before\r\n        ||\r\n            (matchEndIdx < nodeClassesLen && /** @type {?} */ ((nodeClassAttrVal))[matchEndIdx] !== ' ')) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * A utility function to match an Ivy node static data against a simple CSS selector\r\n *\r\n * @param {?} tNode\r\n * @param {?} selector\r\n * @return {?} true if node matches the selector.\r\n */\r\nfunction isNodeMatchingSimpleSelector(tNode, selector) {\r\n    var /** @type {?} */ noOfSelectorParts = selector.length;\r\n    ngDevMode && assertNotNull(selector[0], 'the selector should have a tag name');\r\n    var /** @type {?} */ tagNameInSelector = selector[0];\r\n    // check tag tame\r\n    if (tagNameInSelector !== '' && tagNameInSelector !== tNode.tagName) {\r\n        return false;\r\n    }\r\n    // short-circuit case where we are only matching on element's tag name\r\n    if (noOfSelectorParts === 1) {\r\n        return true;\r\n    }\r\n    // short-circuit case where an element has no attrs but a selector tries to match some\r\n    if (noOfSelectorParts > 1 && !tNode.attrs) {\r\n        return false;\r\n    }\r\n    var /** @type {?} */ attrsInNode = /** @type {?} */ ((tNode.attrs));\r\n    for (var /** @type {?} */ i = 1; i < noOfSelectorParts; i += 2) {\r\n        var /** @type {?} */ attrNameInSelector = selector[i];\r\n        var /** @type {?} */ attrIdxInNode = attrsInNode.indexOf(attrNameInSelector);\r\n        if (attrIdxInNode % 2 !== 0) {\r\n            // attribute names are stored at even indexes\r\n            return false;\r\n        }\r\n        else {\r\n            var /** @type {?} */ attrValInSelector = selector[i + 1];\r\n            if (attrValInSelector !== '') {\r\n                // selector should also match on an attribute value\r\n                var /** @type {?} */ attrValInNode = attrsInNode[attrIdxInNode + 1];\r\n                if (attrNameInSelector === 'class') {\r\n                    // iterate over all the remaining items in the selector selector array = class names\r\n                    for (i++; i < noOfSelectorParts; i++) {\r\n                        if (!isCssClassMatching(attrValInNode, selector[i])) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                else if (attrValInSelector !== attrValInNode) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @param {?} tNode\r\n * @param {?} selector\r\n * @return {?}\r\n */\r\nfunction isNodeMatchingSelectorWithNegations(tNode, selector) {\r\n    var /** @type {?} */ positiveSelector = selector[0];\r\n    if (positiveSelector != null && !isNodeMatchingSimpleSelector(tNode, positiveSelector)) {\r\n        return false;\r\n    }\r\n    // do we have any negation parts in this selector?\r\n    var /** @type {?} */ negativeSelectors = selector[1];\r\n    if (negativeSelectors) {\r\n        for (var /** @type {?} */ i = 0; i < negativeSelectors.length; i++) {\r\n            // if one of negative selectors matched than the whole selector doesn't match\r\n            if (isNodeMatchingSimpleSelector(tNode, negativeSelectors[i])) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @param {?} tNode\r\n * @param {?} selector\r\n * @return {?}\r\n */\r\nfunction isNodeMatchingSelector(tNode, selector) {\r\n    for (var /** @type {?} */ i = 0; i < selector.length; i++) {\r\n        if (isNodeMatchingSelectorWithNegations(tNode, selector[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @param {?} tNode\r\n * @return {?}\r\n */\r\nfunction getProjectAsAttrValue(tNode) {\r\n    var /** @type {?} */ nodeAttrs = tNode.attrs;\r\n    if (nodeAttrs != null) {\r\n        var /** @type {?} */ ngProjectAsAttrIdx = nodeAttrs.indexOf(NG_PROJECT_AS_ATTR_NAME);\r\n        // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\r\n        // (attribute names are stored at even indexes)\r\n        if ((ngProjectAsAttrIdx & 1) === 0) {\r\n            return nodeAttrs[ngProjectAsAttrIdx + 1];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Checks a given node against matching selectors and returns\r\n * selector index (or 0 if none matched).\r\n *\r\n * This function takes into account the ngProjectAs attribute: if present its value will be compared\r\n * to the raw (un-parsed) CSS selector instead of using standard selector matching logic.\r\n * @param {?} tNode\r\n * @param {?} selectors\r\n * @param {?} textSelectors\r\n * @return {?}\r\n */\r\nfunction matchingSelectorIndex(tNode, selectors, textSelectors) {\r\n    var /** @type {?} */ ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\r\n    for (var /** @type {?} */ i = 0; i < selectors.length; i++) {\r\n        // if a node has the ngProjectAs attribute match it against unparsed selector\r\n        // match a node against a parsed selector only if ngProjectAs attribute is not present\r\n        if (ngProjectAsAttrVal === textSelectors[i] ||\r\n            ngProjectAsAttrVal === null && isNodeMatchingSelector(tNode, selectors[i])) {\r\n            return i + 1; // first matching selector \"captures\" a given node\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Must use this method for CD (instead of === ) since NaN !== NaN\r\n * @param {?} a\r\n * @param {?} b\r\n * @return {?}\r\n */\r\nfunction isDifferent(a, b) {\r\n    // NaN is the only value that is not equal to itself so the first\r\n    // test checks if both a and b are not NaN\r\n    return !(a !== a && b !== b) && a !== b;\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction stringify$1(value) {\r\n    if (typeof value == 'function')\r\n        return value.name || value;\r\n    if (typeof value == 'string')\r\n        return value;\r\n    if (value == null)\r\n        return '';\r\n    return '' + value;\r\n}\r\n/**\r\n *  Function that throws a \"not implemented\" error so it's clear certain\r\n *  behaviors/methods aren't yet ready.\r\n *\r\n * @return {?} Not implemented error\r\n */\r\nfunction notImplemented() {\r\n    return new Error('NotImplemented');\r\n}\r\n/**\r\n * Flattens an array in non-recursive way. Input arrays are not modified.\r\n * @param {?} list\r\n * @return {?}\r\n */\r\nfunction flatten$1(list) {\r\n    var /** @type {?} */ result = [];\r\n    var /** @type {?} */ i = 0;\r\n    while (i < list.length) {\r\n        var /** @type {?} */ item = list[i];\r\n        if (Array.isArray(item)) {\r\n            if (item.length > 0) {\r\n                list = item.concat(list.slice(i + 1));\r\n                i = 0;\r\n            }\r\n            else {\r\n                i++;\r\n            }\r\n        }\r\n        else {\r\n            result.push(item);\r\n            i++;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Directive (D) sets a property on all component instances using this constant as a key and the\r\n * component's host node (LElement) as the value. This is used in methods like detectChanges to\r\n * facilitate jumping from an instance to the host node.\r\n */\r\nvar NG_HOST_SYMBOL = '__ngHostLNode__';\r\n/**\r\n * A permanent marker promise which signifies that the current CD tree is\r\n * clean.\r\n */\r\nvar _CLEAN_PROMISE = Promise.resolve(null);\r\n/**\r\n * Directive and element indices for top-level directive.\r\n *\r\n * Saved here to avoid re-instantiating an array on every change detection run.\r\n */\r\nvar _ROOT_DIRECTIVE_INDICES = [0, 0];\r\n/**\r\n * This property gets set before entering a template.\r\n *\r\n * This renderer can be one of two varieties of Renderer3:\r\n *\r\n * - ObjectedOrientedRenderer3\r\n *\r\n * This is the native browser API style, e.g. operations are methods on individual objects\r\n * like HTMLElement. With this style, no additional code is needed as a facade (reducing payload\r\n * size).\r\n *\r\n * - ProceduralRenderer3\r\n *\r\n * In non-native browser environments (e.g. platforms such as web-workers), this is the facade\r\n * that enables element manipulation. This also facilitates backwards compatibility with\r\n * Renderer2.\r\n */\r\nvar renderer;\r\nvar rendererFactory;\r\n/**\r\n * @return {?}\r\n */\r\nfunction getRenderer() {\r\n    // top level variables should not be exported for performance reason (PERF_NOTES.md)\r\n    return renderer;\r\n}\r\n/**\r\n * Used to set the parent property when nodes are created.\r\n */\r\nvar previousOrParentNode;\r\n/**\r\n * @return {?}\r\n */\r\nfunction getPreviousOrParentNode() {\r\n    // top level variables should not be exported for performance reason (PERF_NOTES.md)\r\n    return previousOrParentNode;\r\n}\r\n/**\r\n * If `isParent` is:\r\n *  - `true`: then `previousOrParentNode` points to a parent node.\r\n *  - `false`: then `previousOrParentNode` points to previous node (sibling).\r\n */\r\nvar isParent;\r\n/**\r\n * Static data that corresponds to the instance-specific data array on an LView.\r\n *\r\n * Each node's static data is stored in tData at the same index that it's stored\r\n * in the data array. Any nodes that do not have static data store a null value in\r\n * tData to avoid a sparse array.\r\n */\r\nvar tData;\r\n/**\r\n * State of the current view being processed.\r\n *\r\n * NOTE: we cheat here and initialize it to `null` even thought the type does not\r\n * contain `null`. This is because we expect this value to be not `null` as soon\r\n * as we enter the view. Declaring the type as `null` would require us to place `!`\r\n * in most instructions since they all assume that `currentView` is defined.\r\n */\r\nvar currentView = /** @type {?} */ ((null));\r\nvar currentQueries;\r\n/**\r\n * @param {?} QueryType\r\n * @return {?}\r\n */\r\nfunction getCurrentQueries(QueryType) {\r\n    // top level variables should not be exported for performance reason (PERF_NOTES.md)\r\n    return currentQueries || (currentQueries = new QueryType());\r\n}\r\n/**\r\n * This property gets set before entering a template.\r\n */\r\nvar creationMode;\r\n/**\r\n * @return {?}\r\n */\r\nfunction getCreationMode() {\r\n    // top level variables should not be exported for performance reason (PERF_NOTES.md)\r\n    return creationMode;\r\n}\r\n/**\r\n * An array of nodes (text, element, container, etc), pipes, their bindings, and\r\n * any local variables that need to be stored between invocations.\r\n */\r\nvar data;\r\n/**\r\n * An array of directive instances in the current view.\r\n *\r\n * These must be stored separately from LNodes because their presence is\r\n * unknown at compile-time and thus space cannot be reserved in data[].\r\n */\r\nvar directives;\r\n/**\r\n * Points to the next binding index to read or write to.\r\n */\r\nvar bindingIndex;\r\n/**\r\n * When a view is destroyed, listeners need to be released and outputs need to be\r\n * unsubscribed. This cleanup array stores both listener data (in chunks of 4)\r\n * and output data (in chunks of 2) for a particular view. Combining the arrays\r\n * saves on memory (70 bytes per array) and on a few bytes of code size (for two\r\n * separate for loops).\r\n *\r\n * If it's a listener being stored:\r\n * 1st index is: event name to remove\r\n * 2nd index is: native element\r\n * 3rd index is: listener function\r\n * 4th index is: useCapture boolean\r\n *\r\n * If it's an output subscription:\r\n * 1st index is: unsubscribe function\r\n * 2nd index is: context for function\r\n */\r\nvar cleanup;\r\n/**\r\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\r\n *\r\n * Necessary to support ChangeDetectorRef.checkNoChanges().\r\n */\r\nvar checkNoChangesMode = false;\r\n/**\r\n * Whether or not this is the first time the current view has been processed.\r\n */\r\nvar firstTemplatePass = true;\r\n/**\r\n * Swap the current state with a new state.\r\n *\r\n * For performance reasons we store the state in the top level of the module.\r\n * This way we minimize the number of properties to read. Whenever a new view\r\n * is entered we have to store the state for later, and when the view is\r\n * exited the state has to be restored\r\n *\r\n * @param {?} newView New state to become active\r\n * @param {?} host Element to which the View is a child of\r\n * @return {?} the previous state;\r\n */\r\nfunction enterView(newView, host) {\r\n    var /** @type {?} */ oldView = currentView;\r\n    data = newView && newView.data;\r\n    directives = newView && newView.directives;\r\n    bindingIndex = newView && newView.bindingStartIndex || 0;\r\n    tData = newView && newView.tView.data;\r\n    creationMode = newView && (newView.flags & 1 /* CreationMode */) === 1 /* CreationMode */;\r\n    firstTemplatePass = newView && newView.tView.firstTemplatePass;\r\n    cleanup = newView && newView.cleanup;\r\n    renderer = newView && newView.renderer;\r\n    if (host != null) {\r\n        previousOrParentNode = host;\r\n        isParent = true;\r\n    }\r\n    currentView = newView;\r\n    currentQueries = newView && newView.queries;\r\n    return /** @type {?} */ ((oldView));\r\n}\r\n/**\r\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\r\n * the direction of traversal (up or down the view tree) a bit clearer.\r\n * @param {?} newView\r\n * @return {?}\r\n */\r\nfunction leaveView(newView) {\r\n    if (!checkNoChangesMode) {\r\n        executeHooks(/** @type {?} */ ((directives)), currentView.tView.viewHooks, currentView.tView.viewCheckHooks, creationMode);\r\n    }\r\n    // Views should be clean and in update mode after being checked, so these bits are cleared\r\n    currentView.flags &= ~(1 /* CreationMode */ | 4 /* Dirty */);\r\n    currentView.lifecycleStage = 1 /* INIT */;\r\n    enterView(newView, null);\r\n}\r\n/**\r\n * Refreshes directives in this view and triggers any init/content hooks.\r\n * @return {?}\r\n */\r\nfunction refreshDirectives() {\r\n    executeInitAndContentHooks();\r\n    var /** @type {?} */ tView = currentView.tView;\r\n    // This needs to be set before children are processed to support recursive components\r\n    tView.firstTemplatePass = firstTemplatePass = false;\r\n    setHostBindings(tView.hostBindings);\r\n    refreshChildComponents(tView.components);\r\n}\r\n/**\r\n * Sets the host bindings for the current view.\r\n * @param {?} bindings\r\n * @return {?}\r\n */\r\nfunction setHostBindings(bindings) {\r\n    if (bindings != null) {\r\n        var /** @type {?} */ defs = /** @type {?} */ ((currentView.tView.directives));\r\n        for (var /** @type {?} */ i = 0; i < bindings.length; i += 2) {\r\n            var /** @type {?} */ dirIndex = bindings[i];\r\n            var /** @type {?} */ def = /** @type {?} */ (defs[dirIndex]);\r\n            def.hostBindings && def.hostBindings(dirIndex, bindings[i | 1]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Refreshes child components in the current view.\r\n * @param {?} components\r\n * @return {?}\r\n */\r\nfunction refreshChildComponents(components) {\r\n    if (components != null) {\r\n        for (var /** @type {?} */ i = 0; i < components.length; i += 2) {\r\n            componentRefresh(components[i], components[i | 1]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction executeInitAndContentHooks() {\r\n    if (!checkNoChangesMode) {\r\n        var /** @type {?} */ tView = currentView.tView;\r\n        executeInitHooks(currentView, tView, creationMode);\r\n        executeHooks(/** @type {?} */ ((directives)), tView.contentHooks, tView.contentCheckHooks, creationMode);\r\n    }\r\n}\r\n/**\r\n * @param {?} viewId\r\n * @param {?} renderer\r\n * @param {?} tView\r\n * @param {?} template\r\n * @param {?} context\r\n * @param {?} flags\r\n * @return {?}\r\n */\r\nfunction createLView(viewId, renderer, tView, template, context, flags) {\r\n    var /** @type {?} */ newView = {\r\n        parent: currentView,\r\n        id: viewId,\r\n        // -1 for component views\r\n        flags: flags | 1 /* CreationMode */ | 8 /* Attached */,\r\n        node: /** @type {?} */ ((null)),\r\n        // until we initialize it in createNode.\r\n        data: [],\r\n        directives: null,\r\n        tView: tView,\r\n        cleanup: null,\r\n        renderer: renderer,\r\n        child: null,\r\n        tail: null,\r\n        next: null,\r\n        bindingStartIndex: null,\r\n        template: template,\r\n        context: context,\r\n        dynamicViewCount: 0,\r\n        lifecycleStage: 1 /* INIT */,\r\n        queries: null,\r\n    };\r\n    return newView;\r\n}\r\n/**\r\n * @param {?} index\r\n * @param {?} type\r\n * @param {?} native\r\n * @param {?=} state\r\n * @return {?}\r\n */\r\nfunction createLNode(index, type, native, state) {\r\n    var /** @type {?} */ parent = isParent ? previousOrParentNode :\r\n        previousOrParentNode && /** @type {?} */ (previousOrParentNode.parent);\r\n    var /** @type {?} */ queries = (isParent ? currentQueries : previousOrParentNode && previousOrParentNode.queries) ||\r\n        parent && parent.queries && parent.queries.child();\r\n    var /** @type {?} */ isState = state != null;\r\n    var /** @type {?} */ node = {\r\n        type: type,\r\n        native: /** @type {?} */ (native),\r\n        view: currentView,\r\n        parent: /** @type {?} */ (parent),\r\n        child: null,\r\n        next: null,\r\n        nodeInjector: parent ? parent.nodeInjector : null,\r\n        data: isState ? /** @type {?} */ (state) : null,\r\n        queries: queries,\r\n        tNode: null,\r\n        pNextOrParent: null\r\n    };\r\n    if ((type & 2 /* ViewOrElement */) === 2 /* ViewOrElement */ && isState) {\r\n        // Bit of a hack to bust through the readonly because there is a circular dep between\r\n        // LView and LNode.\r\n        ngDevMode && assertNull((/** @type {?} */ (state)).node, 'LView.node should not have been initialized');\r\n        (/** @type {?} */ ((state))).node = node;\r\n    }\r\n    if (index != null) {\r\n        // We are Element or Container\r\n        ngDevMode && assertDataNext(index);\r\n        data[index] = node;\r\n        // Every node adds a value to the static data array to avoid a sparse array\r\n        if (index >= tData.length) {\r\n            tData[index] = null;\r\n        }\r\n        else {\r\n            node.tNode = /** @type {?} */ (tData[index]);\r\n        }\r\n        // Now link ourselves into the tree.\r\n        if (isParent) {\r\n            currentQueries = null;\r\n            if (previousOrParentNode.view === currentView ||\r\n                previousOrParentNode.type === 2 /* View */) {\r\n                // We are in the same view, which means we are adding content node to the parent View.\r\n                ngDevMode && assertNull(previousOrParentNode.child, \"previousOrParentNode's child should not have been set.\");\r\n                previousOrParentNode.child = node;\r\n            }\r\n            else {\r\n                // We are adding component view, so we don't link parent node child to this node.\r\n            }\r\n        }\r\n        else if (previousOrParentNode) {\r\n            ngDevMode && assertNull(previousOrParentNode.next, \"previousOrParentNode's next property should not have been set.\");\r\n            previousOrParentNode.next = node;\r\n        }\r\n    }\r\n    previousOrParentNode = node;\r\n    isParent = true;\r\n    return node;\r\n}\r\n/**\r\n * Resets the application state.\r\n * @return {?}\r\n */\r\nfunction resetApplicationState() {\r\n    isParent = false;\r\n    previousOrParentNode = /** @type {?} */ ((null));\r\n}\r\n/**\r\n *\r\n * @template T\r\n * @param {?} hostNode Existing node to render into.\r\n * @param {?} template Template function with the instructions.\r\n * @param {?} context to pass into the template.\r\n * @param {?} providedRendererFactory renderer factory to use\r\n * @param {?} host The host element node to use\r\n * @param {?=} directives\r\n * @param {?=} pipes\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * @template T\r\n * @param {?} viewNode\r\n * @param {?} template\r\n * @param {?} context\r\n * @param {?} renderer\r\n * @return {?}\r\n */\r\nfunction renderEmbeddedTemplate(viewNode, template, context, renderer) {\r\n    var /** @type {?} */ _isParent = isParent;\r\n    var /** @type {?} */ _previousOrParentNode = previousOrParentNode;\r\n    try {\r\n        isParent = true;\r\n        previousOrParentNode = /** @type {?} */ ((null));\r\n        var /** @type {?} */ cm = false;\r\n        if (viewNode == null) {\r\n            // TODO: revisit setting currentView when re-writing view containers\r\n            var /** @type {?} */ directives_1 = currentView && currentView.tView.directiveRegistry;\r\n            var /** @type {?} */ pipes = currentView && currentView.tView.pipeRegistry;\r\n            var /** @type {?} */ view = createLView(-1, renderer, createTView(directives_1, pipes), template, context, 2 /* CheckAlways */);\r\n            viewNode = createLNode(null, 2 /* View */, null, view);\r\n            cm = true;\r\n        }\r\n        enterView(viewNode.data, viewNode);\r\n        template(context, cm);\r\n        refreshDynamicChildren();\r\n        refreshDirectives();\r\n    }\r\n    finally {\r\n        leaveView(currentView && /** @type {?} */ ((/** @type {?} */ ((currentView)).parent)));\r\n        isParent = _isParent;\r\n        previousOrParentNode = _previousOrParentNode;\r\n    }\r\n    return viewNode;\r\n}\r\n/**\r\n * @template T\r\n * @param {?} node\r\n * @param {?} hostView\r\n * @param {?} componentOrContext\r\n * @param {?=} template\r\n * @return {?}\r\n */\r\nfunction renderComponentOrTemplate(node, hostView, componentOrContext, template) {\r\n    var /** @type {?} */ oldView = enterView(hostView, node);\r\n    try {\r\n        if (rendererFactory.begin) {\r\n            rendererFactory.begin();\r\n        }\r\n        if (template) {\r\n            template(/** @type {?} */ ((componentOrContext)), creationMode);\r\n            refreshDirectives();\r\n        }\r\n        else {\r\n            executeInitAndContentHooks();\r\n            // Element was stored at 0 in data and directive was stored at 0 in directives\r\n            // in renderComponent()\r\n            setHostBindings(_ROOT_DIRECTIVE_INDICES);\r\n            componentRefresh(0, 0);\r\n        }\r\n    }\r\n    finally {\r\n        if (rendererFactory.end) {\r\n            rendererFactory.end();\r\n        }\r\n        leaveView(oldView);\r\n    }\r\n}\r\n/**\r\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\r\n *\r\n * @param {?} index Index of the element in the data array\r\n * @param {?} name Name of the DOM Node\r\n * @param {?=} attrs Statically bound set of attributes to be written into the DOM element on creation.\r\n * @param {?=} localRefs A set of local reference bindings on the element.\r\n *\r\n * Attributes and localRefs are passed as an array of strings where elements with an even index\r\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\r\n * ['id', 'warning5', 'class', 'alert']\r\n * @return {?}\r\n */\r\nfunction elementStart(index, name, attrs, localRefs) {\r\n    var /** @type {?} */ node;\r\n    var /** @type {?} */ native;\r\n    ngDevMode &&\r\n        assertNull(currentView.bindingStartIndex, 'elements should be created before any bindings');\r\n    native = renderer.createElement(name);\r\n    node = createLNode(index, 3 /* Element */, /** @type {?} */ ((native)), null);\r\n    if (attrs)\r\n        setUpAttributes(native, attrs);\r\n    appendChild(/** @type {?} */ ((node.parent)), native, currentView);\r\n    if (firstTemplatePass) {\r\n        var /** @type {?} */ tNode = createTNode(name, attrs || null, null);\r\n        cacheMatchingDirectivesForNode(tNode);\r\n        ngDevMode && assertDataInRange(index - 1);\r\n        node.tNode = tData[index] = tNode;\r\n    }\r\n    hack_declareDirectives(index, localRefs || null);\r\n    return native;\r\n}\r\n/**\r\n * @param {?} tNode\r\n * @return {?}\r\n */\r\nfunction cacheMatchingDirectivesForNode(tNode) {\r\n    var /** @type {?} */ registry = currentView.tView.directiveRegistry;\r\n    var /** @type {?} */ startIndex = directives ? directives.length : 0;\r\n    if (registry) {\r\n        var /** @type {?} */ componentFlag = 0;\r\n        var /** @type {?} */ size = 0;\r\n        for (var /** @type {?} */ i = 0; i < registry.length; i++) {\r\n            var /** @type {?} */ def = registry[i];\r\n            if (isNodeMatchingSelector(tNode, /** @type {?} */ ((def.selector)))) {\r\n                if ((/** @type {?} */ (def)).template) {\r\n                    if (componentFlag)\r\n                        throwMultipleComponentError(tNode);\r\n                    componentFlag |= 1 /* Component */;\r\n                }\r\n                (currentView.tView.directives || (currentView.tView.directives = [])).push(def);\r\n                size++;\r\n            }\r\n        }\r\n        if (size > 0)\r\n            buildTNodeFlags(tNode, startIndex, size, componentFlag);\r\n    }\r\n}\r\n/**\r\n * @param {?} tNode\r\n * @param {?} index\r\n * @param {?} size\r\n * @param {?} component\r\n * @return {?}\r\n */\r\nfunction buildTNodeFlags(tNode, index, size, component) {\r\n    tNode.flags = (index << 13 /* INDX_SHIFT */) | (size << 1 /* SIZE_SHIFT */) | component;\r\n}\r\n/**\r\n * @param {?} tNode\r\n * @return {?}\r\n */\r\nfunction throwMultipleComponentError(tNode) {\r\n    throw new Error(\"Multiple components match node with tagname \" + tNode.tagName);\r\n}\r\n/**\r\n * Stores index of component's host element so it will be queued for view refresh during CD.\r\n * @param {?} dirIndex\r\n * @param {?} elIndex\r\n * @return {?}\r\n */\r\nfunction queueComponentIndexForCheck(dirIndex, elIndex) {\r\n    if (firstTemplatePass) {\r\n        (currentView.tView.components || (currentView.tView.components = [])).push(dirIndex, elIndex);\r\n    }\r\n}\r\n/**\r\n * Stores index of directive and host element so it will be queued for binding refresh during CD.\r\n * @param {?} dirIndex\r\n * @param {?} elIndex\r\n * @return {?}\r\n */\r\nfunction queueHostBindingForCheck(dirIndex, elIndex) {\r\n    ngDevMode &&\r\n        assertEqual(firstTemplatePass, true, 'Should only be called in first template pass.');\r\n    (currentView.tView.hostBindings || (currentView.tView.hostBindings = [])).push(dirIndex, elIndex);\r\n}\r\n/**\r\n * Sets the context for a ChangeDetectorRef to the given instance.\r\n * @param {?} injector\r\n * @param {?} instance\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction initChangeDetectorIfExisting(injector, instance, view) {\r\n    if (injector && injector.changeDetectorRef != null) {\r\n        (/** @type {?} */ (injector.changeDetectorRef))._setComponentContext(view, instance);\r\n    }\r\n}\r\n/**\r\n * @param {?} tNode\r\n * @return {?}\r\n */\r\nfunction isComponent(tNode) {\r\n    return (tNode.flags & 1 /* Component */) === 1 /* Component */;\r\n}\r\n/**\r\n * This function instantiates the given directives. It is a hack since it assumes the directives\r\n * come in the correct order for DI.\r\n * @param {?} elementIndex\r\n * @param {?} localRefs\r\n * @return {?}\r\n */\r\nfunction hack_declareDirectives(elementIndex, localRefs) {\r\n    var /** @type {?} */ tNode = /** @type {?} */ ((previousOrParentNode.tNode));\r\n    var /** @type {?} */ size = (tNode.flags & 8190 /* SIZE_MASK */) >> 1;\r\n    var /** @type {?} */ exportsMap = firstTemplatePass && localRefs ? { '': -1 } : null;\r\n    if (size > 0) {\r\n        var /** @type {?} */ startIndex = tNode.flags >> 13;\r\n        var /** @type {?} */ endIndex = startIndex + size;\r\n        var /** @type {?} */ tDirectives = /** @type {?} */ ((currentView.tView.directives));\r\n        // TODO(mhevery): This assumes that the directives come in correct order, which\r\n        // is not guaranteed. Must be refactored to take it into account.\r\n        for (var /** @type {?} */ i = startIndex; i < endIndex; i++) {\r\n            var /** @type {?} */ def = /** @type {?} */ (tDirectives[i]);\r\n            directiveCreate(elementIndex, def.factory(), def);\r\n            saveNameToExportMap(startIndex, def, exportsMap);\r\n            startIndex++;\r\n        }\r\n    }\r\n    if (firstTemplatePass)\r\n        cacheMatchingLocalNames(tNode, localRefs, /** @type {?} */ ((exportsMap)));\r\n    saveResolvedLocalsInData();\r\n}\r\n/**\r\n * Caches local names and their matching directive indices for query and template lookups.\r\n * @param {?} tNode\r\n * @param {?} localRefs\r\n * @param {?} exportsMap\r\n * @return {?}\r\n */\r\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\r\n    if (localRefs) {\r\n        var /** @type {?} */ localNames = tNode.localNames = [];\r\n        // Local names must be stored in tNode in the same order that localRefs are defined\r\n        // in the template to ensure the data is loaded in the same slots as their refs\r\n        // in the template (for template queries).\r\n        for (var /** @type {?} */ i = 0; i < localRefs.length; i += 2) {\r\n            var /** @type {?} */ index = exportsMap[localRefs[i | 1]];\r\n            if (index == null)\r\n                throw new Error(\"Export of name '\" + localRefs[i | 1] + \"' not found!\");\r\n            localNames.push(localRefs[i], index);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Builds up an export map as directives are created, so local refs can be quickly mapped\r\n * to their directive instances.\r\n * @param {?} index\r\n * @param {?} def\r\n * @param {?} exportsMap\r\n * @return {?}\r\n */\r\nfunction saveNameToExportMap(index, def, exportsMap) {\r\n    if (exportsMap) {\r\n        if (def.exportAs)\r\n            exportsMap[def.exportAs] = index;\r\n        if ((/** @type {?} */ (def)).template)\r\n            exportsMap[''] = index;\r\n    }\r\n}\r\n/**\r\n * Takes a list of local names and indices and pushes the resolved local variable values\r\n * to data[] in the same order as they are loaded in the template with load().\r\n * @return {?}\r\n */\r\nfunction saveResolvedLocalsInData() {\r\n    var /** @type {?} */ localNames = /** @type {?} */ ((previousOrParentNode.tNode)).localNames;\r\n    if (localNames) {\r\n        for (var /** @type {?} */ i = 0; i < localNames.length; i += 2) {\r\n            var /** @type {?} */ index = /** @type {?} */ (localNames[i | 1]);\r\n            var /** @type {?} */ value = index === -1 ? previousOrParentNode.native : /** @type {?} */ ((directives))[index];\r\n            data.push(value);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Gets TView from a template function or creates a new TView\r\n * if it doesn't already exist.\r\n *\r\n * @param {?} template The template from which to get static data\r\n * @param {?} directives Directive defs that should be saved on TView\r\n * @param {?} pipes Pipe defs that should be saved on TView\r\n * @return {?} TView\r\n */\r\nfunction getOrCreateTView(template, directives, pipes) {\r\n    return template.ngPrivateData ||\r\n        (template.ngPrivateData = /** @type {?} */ (createTView(directives, pipes)));\r\n}\r\n/**\r\n * Creates a TView instance\r\n * @param {?} defs\r\n * @param {?} pipes\r\n * @return {?}\r\n */\r\nfunction createTView(defs, pipes) {\r\n    return {\r\n        data: [],\r\n        directives: null,\r\n        firstTemplatePass: true,\r\n        initHooks: null,\r\n        checkHooks: null,\r\n        contentHooks: null,\r\n        contentCheckHooks: null,\r\n        viewHooks: null,\r\n        viewCheckHooks: null,\r\n        destroyHooks: null,\r\n        pipeDestroyHooks: null,\r\n        hostBindings: null,\r\n        components: null,\r\n        directiveRegistry: typeof defs === 'function' ? defs() : defs,\r\n        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes\r\n    };\r\n}\r\n/**\r\n * @param {?} native\r\n * @param {?} attrs\r\n * @return {?}\r\n */\r\nfunction setUpAttributes(native, attrs) {\r\n    ngDevMode && assertEqual(attrs.length % 2, 0, 'each attribute should have a key and a value');\r\n    var /** @type {?} */ isProc = isProceduralRenderer(renderer);\r\n    for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {\r\n        var /** @type {?} */ attrName = attrs[i];\r\n        if (attrName !== NG_PROJECT_AS_ATTR_NAME) {\r\n            var /** @type {?} */ attrVal = attrs[i + 1];\r\n            isProc ? (/** @type {?} */ (renderer)).setAttribute(native, attrName, attrVal) :\r\n                native.setAttribute(attrName, attrVal);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} text\r\n * @param {?} token\r\n * @return {?}\r\n */\r\nfunction createError(text, token) {\r\n    return new Error(\"Renderer: \" + text + \" [\" + stringify$1(token) + \"]\");\r\n}\r\n/**\r\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\r\n *\r\n * @param {?} factory\r\n * @param {?} elementOrSelector Render element or CSS selector to locate the element.\r\n * @return {?}\r\n */\r\nfunction locateHostElement(factory, elementOrSelector) {\r\n    ngDevMode && assertDataInRange(-1);\r\n    rendererFactory = factory;\r\n    var /** @type {?} */ defaultRenderer = factory.createRenderer(null, null);\r\n    var /** @type {?} */ rNode = typeof elementOrSelector === 'string' ?\r\n        (isProceduralRenderer(defaultRenderer) ?\r\n            defaultRenderer.selectRootElement(elementOrSelector) :\r\n            defaultRenderer.querySelector(elementOrSelector)) :\r\n        elementOrSelector;\r\n    if (ngDevMode && !rNode) {\r\n        if (typeof elementOrSelector === 'string') {\r\n            throw createError('Host node with selector not found:', elementOrSelector);\r\n        }\r\n        else {\r\n            throw createError('Host node is required:', elementOrSelector);\r\n        }\r\n    }\r\n    return rNode;\r\n}\r\n/**\r\n * Creates the host LNode.\r\n *\r\n * @param {?} tag\r\n * @param {?} rNode Render host element.\r\n * @param {?} def ComponentDef\r\n *\r\n * @return {?} LElementNode created\r\n */\r\nfunction hostElement(tag, rNode, def) {\r\n    resetApplicationState();\r\n    var /** @type {?} */ node = createLNode(0, 3 /* Element */, rNode, createLView(-1, renderer, getOrCreateTView(def.template, def.directiveDefs, def.pipeDefs), null, null, def.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */));\r\n    if (firstTemplatePass) {\r\n        node.tNode = createTNode(/** @type {?} */ (tag), null, null);\r\n        // Root directive is stored at index 0, size 1\r\n        buildTNodeFlags(node.tNode, 0, 1, 1 /* Component */);\r\n        currentView.tView.directives = [def];\r\n    }\r\n    return node;\r\n}\r\n/**\r\n * Adds an event listener to the current node.\r\n *\r\n * If an output exists on one of the node's directives, it also subscribes to the output\r\n * and saves the subscription for later cleanup.\r\n *\r\n * @param {?} eventName Name of the event\r\n * @param {?} listenerFn The function to be called when event emits\r\n * @param {?=} useCapture Whether or not to use capture in event listener.\r\n * @return {?}\r\n */\r\nfunction listener(eventName, listenerFn, useCapture) {\r\n    if (useCapture === void 0) { useCapture = false; }\r\n    ngDevMode && assertPreviousIsParent();\r\n    var /** @type {?} */ node = previousOrParentNode;\r\n    var /** @type {?} */ native = /** @type {?} */ (node.native);\r\n    // In order to match current behavior, native DOM event listeners must be added for all\r\n    // events (including outputs).\r\n    var /** @type {?} */ cleanupFns = cleanup || (cleanup = currentView.cleanup = []);\r\n    if (isProceduralRenderer(renderer)) {\r\n        var /** @type {?} */ wrappedListener = wrapListenerWithDirtyLogic(currentView, listenerFn);\r\n        var /** @type {?} */ cleanupFn = renderer.listen(native, eventName, wrappedListener);\r\n        cleanupFns.push(cleanupFn, null);\r\n    }\r\n    else {\r\n        var /** @type {?} */ wrappedListener = wrapListenerWithDirtyAndDefault(currentView, listenerFn);\r\n        native.addEventListener(eventName, wrappedListener, useCapture);\r\n        cleanupFns.push(eventName, native, wrappedListener, useCapture);\r\n    }\r\n    var /** @type {?} */ tNode = /** @type {?} */ ((node.tNode));\r\n    if (tNode.outputs === undefined) {\r\n        // if we create TNode here, inputs must be undefined so we know they still need to be\r\n        // checked\r\n        tNode.outputs = generatePropertyAliases(/** @type {?} */ ((node.tNode)).flags, 1 /* Output */);\r\n    }\r\n    var /** @type {?} */ outputs = tNode.outputs;\r\n    var /** @type {?} */ outputData;\r\n    if (outputs && (outputData = outputs[eventName])) {\r\n        createOutput(outputData, listenerFn);\r\n    }\r\n}\r\n/**\r\n * Iterates through the outputs associated with a particular event name and subscribes to\r\n * each output.\r\n * @param {?} outputs\r\n * @param {?} listener\r\n * @return {?}\r\n */\r\nfunction createOutput(outputs, listener) {\r\n    for (var /** @type {?} */ i = 0; i < outputs.length; i += 2) {\r\n        ngDevMode && assertDataInRange(/** @type {?} */ (outputs[i]), /** @type {?} */ ((directives)));\r\n        var /** @type {?} */ subscription = /** @type {?} */ ((directives))[/** @type {?} */ (outputs[i])][outputs[i | 1]].subscribe(listener); /** @type {?} */\r\n        ((cleanup)).push(subscription.unsubscribe, subscription);\r\n    }\r\n}\r\n/**\r\n * Mark the end of the element.\r\n * @return {?}\r\n */\r\nfunction elementEnd() {\r\n    if (isParent) {\r\n        isParent = false;\r\n    }\r\n    else {\r\n        ngDevMode && assertHasParent();\r\n        previousOrParentNode = /** @type {?} */ ((previousOrParentNode.parent));\r\n    }\r\n    ngDevMode && assertNodeType(previousOrParentNode, 3 /* Element */);\r\n    var /** @type {?} */ queries = previousOrParentNode.queries;\r\n    queries && queries.addNode(previousOrParentNode);\r\n    queueLifecycleHooks(/** @type {?} */ ((previousOrParentNode.tNode)).flags, currentView);\r\n}\r\n/**\r\n * Updates the value of removes an attribute on an Element.\r\n *\r\n * @param {?} index\r\n * @param {?} name name The name of the attribute.\r\n * @param {?} value value The attribute is removed when value is `null` or `undefined`.\r\n *                  Otherwise the attribute value is set to the stringified value.\r\n * @param {?=} sanitizer An optional function used to sanitize the value.\r\n * @return {?}\r\n */\r\nfunction elementAttribute(index, name, value, sanitizer) {\r\n    if (value !== NO_CHANGE) {\r\n        var /** @type {?} */ element = data[index];\r\n        if (value == null) {\r\n            isProceduralRenderer(renderer) ? renderer.removeAttribute(element.native, name) :\r\n                element.native.removeAttribute(name);\r\n        }\r\n        else {\r\n            var /** @type {?} */ strValue = sanitizer == null ? stringify$1(value) : sanitizer(value);\r\n            isProceduralRenderer(renderer) ? renderer.setAttribute(element.native, name, strValue) :\r\n                element.native.setAttribute(name, strValue);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Update a property on an Element.\r\n *\r\n * If the property name also exists as an input property on one of the element's directives,\r\n * the component property will be set instead of the element property. This check must\r\n * be conducted at runtime so child components that add new \\@Inputs don't have to be re-compiled.\r\n *\r\n * @template T\r\n * @param {?} index The index of the element to update in the data array\r\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\r\n *        renaming as part of minification.\r\n * @param {?} value New value to write.\r\n * @param {?=} sanitizer An optional function used to sanitize the value.\r\n * @return {?}\r\n */\r\nfunction elementProperty(index, propName, value, sanitizer) {\r\n    if (value === NO_CHANGE)\r\n        return;\r\n    var /** @type {?} */ node = /** @type {?} */ (data[index]);\r\n    var /** @type {?} */ tNode = /** @type {?} */ ((node.tNode));\r\n    // if tNode.inputs is undefined, a listener has created outputs, but inputs haven't\r\n    // yet been checked\r\n    if (tNode && tNode.inputs === undefined) {\r\n        // mark inputs as checked\r\n        tNode.inputs = generatePropertyAliases(/** @type {?} */ ((node.tNode)).flags, 0 /* Input */);\r\n    }\r\n    var /** @type {?} */ inputData = tNode && tNode.inputs;\r\n    var /** @type {?} */ dataValue;\r\n    if (inputData && (dataValue = inputData[propName])) {\r\n        setInputsForProperty(dataValue, value);\r\n        markDirtyIfOnPush(node);\r\n    }\r\n    else {\r\n        // It is assumed that the sanitizer is only added when the compiler determines that the property\r\n        // is risky, so sanitization can be done without further checks.\r\n        value = sanitizer != null ? (/** @type {?} */ (sanitizer(value))) : value;\r\n        var /** @type {?} */ native = node.native;\r\n        isProceduralRenderer(renderer) ? renderer.setProperty(native, propName, value) :\r\n            (native.setProperty ? native.setProperty(propName, value) :\r\n                (/** @type {?} */ (native))[propName] = value);\r\n    }\r\n}\r\n/**\r\n * Constructs a TNode object from the arguments.\r\n *\r\n * @param {?} tagName\r\n * @param {?} attrs\r\n * @param {?} data\r\n * @return {?} the TNode object\r\n */\r\nfunction createTNode(tagName, attrs, data) {\r\n    return {\r\n        flags: 0,\r\n        tagName: tagName,\r\n        attrs: attrs,\r\n        localNames: null,\r\n        initialInputs: undefined,\r\n        inputs: undefined,\r\n        outputs: undefined,\r\n        data: data\r\n    };\r\n}\r\n/**\r\n * Given a list of directive indices and minified input names, sets the\r\n * input properties on the corresponding directives.\r\n * @param {?} inputs\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction setInputsForProperty(inputs, value) {\r\n    for (var /** @type {?} */ i = 0; i < inputs.length; i += 2) {\r\n        ngDevMode && assertDataInRange(/** @type {?} */ (inputs[i]), /** @type {?} */ ((directives))); /** @type {?} */\r\n        ((directives))[/** @type {?} */ (inputs[i])][inputs[i | 1]] = value;\r\n    }\r\n}\r\n/**\r\n * Consolidates all inputs or outputs of all directives on this logical node.\r\n *\r\n * @param {?} tNodeFlags\r\n * @param {?} direction\r\n * @return {?} PropertyAliases|null aggregate of all properties if any, `null` otherwise\r\n */\r\nfunction generatePropertyAliases(tNodeFlags, direction) {\r\n    var /** @type {?} */ size = (tNodeFlags & 8190 /* SIZE_MASK */) >> 1;\r\n    var /** @type {?} */ propStore = null;\r\n    if (size > 0) {\r\n        var /** @type {?} */ start = tNodeFlags >> 13;\r\n        var /** @type {?} */ isInput = direction === 0;\r\n        var /** @type {?} */ defs = /** @type {?} */ ((currentView.tView.directives));\r\n        for (var /** @type {?} */ i = start, /** @type {?} */ ii = start + size; i < ii; i++) {\r\n            var /** @type {?} */ directiveDef = /** @type {?} */ (defs[i]);\r\n            var /** @type {?} */ propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;\r\n            for (var /** @type {?} */ publicName in propertyAliasMap) {\r\n                if (propertyAliasMap.hasOwnProperty(publicName)) {\r\n                    propStore = propStore || {};\r\n                    var /** @type {?} */ internalName = propertyAliasMap[publicName];\r\n                    var /** @type {?} */ hasProperty = propStore.hasOwnProperty(publicName);\r\n                    hasProperty ? propStore[publicName].push(i, internalName) :\r\n                        (propStore[publicName] = [i, internalName]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return propStore;\r\n}\r\n/**\r\n * Add or remove a class in a `classList` on a DOM element.\r\n *\r\n * This instruction is meant to handle the [class.foo]=\"exp\" case\r\n *\r\n * @template T\r\n * @param {?} index The index of the element to update in the data array\r\n * @param {?} className Name of class to toggle. Because it is going to DOM, this is not subject to\r\n *        renaming as part of minification.\r\n * @param {?} value A value indicating if a given class should be added or removed.\r\n * @return {?}\r\n */\r\nfunction elementClassNamed(index, className, value) {\r\n    if (value !== NO_CHANGE) {\r\n        var /** @type {?} */ lElement = /** @type {?} */ (data[index]);\r\n        if (value) {\r\n            isProceduralRenderer(renderer) ? renderer.addClass(lElement.native, className) :\r\n                lElement.native.classList.add(className);\r\n        }\r\n        else {\r\n            isProceduralRenderer(renderer) ? renderer.removeClass(lElement.native, className) :\r\n                lElement.native.classList.remove(className);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Set the `className` property on a DOM element.\r\n *\r\n * This instruction is meant to handle the `[class]=\"exp\"` usage.\r\n *\r\n * `elementClass` instruction writes the value to the \"element's\" `className` property.\r\n *\r\n * @template T\r\n * @param {?} index The index of the element to update in the data array\r\n * @param {?} value A value indicating a set of classes which should be applied. The method overrides\r\n *   any existing classes. The value is stringified (`toString`) before it is applied to the\r\n *   element.\r\n * @return {?}\r\n */\r\nfunction elementClass(index, value) {\r\n    if (value !== NO_CHANGE) {\r\n        // TODO: This is a naive implementation which simply writes value to the `className`. In the\r\n        // future\r\n        // we will add logic here which would work with the animation code.\r\n        var /** @type {?} */ lElement = data[index];\r\n        isProceduralRenderer(renderer) ? renderer.setProperty(lElement.native, 'className', value) :\r\n            lElement.native['className'] = stringify$1(value);\r\n    }\r\n}\r\n/**\r\n * @template T\r\n * @param {?} index\r\n * @param {?} styleName\r\n * @param {?} value\r\n * @param {?=} suffixOrSanitizer\r\n * @return {?}\r\n */\r\nfunction elementStyleNamed(index, styleName, value, suffixOrSanitizer) {\r\n    if (value !== NO_CHANGE) {\r\n        var /** @type {?} */ lElement = data[index];\r\n        if (value == null) {\r\n            isProceduralRenderer(renderer) ?\r\n                renderer.removeStyle(lElement.native, styleName, RendererStyleFlags3.DashCase) :\r\n                lElement.native['style'].removeProperty(styleName);\r\n        }\r\n        else {\r\n            var /** @type {?} */ strValue = typeof suffixOrSanitizer == 'function' ? suffixOrSanitizer(value) : stringify$1(value);\r\n            if (typeof suffixOrSanitizer == 'string')\r\n                strValue = strValue + suffixOrSanitizer;\r\n            isProceduralRenderer(renderer) ?\r\n                renderer.setStyle(lElement.native, styleName, strValue, RendererStyleFlags3.DashCase) :\r\n                lElement.native['style'].setProperty(styleName, strValue);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Set the `style` property on a DOM element.\r\n *\r\n * This instruction is meant to handle the `[style]=\"exp\"` usage.\r\n *\r\n *\r\n * @template T\r\n * @param {?} index The index of the element to update in the data array\r\n * @param {?} value A value indicating if a given style should be added or removed.\r\n *   The expected shape of `value` is an object where keys are style names and the values\r\n *   are their corresponding values to set. If value is falsy than the style is remove. An absence\r\n *   of style does not cause that style to be removed. `NO_CHANGE` implies that no update should be\r\n *   performed.\r\n * @return {?}\r\n */\r\nfunction elementStyle(index, value) {\r\n    if (value !== NO_CHANGE) {\r\n        // TODO: This is a naive implementation which simply writes value to the `style`. In the future\r\n        // we will add logic here which would work with the animation code.\r\n        var /** @type {?} */ lElement = /** @type {?} */ (data[index]);\r\n        if (isProceduralRenderer(renderer)) {\r\n            renderer.setProperty(lElement.native, 'style', value);\r\n        }\r\n        else {\r\n            var /** @type {?} */ style = lElement.native['style'];\r\n            for (var /** @type {?} */ i = 0, /** @type {?} */ keys = Object.keys(value); i < keys.length; i++) {\r\n                var /** @type {?} */ styleName = keys[i];\r\n                var /** @type {?} */ styleValue = (/** @type {?} */ (value))[styleName];\r\n                styleValue == null ? style.removeProperty(styleName) :\r\n                    style.setProperty(styleName, styleValue);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Create static text node\r\n *\r\n * @param {?} index Index of the node in the data array.\r\n * @param {?=} value Value to write. This value will be stringified.\r\n *   If value is not provided than the actual creation of the text node is delayed.\r\n * @return {?}\r\n */\r\nfunction text(index, value) {\r\n    ngDevMode &&\r\n        assertNull(currentView.bindingStartIndex, 'text nodes should be created before bindings');\r\n    var /** @type {?} */ textNode = value != null ?\r\n        (isProceduralRenderer(renderer) ? renderer.createText(stringify$1(value)) :\r\n            renderer.createTextNode(stringify$1(value))) :\r\n        null;\r\n    var /** @type {?} */ node = createLNode(index, 3 /* Element */, textNode);\r\n    // Text nodes are self closing.\r\n    isParent = false;\r\n    appendChild(/** @type {?} */ ((node.parent)), textNode, currentView);\r\n}\r\n/**\r\n * Create text node with binding\r\n * Bindings should be handled externally with the proper bind(1-8) method\r\n *\r\n * @template T\r\n * @param {?} index Index of the node in the data array.\r\n * @param {?} value Stringified value to write.\r\n * @return {?}\r\n */\r\nfunction textBinding(index, value) {\r\n    ngDevMode && assertDataInRange(index);\r\n    var /** @type {?} */ existingNode = /** @type {?} */ (data[index]);\r\n    ngDevMode && assertNotNull(existingNode, 'existing node');\r\n    if (existingNode.native) {\r\n        // If DOM node exists and value changed, update textContent\r\n        value !== NO_CHANGE &&\r\n            (isProceduralRenderer(renderer) ? renderer.setValue(existingNode.native, stringify$1(value)) :\r\n                existingNode.native.textContent = stringify$1(value));\r\n    }\r\n    else {\r\n        // Node was created but DOM node creation was delayed. Create and append now.\r\n        existingNode.native = isProceduralRenderer(renderer) ?\r\n            renderer.createText(stringify$1(value)) :\r\n            renderer.createTextNode(stringify$1(value));\r\n        insertChild(existingNode, currentView);\r\n    }\r\n}\r\n/**\r\n * Create a directive.\r\n *\r\n * NOTE: directives can be created in order other than the index order. They can also\r\n *       be retrieved before they are created in which case the value will be null.\r\n *\r\n * @template T\r\n * @param {?} elementIndex Index of the host element in the data array\r\n * @param {?} directive The directive instance.\r\n * @param {?} directiveDef DirectiveDef object which contains information about the template.\r\n * @return {?}\r\n */\r\nfunction directiveCreate(elementIndex, directive, directiveDef) {\r\n    var /** @type {?} */ index = directives ? directives.length : 0;\r\n    var /** @type {?} */ instance = baseDirectiveCreate(index, directive, directiveDef);\r\n    ngDevMode && assertNotNull(previousOrParentNode.tNode, 'previousOrParentNode.tNode');\r\n    var /** @type {?} */ tNode = /** @type {?} */ ((previousOrParentNode.tNode));\r\n    var /** @type {?} */ isComponent = (/** @type {?} */ (directiveDef)).template;\r\n    if (isComponent) {\r\n        addComponentLogic(index, elementIndex, directive, /** @type {?} */ (directiveDef));\r\n    }\r\n    if (firstTemplatePass) {\r\n        // Init hooks are queued now so ngOnInit is called in host components before\r\n        // any projected components.\r\n        queueInitHooks(index, directiveDef.onInit, directiveDef.doCheck, currentView.tView);\r\n        if (directiveDef.hostBindings)\r\n            queueHostBindingForCheck(index, elementIndex);\r\n    }\r\n    if (tNode && tNode.attrs) {\r\n        setInputsFromAttrs(index, instance, directiveDef.inputs, tNode);\r\n    }\r\n    return instance;\r\n}\r\n/**\r\n * @template T\r\n * @param {?} index\r\n * @param {?} elementIndex\r\n * @param {?} instance\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction addComponentLogic(index, elementIndex, instance, def) {\r\n    var /** @type {?} */ tView = getOrCreateTView(def.template, def.directiveDefs, def.pipeDefs);\r\n    // Only component views should be added to the view tree directly. Embedded views are\r\n    // accessed through their containers because they may be removed / re-added later.\r\n    var /** @type {?} */ hostView = addToViewTree(createLView(-1, rendererFactory.createRenderer(/** @type {?} */ (previousOrParentNode.native), def.rendererType), tView, null, null, def.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */));\r\n    (/** @type {?} */ (previousOrParentNode.data)) = hostView;\r\n    (/** @type {?} */ (hostView.node)) = previousOrParentNode;\r\n    initChangeDetectorIfExisting(previousOrParentNode.nodeInjector, instance, hostView);\r\n    if (firstTemplatePass)\r\n        queueComponentIndexForCheck(index, elementIndex);\r\n}\r\n/**\r\n * A lighter version of directiveCreate() that is used for the root component\r\n *\r\n * This version does not contain features that we don't already support at root in\r\n * current Angular. Example: local refs and inputs on root component.\r\n * @template T\r\n * @param {?} index\r\n * @param {?} directive\r\n * @param {?} directiveDef\r\n * @return {?}\r\n */\r\nfunction baseDirectiveCreate(index, directive, directiveDef) {\r\n    ngDevMode &&\r\n        assertNull(currentView.bindingStartIndex, 'directives should be created before any bindings');\r\n    ngDevMode && assertPreviousIsParent();\r\n    Object.defineProperty(directive, NG_HOST_SYMBOL, { enumerable: false, value: previousOrParentNode });\r\n    if (directives == null)\r\n        currentView.directives = directives = [];\r\n    ngDevMode && assertDataNext(index, directives);\r\n    directives[index] = directive;\r\n    var /** @type {?} */ diPublic = /** @type {?} */ ((directiveDef)).diPublic;\r\n    if (diPublic) {\r\n        diPublic(/** @type {?} */ ((directiveDef)));\r\n    }\r\n    if (/** @type {?} */ ((directiveDef)).attributes != null && previousOrParentNode.type == 3 /* Element */) {\r\n        setUpAttributes((/** @type {?} */ (previousOrParentNode)).native, /** @type {?} */ (((directiveDef)).attributes));\r\n    }\r\n    return directive;\r\n}\r\n/**\r\n * Sets initial input properties on directive instances from attribute data\r\n *\r\n * @template T\r\n * @param {?} directiveIndex Index of the directive in directives array\r\n * @param {?} instance Instance of the directive on which to set the initial inputs\r\n * @param {?} inputs The list of inputs from the directive def\r\n * @param {?} tNode The static data for this node\r\n * @return {?}\r\n */\r\nfunction setInputsFromAttrs(directiveIndex, instance, inputs, tNode) {\r\n    var /** @type {?} */ initialInputData = /** @type {?} */ (tNode.initialInputs);\r\n    if (initialInputData === undefined || directiveIndex >= initialInputData.length) {\r\n        initialInputData = generateInitialInputs(directiveIndex, inputs, tNode);\r\n    }\r\n    var /** @type {?} */ initialInputs = initialInputData[directiveIndex];\r\n    if (initialInputs) {\r\n        for (var /** @type {?} */ i = 0; i < initialInputs.length; i += 2) {\r\n            (/** @type {?} */ (instance))[initialInputs[i]] = initialInputs[i | 1];\r\n        }\r\n    }\r\n}\r\n/**\r\n * Generates initialInputData for a node and stores it in the template's static storage\r\n * so subsequent template invocations don't have to recalculate it.\r\n *\r\n * initialInputData is an array containing values that need to be set as input properties\r\n * for directives on this node, but only once on creation. We need this array to support\r\n * the case where you set an \\@Input property of a directive using attribute-like syntax.\r\n * e.g. if you have a `name` \\@Input, you can set it once like this:\r\n *\r\n * <my-component name=\"Bess\"></my-component>\r\n *\r\n * @param {?} directiveIndex Index to store the initial input data\r\n * @param {?} inputs The list of inputs from the directive def\r\n * @param {?} tNode The static data on this node\r\n * @return {?}\r\n */\r\nfunction generateInitialInputs(directiveIndex, inputs, tNode) {\r\n    var /** @type {?} */ initialInputData = tNode.initialInputs || (tNode.initialInputs = []);\r\n    initialInputData[directiveIndex] = null;\r\n    var /** @type {?} */ attrs = /** @type {?} */ ((tNode.attrs));\r\n    for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {\r\n        var /** @type {?} */ attrName = attrs[i];\r\n        var /** @type {?} */ minifiedInputName = inputs[attrName];\r\n        if (minifiedInputName !== undefined) {\r\n            var /** @type {?} */ inputsToStore = initialInputData[directiveIndex] || (initialInputData[directiveIndex] = []);\r\n            inputsToStore.push(minifiedInputName, attrs[i | 1]);\r\n        }\r\n    }\r\n    return initialInputData;\r\n}\r\n/**\r\n * Creates an LContainerNode.\r\n *\r\n * Only `LViewNodes` can go into `LContainerNodes`.\r\n *\r\n * @param {?} index The index of the container in the data array\r\n * @param {?=} template Optional inline template\r\n * @param {?=} tagName The name of the container element, if applicable\r\n * @param {?=} attrs The attrs attached to the container, if applicable\r\n * @param {?=} localRefs A set of local reference bindings on the element.\r\n * @return {?}\r\n */\r\nfunction container(index, template, tagName, attrs, localRefs) {\r\n    ngDevMode &&\r\n        assertNull(currentView.bindingStartIndex, 'container nodes should be created before any bindings');\r\n    var /** @type {?} */ currentParent = isParent ? previousOrParentNode : /** @type {?} */ ((previousOrParentNode.parent));\r\n    ngDevMode && assertNotNull(currentParent, 'containers should have a parent');\r\n    var /** @type {?} */ lContainer = /** @type {?} */ ({\r\n        views: [],\r\n        nextIndex: 0,\r\n        // If the direct parent of the container is a view, its views will need to be added\r\n        // through insertView() when its parent view is being inserted:\r\n        renderParent: canInsertNativeNode(currentParent, currentView) ? currentParent : null,\r\n        template: template == null ? null : template,\r\n        next: null,\r\n        parent: currentView,\r\n        dynamicViewCount: 0,\r\n        queries: null\r\n    });\r\n    var /** @type {?} */ node = createLNode(index, 0 /* Container */, undefined, lContainer);\r\n    if (node.tNode == null) {\r\n        node.tNode = tData[index] = createTNode(tagName || null, attrs || null, []);\r\n    }\r\n    // Containers are added to the current view tree instead of their embedded views\r\n    // because views can be removed and re-inserted.\r\n    addToViewTree(node.data);\r\n    if (firstTemplatePass)\r\n        cacheMatchingDirectivesForNode(node.tNode);\r\n    // TODO: handle TemplateRef!\r\n    hack_declareDirectives(index, localRefs || null);\r\n    isParent = false;\r\n    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);\r\n    var /** @type {?} */ queries = node.queries;\r\n    if (queries) {\r\n        // check if a given container node matches\r\n        queries.addNode(node);\r\n        // prepare place for matching nodes from views inserted into a given container\r\n        lContainer.queries = queries.container();\r\n    }\r\n}\r\n/**\r\n * Sets a container up to receive views.\r\n *\r\n * @param {?} index The index of the container in the data array\r\n * @return {?}\r\n */\r\nfunction containerRefreshStart(index) {\r\n    ngDevMode && assertDataInRange(index);\r\n    previousOrParentNode = /** @type {?} */ (data[index]);\r\n    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);\r\n    isParent = true;\r\n    (/** @type {?} */ (previousOrParentNode)).data.nextIndex = 0;\r\n    ngDevMode && assertSame((/** @type {?} */ (previousOrParentNode)).native, undefined, \"the container's native element should not have been set yet.\");\r\n    if (!checkNoChangesMode) {\r\n        // We need to execute init hooks here so ngOnInit hooks are called in top level views\r\n        // before they are called in embedded views (for backwards compatibility).\r\n        executeInitHooks(currentView, currentView.tView, creationMode);\r\n    }\r\n}\r\n/**\r\n * Marks the end of the LContainerNode.\r\n *\r\n * Marking the end of LContainerNode is the time when to child Views get inserted or removed.\r\n * @return {?}\r\n */\r\nfunction containerRefreshEnd() {\r\n    if (isParent) {\r\n        isParent = false;\r\n    }\r\n    else {\r\n        ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);\r\n        ngDevMode && assertHasParent();\r\n        previousOrParentNode = /** @type {?} */ ((previousOrParentNode.parent));\r\n    }\r\n    ngDevMode && assertNodeType(previousOrParentNode, 0 /* Container */);\r\n    var /** @type {?} */ container = /** @type {?} */ (previousOrParentNode);\r\n    container.native = undefined;\r\n    ngDevMode && assertNodeType(container, 0 /* Container */);\r\n    var /** @type {?} */ nextIndex = container.data.nextIndex;\r\n    // remove extra views at the end of the container\r\n    while (nextIndex < container.data.views.length) {\r\n        removeView(container, nextIndex);\r\n    }\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction refreshDynamicChildren() {\r\n    for (var /** @type {?} */ current = currentView.child; current !== null; current = current.next) {\r\n        if (current.dynamicViewCount !== 0 && (/** @type {?} */ (current)).views) {\r\n            var /** @type {?} */ container_1 = /** @type {?} */ (current);\r\n            for (var /** @type {?} */ i = 0; i < container_1.views.length; i++) {\r\n                var /** @type {?} */ view = container_1.views[i];\r\n                renderEmbeddedTemplate(view, /** @type {?} */ ((view.data.template)), /** @type {?} */ ((view.data.context)), renderer);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Looks for a view with a given view block id inside a provided LContainer.\r\n * Removes views that need to be deleted in the process.\r\n *\r\n * @param {?} containerNode where to search for views\r\n * @param {?} startIdx starting index in the views array to search from\r\n * @param {?} viewBlockId exact view block id to look for\r\n * @return {?} index of a found view or -1 if not found\r\n */\r\nfunction scanForView(containerNode, startIdx, viewBlockId) {\r\n    var /** @type {?} */ views = containerNode.data.views;\r\n    for (var /** @type {?} */ i = startIdx; i < views.length; i++) {\r\n        var /** @type {?} */ viewAtPositionId = views[i].data.id;\r\n        if (viewAtPositionId === viewBlockId) {\r\n            return views[i];\r\n        }\r\n        else if (viewAtPositionId < viewBlockId) {\r\n            // found a view that should not be at this position - remove\r\n            removeView(containerNode, i);\r\n        }\r\n        else {\r\n            // found a view with id grater than the one we are searching for\r\n            // which means that required view doesn't exist and can't be found at\r\n            // later positions in the views array - stop the search here\r\n            break;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Marks the start of an embedded view.\r\n *\r\n * @param {?} viewBlockId The ID of this view\r\n * @return {?} boolean Whether or not this view is in creation mode\r\n */\r\nfunction embeddedViewStart(viewBlockId) {\r\n    var /** @type {?} */ container = /** @type {?} */ ((isParent ? previousOrParentNode : /** @type {?} */ ((previousOrParentNode.parent))));\r\n    ngDevMode && assertNodeType(container, 0 /* Container */);\r\n    var /** @type {?} */ lContainer = container.data;\r\n    var /** @type {?} */ existingViewNode = scanForView(container, lContainer.nextIndex, viewBlockId);\r\n    if (existingViewNode) {\r\n        previousOrParentNode = existingViewNode;\r\n        ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);\r\n        isParent = true;\r\n        enterView((/** @type {?} */ (existingViewNode)).data, /** @type {?} */ (existingViewNode));\r\n    }\r\n    else {\r\n        // When we create a new LView, we always reset the state of the instructions.\r\n        var /** @type {?} */ newView = createLView(viewBlockId, renderer, getOrCreateEmbeddedTView(viewBlockId, container), null, null, 2 /* CheckAlways */);\r\n        if (lContainer.queries) {\r\n            newView.queries = lContainer.queries.enterView(lContainer.nextIndex);\r\n        }\r\n        enterView(newView, createLNode(null, 2 /* View */, null, newView));\r\n    }\r\n    return !existingViewNode;\r\n}\r\n/**\r\n * Initialize the TView (e.g. static data) for the active embedded view.\r\n *\r\n * Each embedded view needs to set the global tData variable to the static data for\r\n * that view. Otherwise, the view's static data for a particular node would overwrite\r\n * the static data for a node in the view above it with the same index (since it's in the\r\n * same template).\r\n *\r\n * @param {?} viewIndex The index of the TView in TContainer\r\n * @param {?} parent The parent container in which to look for the view's static data\r\n * @return {?} TView\r\n */\r\nfunction getOrCreateEmbeddedTView(viewIndex, parent) {\r\n    ngDevMode && assertNodeType(parent, 0 /* Container */);\r\n    var /** @type {?} */ tContainer = (/** @type {?} */ (((parent)).tNode)).data;\r\n    if (viewIndex >= tContainer.length || tContainer[viewIndex] == null) {\r\n        var /** @type {?} */ tView = currentView.tView;\r\n        tContainer[viewIndex] = createTView(tView.directiveRegistry, tView.pipeRegistry);\r\n    }\r\n    return tContainer[viewIndex];\r\n}\r\n/**\r\n * Marks the end of an embedded view.\r\n * @return {?}\r\n */\r\nfunction embeddedViewEnd() {\r\n    refreshDirectives();\r\n    isParent = false;\r\n    var /** @type {?} */ viewNode = previousOrParentNode = /** @type {?} */ (currentView.node);\r\n    var /** @type {?} */ containerNode = /** @type {?} */ (previousOrParentNode.parent);\r\n    if (containerNode) {\r\n        ngDevMode && assertNodeType(viewNode, 2 /* View */);\r\n        ngDevMode && assertNodeType(containerNode, 0 /* Container */);\r\n        var /** @type {?} */ lContainer = containerNode.data;\r\n        if (creationMode) {\r\n            // it is a new view, insert it into collection of views for a given container\r\n            insertView(containerNode, viewNode, lContainer.nextIndex);\r\n        }\r\n        lContainer.nextIndex++;\r\n    }\r\n    leaveView(/** @type {?} */ ((/** @type {?} */ ((currentView)).parent)));\r\n    ngDevMode && assertEqual(isParent, false, 'isParent');\r\n    ngDevMode && assertNodeType(previousOrParentNode, 2 /* View */);\r\n}\r\n/**\r\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\r\n *\r\n * @template T\r\n * @param {?} directiveIndex\r\n * @param {?} elementIndex\r\n * @return {?}\r\n */\r\nfunction componentRefresh(directiveIndex, elementIndex) {\r\n    ngDevMode && assertDataInRange(elementIndex);\r\n    var /** @type {?} */ element = /** @type {?} */ (((data))[elementIndex]);\r\n    ngDevMode && assertNodeType(element, 3 /* Element */);\r\n    ngDevMode && assertNotNull(element.data, \"Component's host node should have an LView attached.\");\r\n    var /** @type {?} */ hostView = /** @type {?} */ ((element.data));\r\n    // Only attached CheckAlways components or attached, dirty OnPush components should be checked\r\n    if (viewAttached(hostView) && hostView.flags & (2 /* CheckAlways */ | 4 /* Dirty */)) {\r\n        ngDevMode && assertDataInRange(directiveIndex, /** @type {?} */ ((directives)));\r\n        var /** @type {?} */ def = /** @type {?} */ (((currentView.tView.directives))[directiveIndex]);\r\n        detectChangesInternal(hostView, element, def, getDirectiveInstance(/** @type {?} */ ((directives))[directiveIndex]));\r\n    }\r\n}\r\n/**\r\n * Returns a boolean for whether the view is attached\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction viewAttached(view) {\r\n    return (view.flags & 8 /* Attached */) === 8 /* Attached */;\r\n}\r\n/**\r\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\r\n * It takes all the selectors from the entire component's template and decides where\r\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\r\n * backed by a selector).\r\n *\r\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\r\n * un-parsed form.\r\n *\r\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\r\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\r\n *\r\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\r\n * drawbacks:\r\n * - having only a textual form would require runtime parsing of CSS selectors;\r\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\r\n * template author).\r\n *\r\n * @param {?} index\r\n * @param {?=} selectors A collection of parsed CSS selectors\r\n * @param {?=} textSelectors\r\n * @return {?}\r\n */\r\nfunction projectionDef(index, selectors, textSelectors) {\r\n    var /** @type {?} */ noOfNodeBuckets = selectors ? selectors.length + 1 : 1;\r\n    var /** @type {?} */ distributedNodes = new Array(noOfNodeBuckets);\r\n    for (var /** @type {?} */ i = 0; i < noOfNodeBuckets; i++) {\r\n        distributedNodes[i] = [];\r\n    }\r\n    var /** @type {?} */ componentNode = findComponentHost(currentView);\r\n    var /** @type {?} */ componentChild = componentNode.child;\r\n    while (componentChild !== null) {\r\n        // execute selector matching logic if and only if:\r\n        // - there are selectors defined\r\n        // - a node has a tag name / attributes that can be matched\r\n        if (selectors && componentChild.tNode) {\r\n            var /** @type {?} */ matchedIdx = matchingSelectorIndex(componentChild.tNode, selectors, /** @type {?} */ ((textSelectors)));\r\n            distributedNodes[matchedIdx].push(componentChild);\r\n        }\r\n        else {\r\n            distributedNodes[0].push(componentChild);\r\n        }\r\n        componentChild = componentChild.next;\r\n    }\r\n    ngDevMode && assertDataNext(index);\r\n    data[index] = distributedNodes;\r\n}\r\n/**\r\n * Updates the linked list of a projection node, by appending another linked list.\r\n *\r\n * @param {?} projectionNode Projection node whose projected nodes linked list has to be updated\r\n * @param {?} appendedFirst First node of the linked list to append.\r\n * @param {?} appendedLast Last node of the linked list to append.\r\n * @return {?}\r\n */\r\nfunction appendToProjectionNode(projectionNode, appendedFirst, appendedLast) {\r\n    ngDevMode && assertEqual(!!appendedFirst, !!appendedLast, 'appendedFirst can be null if and only if appendedLast is also null');\r\n    if (!appendedLast) {\r\n        // nothing to append\r\n        return;\r\n    }\r\n    var /** @type {?} */ projectionNodeData = projectionNode.data;\r\n    if (projectionNodeData.tail) {\r\n        projectionNodeData.tail.pNextOrParent = appendedFirst;\r\n    }\r\n    else {\r\n        projectionNodeData.head = appendedFirst;\r\n    }\r\n    projectionNodeData.tail = appendedLast;\r\n    appendedLast.pNextOrParent = projectionNode;\r\n}\r\n/**\r\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\r\n * to the projectionDef instruction.\r\n *\r\n * @param {?} nodeIndex\r\n * @param {?} localIndex - index under which distribution of projected nodes was memorized\r\n * @param {?=} selectorIndex - 0 means <ng-content> without any selector\r\n * @param {?=} attrs - attributes attached to the ng-content node, if present\r\n * @return {?}\r\n */\r\nfunction projection(nodeIndex, localIndex, selectorIndex, attrs) {\r\n    if (selectorIndex === void 0) { selectorIndex = 0; }\r\n    var /** @type {?} */ node = createLNode(nodeIndex, 1 /* Projection */, null, { head: null, tail: null });\r\n    if (node.tNode == null) {\r\n        node.tNode = createTNode(null, attrs || null, null);\r\n    }\r\n    isParent = false; // self closing\r\n    var /** @type {?} */ currentParent = node.parent;\r\n    // re-distribution of projectable nodes is memorized on a component's view level\r\n    var /** @type {?} */ componentNode = findComponentHost(currentView);\r\n    // make sure that nodes to project were memorized\r\n    var /** @type {?} */ nodesForSelector = /** @type {?} */ ((/** @type {?} */ ((componentNode.data)).data))[localIndex][selectorIndex];\r\n    // build the linked list of projected nodes:\r\n    for (var /** @type {?} */ i = 0; i < nodesForSelector.length; i++) {\r\n        var /** @type {?} */ nodeToProject = nodesForSelector[i];\r\n        if (nodeToProject.type === 1 /* Projection */) {\r\n            var /** @type {?} */ previouslyProjected = (/** @type {?} */ (nodeToProject)).data;\r\n            appendToProjectionNode(node, previouslyProjected.head, previouslyProjected.tail);\r\n        }\r\n        else {\r\n            appendToProjectionNode(node, /** @type {?} */ (nodeToProject), /** @type {?} */ (nodeToProject));\r\n        }\r\n    }\r\n    if (canInsertNativeNode(currentParent, currentView)) {\r\n        // process each node in the list of projected nodes:\r\n        var /** @type {?} */ nodeToProject = node.data.head;\r\n        var /** @type {?} */ lastNodeToProject = node.data.tail;\r\n        while (nodeToProject) {\r\n            appendProjectedNode(/** @type {?} */ (nodeToProject), currentParent, currentView);\r\n            nodeToProject = nodeToProject === lastNodeToProject ? null : nodeToProject.pNextOrParent;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Given a current view, finds the nearest component's host (LElement).\r\n *\r\n * @param {?} lView LView for which we want a host element node\r\n * @return {?} The host node\r\n */\r\nfunction findComponentHost(lView) {\r\n    var /** @type {?} */ viewRootLNode = lView.node;\r\n    while (viewRootLNode.type === 2 /* View */) {\r\n        ngDevMode && assertNotNull(lView.parent, 'lView.parent');\r\n        lView = /** @type {?} */ ((lView.parent));\r\n        viewRootLNode = lView.node;\r\n    }\r\n    ngDevMode && assertNodeType(viewRootLNode, 3 /* Element */);\r\n    ngDevMode && assertNotNull(viewRootLNode.data, 'node.data');\r\n    return /** @type {?} */ (viewRootLNode);\r\n}\r\n/**\r\n * Adds a LView or a LContainer to the end of the current view tree.\r\n *\r\n * This structure will be used to traverse through nested views to remove listeners\r\n * and call onDestroy callbacks.\r\n *\r\n * @template T\r\n * @param {?} state The LView or LContainer to add to the view tree\r\n * @return {?} The state passed in\r\n */\r\nfunction addToViewTree(state) {\r\n    currentView.tail ? (currentView.tail.next = state) : (currentView.child = state);\r\n    currentView.tail = state;\r\n    return state;\r\n}\r\n/**\r\n * If node is an OnPush component, marks its LView dirty.\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction markDirtyIfOnPush(node) {\r\n    // Because data flows down the component tree, ancestors do not need to be marked dirty\r\n    if (node.data && !(node.data.flags & 2 /* CheckAlways */)) {\r\n        node.data.flags |= 4 /* Dirty */;\r\n    }\r\n}\r\n/**\r\n * Wraps an event listener so its host view and its ancestor views will be marked dirty\r\n * whenever the event fires. Necessary to support OnPush components.\r\n * @param {?} view\r\n * @param {?} listenerFn\r\n * @return {?}\r\n */\r\nfunction wrapListenerWithDirtyLogic(view, listenerFn) {\r\n    return function (e) {\r\n        markViewDirty(view);\r\n        return listenerFn(e);\r\n    };\r\n}\r\n/**\r\n * Wraps an event listener so its host view and its ancestor views will be marked dirty\r\n * whenever the event fires. Also wraps with preventDefault behavior.\r\n * @param {?} view\r\n * @param {?} listenerFn\r\n * @return {?}\r\n */\r\nfunction wrapListenerWithDirtyAndDefault(view, listenerFn) {\r\n    return function (e) {\r\n        markViewDirty(view);\r\n        if (listenerFn(e) === false) {\r\n            e.preventDefault();\r\n            // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\r\n            e.returnValue = false;\r\n        }\r\n    };\r\n}\r\n/**\r\n * Marks current view and all ancestors dirty\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction markViewDirty(view) {\r\n    var /** @type {?} */ currentView = view;\r\n    while (currentView.parent != null) {\r\n        currentView.flags |= 4 /* Dirty */;\r\n        currentView = currentView.parent;\r\n    }\r\n    currentView.flags |= 4 /* Dirty */;\r\n    ngDevMode && assertNotNull(/** @type {?} */ ((currentView)).context, 'rootContext');\r\n    scheduleTick(/** @type {?} */ (((currentView)).context));\r\n}\r\n/**\r\n * Used to schedule change detection on the whole application.\r\n *\r\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\r\n * It is usually called indirectly by calling `markDirty` when the view needs to be\r\n * re-rendered.\r\n *\r\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\r\n * `scheduleTick` requests. The scheduling function can be overridden in\r\n * `renderComponent`'s `scheduler` option.\r\n * @template T\r\n * @param {?} rootContext\r\n * @return {?}\r\n */\r\nfunction scheduleTick(rootContext) {\r\n    if (rootContext.clean == _CLEAN_PROMISE) {\r\n        var /** @type {?} */ res_1;\r\n        rootContext.clean = new Promise(function (r) { return res_1 = r; });\r\n        rootContext.scheduler(function () {\r\n            tick(rootContext.component); /** @type {?} */\r\n            ((res_1))(null);\r\n            rootContext.clean = _CLEAN_PROMISE;\r\n        });\r\n    }\r\n}\r\n/**\r\n * Used to perform change detection on the whole application.\r\n *\r\n * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`\r\n * executes lifecycle hooks and conditionally checks components based on their\r\n * `ChangeDetectionStrategy` and dirtiness.\r\n *\r\n * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally\r\n * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a\r\n * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can\r\n * be changed when calling `renderComponent` and providing the `scheduler` option.\r\n * @template T\r\n * @param {?} component\r\n * @return {?}\r\n */\r\nfunction tick(component) {\r\n    var /** @type {?} */ rootView = getRootView(component);\r\n    var /** @type {?} */ rootComponent = (/** @type {?} */ (rootView.context)).component;\r\n    var /** @type {?} */ hostNode = _getComponentHostLElementNode(rootComponent);\r\n    ngDevMode && assertNotNull(hostNode.data, 'Component host node should be attached to an LView');\r\n    renderComponentOrTemplate(hostNode, rootView, rootComponent);\r\n}\r\n/**\r\n * Retrieve the root view from any component by walking the parent `LView` until\r\n * reaching the root `LView`.\r\n *\r\n * @param {?} component any component\r\n * @return {?}\r\n */\r\nfunction getRootView(component) {\r\n    ngDevMode && assertNotNull(component, 'component');\r\n    var /** @type {?} */ lElementNode = _getComponentHostLElementNode(component);\r\n    var /** @type {?} */ lView = lElementNode.view;\r\n    while (lView.parent) {\r\n        lView = lView.parent;\r\n    }\r\n    return lView;\r\n}\r\n/**\r\n * Synchronously perform change detection on a component (and possibly its sub-components).\r\n *\r\n * This function triggers change detection in a synchronous way on a component. There should\r\n * be very little reason to call this function directly since a preferred way to do change\r\n * detection is to {\\@link markDirty} the component and wait for the scheduler to call this method\r\n * at some future point in time. This is because a single user action often results in many\r\n * components being invalidated and calling change detection on each component synchronously\r\n * would be inefficient. It is better to wait until all components are marked as dirty and\r\n * then perform single change detection across all of the components\r\n *\r\n * @template T\r\n * @param {?} component The component which the change detection should be performed on.\r\n * @return {?}\r\n */\r\nfunction detectChanges(component) {\r\n    var /** @type {?} */ hostNode = _getComponentHostLElementNode(component);\r\n    ngDevMode && assertNotNull(hostNode.data, 'Component host node should be attached to an LView');\r\n    var /** @type {?} */ componentIndex = /** @type {?} */ ((hostNode.tNode)).flags >> 13;\r\n    var /** @type {?} */ def = /** @type {?} */ (((hostNode.view.tView.directives))[componentIndex]);\r\n    detectChangesInternal(/** @type {?} */ (hostNode.data), hostNode, def, component);\r\n}\r\n/**\r\n * Checks the change detector and its children, and throws if any changes are detected.\r\n *\r\n * This is used in development mode to verify that running change detection doesn't\r\n * introduce other changes.\r\n * @template T\r\n * @param {?} component\r\n * @return {?}\r\n */\r\nfunction checkNoChanges(component) {\r\n    checkNoChangesMode = true;\r\n    try {\r\n        detectChanges(component);\r\n    }\r\n    finally {\r\n        checkNoChangesMode = false;\r\n    }\r\n}\r\n/**\r\n * Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on.\r\n * @param {?} oldValue\r\n * @param {?} currValue\r\n * @return {?}\r\n */\r\nfunction throwErrorIfNoChangesMode(oldValue, currValue) {\r\n    if (checkNoChangesMode) {\r\n        var /** @type {?} */ msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\r\n        if (creationMode) {\r\n            msg +=\r\n                \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\r\n                    \" Has it been created in a change detection hook ?\";\r\n        }\r\n        // TODO: include debug context\r\n        throw new Error(msg);\r\n    }\r\n}\r\n/**\r\n * Checks the view of the component provided. Does not gate on dirty checks or execute doCheck.\r\n * @template T\r\n * @param {?} hostView\r\n * @param {?} hostNode\r\n * @param {?} def\r\n * @param {?} component\r\n * @return {?}\r\n */\r\nfunction detectChangesInternal(hostView, hostNode, def, component) {\r\n    var /** @type {?} */ oldView = enterView(hostView, hostNode);\r\n    var /** @type {?} */ template = def.template;\r\n    try {\r\n        template(component, creationMode);\r\n        refreshDynamicChildren();\r\n        refreshDirectives();\r\n    }\r\n    finally {\r\n        leaveView(oldView);\r\n    }\r\n}\r\n/**\r\n * Mark the component as dirty (needing change detection).\r\n *\r\n * Marking a component dirty will schedule a change detection on this\r\n * component at some point in the future. Marking an already dirty\r\n * component as dirty is a noop. Only one outstanding change detection\r\n * can be scheduled per component tree. (Two components bootstrapped with\r\n * separate `renderComponent` will have separate schedulers)\r\n *\r\n * When the root component is bootstrapped with `renderComponent`, a scheduler\r\n * can be provided.\r\n *\r\n * @template T\r\n * @param {?} component Component to mark as dirty.\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * A special value which designates that a value has not changed.\r\n */\r\nvar NO_CHANGE = /** @type {?} */ ({});\r\n/**\r\n *  Initializes the binding start index. Will get inlined.\r\n *\r\n *  This function must be called before any binding related function is called\r\n *  (ie `bind()`, `interpolationX()`, `pureFunctionX()`)\r\n * @return {?}\r\n */\r\nfunction initBindings() {\r\n    // `bindingIndex` is initialized when the view is first entered when not in creation mode\r\n    ngDevMode &&\r\n        assertEqual(creationMode, true, 'should only be called in creationMode for performance reasons');\r\n    if (currentView.bindingStartIndex == null) {\r\n        bindingIndex = currentView.bindingStartIndex = data.length;\r\n    }\r\n}\r\n/**\r\n * Creates a single value binding.\r\n *\r\n * @template T\r\n * @param {?} value Value to diff\r\n * @return {?}\r\n */\r\nfunction bind(value) {\r\n    if (creationMode) {\r\n        initBindings();\r\n        return data[bindingIndex++] = value;\r\n    }\r\n    var /** @type {?} */ changed = value !== NO_CHANGE && isDifferent(data[bindingIndex], value);\r\n    if (changed) {\r\n        throwErrorIfNoChangesMode(data[bindingIndex], value);\r\n        data[bindingIndex] = value;\r\n    }\r\n    bindingIndex++;\r\n    return changed ? value : NO_CHANGE;\r\n}\r\n/**\r\n * Create interpolation bindings with a variable number of expressions.\r\n *\r\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\r\n * Those are faster because there is no need to create an array of expressions and iterate over it.\r\n *\r\n * `values`:\r\n * - has static text at even indexes,\r\n * - has evaluated expressions at odd indexes.\r\n *\r\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\r\n * @param {?} values\r\n * @return {?}\r\n */\r\nfunction interpolationV(values) {\r\n    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\r\n    ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\r\n    var /** @type {?} */ different = false;\r\n    for (var /** @type {?} */ i = 1; i < values.length; i += 2) {\r\n        // Check if bindings (odd indexes) have changed\r\n        bindingUpdated(values[i]) && (different = true);\r\n    }\r\n    if (!different) {\r\n        return NO_CHANGE;\r\n    }\r\n    // Build the updated content\r\n    var /** @type {?} */ content = values[0];\r\n    for (var /** @type {?} */ i = 1; i < values.length; i += 2) {\r\n        content += stringify$1(values[i]) + values[i + 1];\r\n    }\r\n    return content;\r\n}\r\n/**\r\n * Creates an interpolation binding with 1 expression.\r\n *\r\n * @param {?} prefix static value used for concatenation only.\r\n * @param {?} v0 value checked for change.\r\n * @param {?} suffix static value used for concatenation only.\r\n * @return {?}\r\n */\r\nfunction interpolation1(prefix, v0, suffix) {\r\n    var /** @type {?} */ different = bindingUpdated(v0);\r\n    return different ? prefix + stringify$1(v0) + suffix : NO_CHANGE;\r\n}\r\n/**\r\n * Creates an interpolation binding with 2 expressions.\r\n * @param {?} prefix\r\n * @param {?} v0\r\n * @param {?} i0\r\n * @param {?} v1\r\n * @param {?} suffix\r\n * @return {?}\r\n */\r\nfunction interpolation2(prefix, v0, i0, v1, suffix) {\r\n    var /** @type {?} */ different = bindingUpdated2(v0, v1);\r\n    return different ? prefix + stringify$1(v0) + i0 + stringify$1(v1) + suffix : NO_CHANGE;\r\n}\r\n/**\r\n * Creates an interpolation bindings with 3 expressions.\r\n * @param {?} prefix\r\n * @param {?} v0\r\n * @param {?} i0\r\n * @param {?} v1\r\n * @param {?} i1\r\n * @param {?} v2\r\n * @param {?} suffix\r\n * @return {?}\r\n */\r\nfunction interpolation3(prefix, v0, i0, v1, i1, v2, suffix) {\r\n    var /** @type {?} */ different = bindingUpdated2(v0, v1);\r\n    different = bindingUpdated(v2) || different;\r\n    return different ? prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + suffix :\r\n        NO_CHANGE;\r\n}\r\n/**\r\n * Create an interpolation binding with 4 expressions.\r\n * @param {?} prefix\r\n * @param {?} v0\r\n * @param {?} i0\r\n * @param {?} v1\r\n * @param {?} i1\r\n * @param {?} v2\r\n * @param {?} i2\r\n * @param {?} v3\r\n * @param {?} suffix\r\n * @return {?}\r\n */\r\nfunction interpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\r\n    var /** @type {?} */ different = bindingUpdated4(v0, v1, v2, v3);\r\n    return different ?\r\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) +\r\n            suffix :\r\n        NO_CHANGE;\r\n}\r\n/**\r\n * Creates an interpolation binding with 5 expressions.\r\n * @param {?} prefix\r\n * @param {?} v0\r\n * @param {?} i0\r\n * @param {?} v1\r\n * @param {?} i1\r\n * @param {?} v2\r\n * @param {?} i2\r\n * @param {?} v3\r\n * @param {?} i3\r\n * @param {?} v4\r\n * @param {?} suffix\r\n * @return {?}\r\n */\r\nfunction interpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\r\n    var /** @type {?} */ different = bindingUpdated4(v0, v1, v2, v3);\r\n    different = bindingUpdated(v4) || different;\r\n    return different ?\r\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +\r\n            stringify$1(v4) + suffix :\r\n        NO_CHANGE;\r\n}\r\n/**\r\n * Creates an interpolation binding with 6 expressions.\r\n * @param {?} prefix\r\n * @param {?} v0\r\n * @param {?} i0\r\n * @param {?} v1\r\n * @param {?} i1\r\n * @param {?} v2\r\n * @param {?} i2\r\n * @param {?} v3\r\n * @param {?} i3\r\n * @param {?} v4\r\n * @param {?} i4\r\n * @param {?} v5\r\n * @param {?} suffix\r\n * @return {?}\r\n */\r\nfunction interpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\r\n    var /** @type {?} */ different = bindingUpdated4(v0, v1, v2, v3);\r\n    different = bindingUpdated2(v4, v5) || different;\r\n    return different ?\r\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +\r\n            stringify$1(v4) + i4 + stringify$1(v5) + suffix :\r\n        NO_CHANGE;\r\n}\r\n/**\r\n * Creates an interpolation binding with 7 expressions.\r\n * @param {?} prefix\r\n * @param {?} v0\r\n * @param {?} i0\r\n * @param {?} v1\r\n * @param {?} i1\r\n * @param {?} v2\r\n * @param {?} i2\r\n * @param {?} v3\r\n * @param {?} i3\r\n * @param {?} v4\r\n * @param {?} i4\r\n * @param {?} v5\r\n * @param {?} i5\r\n * @param {?} v6\r\n * @param {?} suffix\r\n * @return {?}\r\n */\r\nfunction interpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\r\n    var /** @type {?} */ different = bindingUpdated4(v0, v1, v2, v3);\r\n    different = bindingUpdated2(v4, v5) || different;\r\n    different = bindingUpdated(v6) || different;\r\n    return different ?\r\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +\r\n            stringify$1(v4) + i4 + stringify$1(v5) + i5 + stringify$1(v6) + suffix :\r\n        NO_CHANGE;\r\n}\r\n/**\r\n * Creates an interpolation binding with 8 expressions.\r\n * @param {?} prefix\r\n * @param {?} v0\r\n * @param {?} i0\r\n * @param {?} v1\r\n * @param {?} i1\r\n * @param {?} v2\r\n * @param {?} i2\r\n * @param {?} v3\r\n * @param {?} i3\r\n * @param {?} v4\r\n * @param {?} i4\r\n * @param {?} v5\r\n * @param {?} i5\r\n * @param {?} v6\r\n * @param {?} i6\r\n * @param {?} v7\r\n * @param {?} suffix\r\n * @return {?}\r\n */\r\nfunction interpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\r\n    var /** @type {?} */ different = bindingUpdated4(v0, v1, v2, v3);\r\n    different = bindingUpdated4(v4, v5, v6, v7) || different;\r\n    return different ?\r\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +\r\n            stringify$1(v4) + i4 + stringify$1(v5) + i5 + stringify$1(v6) + i6 + stringify$1(v7) + suffix :\r\n        NO_CHANGE;\r\n}\r\n/**\r\n * Store a value in the `data` at a given `index`.\r\n * @template T\r\n * @param {?} index\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction store(index, value) {\r\n    // We don't store any static data for local variables, so the first time\r\n    // we see the template, we should store as null to avoid a sparse array\r\n    if (index >= tData.length) {\r\n        tData[index] = null;\r\n    }\r\n    data[index] = value;\r\n}\r\n/**\r\n * Retrieves a value from the `data`.\r\n * @template T\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction load(index) {\r\n    ngDevMode && assertDataInRange(index);\r\n    return data[index];\r\n}\r\n/**\r\n * Retrieves a value from the `directives` array.\r\n * @template T\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction loadDirective(index) {\r\n    ngDevMode && assertNotNull(directives, 'Directives array should be defined if reading a dir.');\r\n    ngDevMode && assertDataInRange(index, /** @type {?} */ ((directives)));\r\n    return /** @type {?} */ ((directives))[index];\r\n}\r\n/**\r\n * Gets the current binding value and increments the binding index.\r\n * @return {?}\r\n */\r\nfunction consumeBinding() {\r\n    ngDevMode && assertDataInRange(bindingIndex);\r\n    ngDevMode &&\r\n        assertNotEqual(data[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\r\n    return data[bindingIndex++];\r\n}\r\n/**\r\n * Updates binding if changed, then returns whether it was updated.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction bindingUpdated(value) {\r\n    ngDevMode && assertNotEqual(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\r\n    if (creationMode) {\r\n        initBindings();\r\n    }\r\n    else if (isDifferent(data[bindingIndex], value)) {\r\n        throwErrorIfNoChangesMode(data[bindingIndex], value);\r\n    }\r\n    else {\r\n        bindingIndex++;\r\n        return false;\r\n    }\r\n    data[bindingIndex++] = value;\r\n    return true;\r\n}\r\n/**\r\n * Updates binding if changed, then returns the latest value.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateBinding$1(value) {\r\n    bindingUpdated(value);\r\n    return value;\r\n}\r\n/**\r\n * Updates 2 bindings if changed, then returns whether either was updated.\r\n * @param {?} exp1\r\n * @param {?} exp2\r\n * @return {?}\r\n */\r\nfunction bindingUpdated2(exp1, exp2) {\r\n    var /** @type {?} */ different = bindingUpdated(exp1);\r\n    return bindingUpdated(exp2) || different;\r\n}\r\n/**\r\n * Updates 4 bindings if changed, then returns whether any was updated.\r\n * @param {?} exp1\r\n * @param {?} exp2\r\n * @param {?} exp3\r\n * @param {?} exp4\r\n * @return {?}\r\n */\r\nfunction bindingUpdated4(exp1, exp2, exp3, exp4) {\r\n    var /** @type {?} */ different = bindingUpdated2(exp1, exp2);\r\n    return bindingUpdated2(exp3, exp4) || different;\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction getTView() {\r\n    return currentView.tView;\r\n}\r\n/**\r\n * @template T\r\n * @param {?} instanceOrArray\r\n * @return {?}\r\n */\r\nfunction getDirectiveInstance(instanceOrArray) {\r\n    // Directives with content queries store an array in directives[directiveIndex]\r\n    // with the instance as the first index\r\n    return Array.isArray(instanceOrArray) ? instanceOrArray[0] : instanceOrArray;\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction assertPreviousIsParent() {\r\n    assertEqual(isParent, true, 'previousOrParentNode should be a parent');\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction assertHasParent() {\r\n    assertNotNull(previousOrParentNode.parent, 'previousOrParentNode should have a parent');\r\n}\r\n/**\r\n * @param {?} index\r\n * @param {?=} arr\r\n * @return {?}\r\n */\r\nfunction assertDataInRange(index, arr) {\r\n    if (arr == null)\r\n        arr = data;\r\n    assertLessThan(index, arr ? arr.length : 0, 'index expected to be a valid data index');\r\n}\r\n/**\r\n * @param {?} index\r\n * @param {?=} arr\r\n * @return {?}\r\n */\r\nfunction assertDataNext(index, arr) {\r\n    if (arr == null)\r\n        arr = data;\r\n    assertEqual(arr.length, index, \"index \" + index + \" expected to be at the end of arr (length \" + arr.length + \")\");\r\n}\r\n/**\r\n * @template T\r\n * @param {?} component\r\n * @return {?}\r\n */\r\nfunction _getComponentHostLElementNode(component) {\r\n    ngDevMode && assertNotNull(component, 'expecting component got null');\r\n    var /** @type {?} */ lElementNode = /** @type {?} */ ((/** @type {?} */ (component))[NG_HOST_SYMBOL]);\r\n    ngDevMode && assertNotNull(component, 'object is not a component');\r\n    return lElementNode;\r\n}\r\nvar CLEAN_PROMISE = _CLEAN_PROMISE;\r\nvar ROOT_DIRECTIVE_INDICES = _ROOT_DIRECTIVE_INDICES;\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @template T\r\n */\r\nvar ViewRef$1 = /** @class */ (function () {\r\n    function ViewRef(_view, context) {\r\n        this._view = _view;\r\n        this.context = /** @type {?} */ ((context));\r\n    }\r\n    /** @internal */\r\n    /**\r\n     * \\@internal\r\n     * @param {?} view\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    ViewRef.prototype._setComponentContext = /**\r\n     * \\@internal\r\n     * @param {?} view\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    function (view, context) {\r\n        this._view = view;\r\n        this.context = context;\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ViewRef.prototype.destroy = /**\r\n     * @return {?}\r\n     */\r\n    function () { notImplemented(); };\r\n    /**\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    ViewRef.prototype.onDestroy = /**\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    function (callback) { notImplemented(); };\r\n    /**\r\n     * Marks a view and all of its ancestors dirty.\r\n     *\r\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\r\n     * multiple `markForCheck` calls to into one change detection run.\r\n     *\r\n     * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\r\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\r\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\r\n     *\r\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-kx7rrw))\r\n     *\r\n     * ```typescript\r\n     * @Component({\r\n     *   selector: 'my-app',\r\n     *   template: `Number of ticks: {{numberOfTicks}}`\r\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\r\n     * })\r\n     * class AppComponent {\r\n     *   numberOfTicks = 0;\r\n     *\r\n     *   constructor(private ref: ChangeDetectorRef) {\r\n     *     setInterval(() => {\r\n     *       this.numberOfTicks++;\r\n     *       // the following is required, otherwise the view will not be updated\r\n     *       this.ref.markForCheck();\r\n     *     }, 1000);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    /**\r\n     * Marks a view and all of its ancestors dirty.\r\n     *\r\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\r\n     * multiple `markForCheck` calls to into one change detection run.\r\n     *\r\n     * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\r\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\r\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\r\n     *\r\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-kx7rrw))\r\n     *\r\n     * ```typescript\r\n     * \\@Component({\r\n     *   selector: 'my-app',\r\n     *   template: `Number of ticks: {{numberOfTicks}}`\r\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\r\n     * })\r\n     * class AppComponent {\r\n     *   numberOfTicks = 0;\r\n     *\r\n     *   constructor(private ref: ChangeDetectorRef) {\r\n     *     setInterval(() => {\r\n     *       this.numberOfTicks++;\r\n     *       // the following is required, otherwise the view will not be updated\r\n     *       this.ref.markForCheck();\r\n     *     }, 1000);\r\n     *   }\r\n     * }\r\n     * ```\r\n     * @return {?}\r\n     */\r\n    ViewRef.prototype.markForCheck = /**\r\n     * Marks a view and all of its ancestors dirty.\r\n     *\r\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\r\n     * multiple `markForCheck` calls to into one change detection run.\r\n     *\r\n     * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\r\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\r\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\r\n     *\r\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-kx7rrw))\r\n     *\r\n     * ```typescript\r\n     * \\@Component({\r\n     *   selector: 'my-app',\r\n     *   template: `Number of ticks: {{numberOfTicks}}`\r\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\r\n     * })\r\n     * class AppComponent {\r\n     *   numberOfTicks = 0;\r\n     *\r\n     *   constructor(private ref: ChangeDetectorRef) {\r\n     *     setInterval(() => {\r\n     *       this.numberOfTicks++;\r\n     *       // the following is required, otherwise the view will not be updated\r\n     *       this.ref.markForCheck();\r\n     *     }, 1000);\r\n     *   }\r\n     * }\r\n     * ```\r\n     * @return {?}\r\n     */\r\n    function () { markViewDirty(this._view); };\r\n    /**\r\n     * Detaches the view from the change detection tree.\r\n     *\r\n     * Detached views will not be checked during change detection runs until they are\r\n     * re-attached, even if they are dirty. `detach` can be used in combination with\r\n     * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\r\n     * detection checks.\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\r\n     *\r\n     * ### Example\r\n     *\r\n     * The following example defines a component with a large list of readonly data.\r\n     * Imagine the data changes constantly, many times per second. For performance reasons,\r\n     * we want to check and update the list every five seconds. We can do that by detaching\r\n     * the component's change detector and doing a local check every five seconds.\r\n     *\r\n     * ```typescript\r\n     * class DataProvider {\r\n     *   // in a real application the returned data will be different every time\r\n     *   get data() {\r\n     *     return [1,2,3,4,5];\r\n     *   }\r\n     * }\r\n     *\r\n     * @Component({\r\n     *   selector: 'giant-list',\r\n     *   template: `\r\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\r\n     *   `,\r\n     * })\r\n     * class GiantList {\r\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\r\n     *     ref.detach();\r\n     *     setInterval(() => {\r\n     *       this.ref.detectChanges();\r\n     *     }, 5000);\r\n     *   }\r\n     * }\r\n     *\r\n     * @Component({\r\n     *   selector: 'app',\r\n     *   providers: [DataProvider],\r\n     *   template: `\r\n     *     <giant-list><giant-list>\r\n     *   `,\r\n     * })\r\n     * class App {\r\n     * }\r\n     * ```\r\n     */\r\n    /**\r\n     * Detaches the view from the change detection tree.\r\n     *\r\n     * Detached views will not be checked during change detection runs until they are\r\n     * re-attached, even if they are dirty. `detach` can be used in combination with\r\n     * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\r\n     * detection checks.\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\r\n     *\r\n     * ### Example\r\n     *\r\n     * The following example defines a component with a large list of readonly data.\r\n     * Imagine the data changes constantly, many times per second. For performance reasons,\r\n     * we want to check and update the list every five seconds. We can do that by detaching\r\n     * the component's change detector and doing a local check every five seconds.\r\n     *\r\n     * ```typescript\r\n     * class DataProvider {\r\n     *   // in a real application the returned data will be different every time\r\n     *   get data() {\r\n     *     return [1,2,3,4,5];\r\n     *   }\r\n     * }\r\n     *\r\n     * \\@Component({\r\n     *   selector: 'giant-list',\r\n     *   template: `\r\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\r\n     *   `,\r\n     * })\r\n     * class GiantList {\r\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\r\n     *     ref.detach();\r\n     *     setInterval(() => {\r\n     *       this.ref.detectChanges();\r\n     *     }, 5000);\r\n     *   }\r\n     * }\r\n     *\r\n     * \\@Component({\r\n     *   selector: 'app',\r\n     *   providers: [DataProvider],\r\n     *   template: `\r\n     *     <giant-list><giant-list>\r\n     *   `,\r\n     * })\r\n     * class App {\r\n     * }\r\n     * ```\r\n     * @return {?}\r\n     */\r\n    ViewRef.prototype.detach = /**\r\n     * Detaches the view from the change detection tree.\r\n     *\r\n     * Detached views will not be checked during change detection runs until they are\r\n     * re-attached, even if they are dirty. `detach` can be used in combination with\r\n     * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\r\n     * detection checks.\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\r\n     *\r\n     * ### Example\r\n     *\r\n     * The following example defines a component with a large list of readonly data.\r\n     * Imagine the data changes constantly, many times per second. For performance reasons,\r\n     * we want to check and update the list every five seconds. We can do that by detaching\r\n     * the component's change detector and doing a local check every five seconds.\r\n     *\r\n     * ```typescript\r\n     * class DataProvider {\r\n     *   // in a real application the returned data will be different every time\r\n     *   get data() {\r\n     *     return [1,2,3,4,5];\r\n     *   }\r\n     * }\r\n     *\r\n     * \\@Component({\r\n     *   selector: 'giant-list',\r\n     *   template: `\r\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\r\n     *   `,\r\n     * })\r\n     * class GiantList {\r\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\r\n     *     ref.detach();\r\n     *     setInterval(() => {\r\n     *       this.ref.detectChanges();\r\n     *     }, 5000);\r\n     *   }\r\n     * }\r\n     *\r\n     * \\@Component({\r\n     *   selector: 'app',\r\n     *   providers: [DataProvider],\r\n     *   template: `\r\n     *     <giant-list><giant-list>\r\n     *   `,\r\n     * })\r\n     * class App {\r\n     * }\r\n     * ```\r\n     * @return {?}\r\n     */\r\n    function () { this._view.flags &= ~8 /* Attached */; };\r\n    /**\r\n     * Re-attaches a view to the change detection tree.\r\n     *\r\n     * This can be used to re-attach views that were previously detached from the tree\r\n     * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n     *\r\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-ymgsxw))\r\n     *\r\n     * The following example creates a component displaying `live` data. The component will detach\r\n     * its change detector from the main change detector tree when the component's live property\r\n     * is set to false.\r\n     *\r\n     * ```typescript\r\n     * class DataProvider {\r\n     *   data = 1;\r\n     *\r\n     *   constructor() {\r\n     *     setInterval(() => {\r\n     *       this.data = this.data * 2;\r\n     *     }, 500);\r\n     *   }\r\n     * }\r\n     *\r\n     * @Component({\r\n     *   selector: 'live-data',\r\n     *   inputs: ['live'],\r\n     *   template: 'Data: {{dataProvider.data}}'\r\n     * })\r\n     * class LiveData {\r\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\r\n     *\r\n     *   set live(value) {\r\n     *     if (value) {\r\n     *       this.ref.reattach();\r\n     *     } else {\r\n     *       this.ref.detach();\r\n     *     }\r\n     *   }\r\n     * }\r\n     *\r\n     * @Component({\r\n     *   selector: 'my-app',\r\n     *   providers: [DataProvider],\r\n     *   template: `\r\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\r\n     *     <live-data [live]=\"live\"><live-data>\r\n     *   `,\r\n     * })\r\n     * class AppComponent {\r\n     *   live = true;\r\n     * }\r\n     * ```\r\n     */\r\n    /**\r\n     * Re-attaches a view to the change detection tree.\r\n     *\r\n     * This can be used to re-attach views that were previously detached from the tree\r\n     * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n     *\r\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-ymgsxw))\r\n     *\r\n     * The following example creates a component displaying `live` data. The component will detach\r\n     * its change detector from the main change detector tree when the component's live property\r\n     * is set to false.\r\n     *\r\n     * ```typescript\r\n     * class DataProvider {\r\n     *   data = 1;\r\n     *\r\n     *   constructor() {\r\n     *     setInterval(() => {\r\n     *       this.data = this.data * 2;\r\n     *     }, 500);\r\n     *   }\r\n     * }\r\n     *\r\n     * \\@Component({\r\n     *   selector: 'live-data',\r\n     *   inputs: ['live'],\r\n     *   template: 'Data: {{dataProvider.data}}'\r\n     * })\r\n     * class LiveData {\r\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\r\n     *\r\n     *   set live(value) {\r\n     *     if (value) {\r\n     *       this.ref.reattach();\r\n     *     } else {\r\n     *       this.ref.detach();\r\n     *     }\r\n     *   }\r\n     * }\r\n     *\r\n     * \\@Component({\r\n     *   selector: 'my-app',\r\n     *   providers: [DataProvider],\r\n     *   template: `\r\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\r\n     *     <live-data [live]=\"live\"><live-data>\r\n     *   `,\r\n     * })\r\n     * class AppComponent {\r\n     *   live = true;\r\n     * }\r\n     * ```\r\n     * @return {?}\r\n     */\r\n    ViewRef.prototype.reattach = /**\r\n     * Re-attaches a view to the change detection tree.\r\n     *\r\n     * This can be used to re-attach views that were previously detached from the tree\r\n     * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n     *\r\n     * ### Example ([live demo](https://stackblitz.com/edit/angular-ymgsxw))\r\n     *\r\n     * The following example creates a component displaying `live` data. The component will detach\r\n     * its change detector from the main change detector tree when the component's live property\r\n     * is set to false.\r\n     *\r\n     * ```typescript\r\n     * class DataProvider {\r\n     *   data = 1;\r\n     *\r\n     *   constructor() {\r\n     *     setInterval(() => {\r\n     *       this.data = this.data * 2;\r\n     *     }, 500);\r\n     *   }\r\n     * }\r\n     *\r\n     * \\@Component({\r\n     *   selector: 'live-data',\r\n     *   inputs: ['live'],\r\n     *   template: 'Data: {{dataProvider.data}}'\r\n     * })\r\n     * class LiveData {\r\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\r\n     *\r\n     *   set live(value) {\r\n     *     if (value) {\r\n     *       this.ref.reattach();\r\n     *     } else {\r\n     *       this.ref.detach();\r\n     *     }\r\n     *   }\r\n     * }\r\n     *\r\n     * \\@Component({\r\n     *   selector: 'my-app',\r\n     *   providers: [DataProvider],\r\n     *   template: `\r\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\r\n     *     <live-data [live]=\"live\"><live-data>\r\n     *   `,\r\n     * })\r\n     * class AppComponent {\r\n     *   live = true;\r\n     * }\r\n     * ```\r\n     * @return {?}\r\n     */\r\n    function () { this._view.flags |= 8 /* Attached */; };\r\n    /**\r\n     * Checks the view and its children.\r\n     *\r\n     * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\r\n     * local change detection checks.\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\r\n     *\r\n     * ### Example\r\n     *\r\n     * The following example defines a component with a large list of readonly data.\r\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\r\n     * we want to check and update the list every five seconds.\r\n     *\r\n     * We can do that by detaching the component's change detector and doing a local change detection\r\n     * check every five seconds.\r\n     *\r\n     * See {@link ChangeDetectorRef#detach detach} for more information.\r\n     */\r\n    /**\r\n     * Checks the view and its children.\r\n     *\r\n     * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\r\n     * local change detection checks.\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\r\n     *\r\n     * ### Example\r\n     *\r\n     * The following example defines a component with a large list of readonly data.\r\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\r\n     * we want to check and update the list every five seconds.\r\n     *\r\n     * We can do that by detaching the component's change detector and doing a local change detection\r\n     * check every five seconds.\r\n     *\r\n     * See {\\@link ChangeDetectorRef#detach detach} for more information.\r\n     * @return {?}\r\n     */\r\n    ViewRef.prototype.detectChanges = /**\r\n     * Checks the view and its children.\r\n     *\r\n     * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\r\n     * local change detection checks.\r\n     *\r\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\r\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\r\n     *\r\n     * ### Example\r\n     *\r\n     * The following example defines a component with a large list of readonly data.\r\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\r\n     * we want to check and update the list every five seconds.\r\n     *\r\n     * We can do that by detaching the component's change detector and doing a local change detection\r\n     * check every five seconds.\r\n     *\r\n     * See {\\@link ChangeDetectorRef#detach detach} for more information.\r\n     * @return {?}\r\n     */\r\n    function () { detectChanges(this.context); };\r\n    /**\r\n     * Checks the change detector and its children, and throws if any changes are detected.\r\n     *\r\n     * This is used in development mode to verify that running change detection doesn't\r\n     * introduce other changes.\r\n     */\r\n    /**\r\n     * Checks the change detector and its children, and throws if any changes are detected.\r\n     *\r\n     * This is used in development mode to verify that running change detection doesn't\r\n     * introduce other changes.\r\n     * @return {?}\r\n     */\r\n    ViewRef.prototype.checkNoChanges = /**\r\n     * Checks the change detector and its children, and throws if any changes are detected.\r\n     *\r\n     * This is used in development mode to verify that running change detection doesn't\r\n     * introduce other changes.\r\n     * @return {?}\r\n     */\r\n    function () { checkNoChanges(this.context); };\r\n    return ViewRef;\r\n}());\r\n/**\r\n * @template T\r\n */\r\nvar EmbeddedViewRef$1 = /** @class */ (function (_super) {\r\n    __extends(EmbeddedViewRef, _super);\r\n    function EmbeddedViewRef(viewNode, template, context) {\r\n        var _this = _super.call(this, viewNode.data, context) || this;\r\n        _this._lViewNode = viewNode;\r\n        return _this;\r\n    }\r\n    return EmbeddedViewRef;\r\n}(ViewRef$1));\r\n/**\r\n * Creates a ViewRef bundled with destroy functionality.\r\n *\r\n * @template T\r\n * @param {?} view\r\n * @param {?} context The context for this view\r\n * @return {?} The ViewRef\r\n */\r\nfunction createViewRef(view, context) {\r\n    // TODO: add detectChanges back in when implementing ChangeDetectorRef.detectChanges\r\n    return addDestroyable(new ViewRef$1(/** @type {?} */ ((view)), context));\r\n}\r\n/**\r\n * Interface for destroy logic. Implemented by addDestroyable.\r\n * @record\r\n * @template T\r\n */\r\n\r\n/**\r\n * Decorates an object with destroy logic (implementing the DestroyRef interface)\r\n * and returns the enhanced object.\r\n *\r\n * @template T, C\r\n * @param {?} obj The object to decorate\r\n * @return {?} The object with destroy logic\r\n */\r\nfunction addDestroyable(obj) {\r\n    var /** @type {?} */ destroyFn = null;\r\n    obj.destroyed = false;\r\n    obj.destroy = function () {\r\n        destroyFn && destroyFn.forEach(function (fn) { return fn(); });\r\n        this.destroyed = true;\r\n    };\r\n    obj.onDestroy = function (fn) { return (destroyFn || (destroyFn = [])).push(fn); };\r\n    return obj;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Options that control how the component should be bootstrapped.\r\n * @record\r\n */\r\n\r\n/**\r\n * Bootstraps a component, then creates and returns a `ComponentRef` for that component.\r\n *\r\n * @template T\r\n * @param {?} componentType Component to bootstrap\r\n * @param {?} opts\r\n * @return {?}\r\n */\r\n\r\n// TODO: A hack to not pull in the NullInjector from @angular/core.\r\n\r\n/**\r\n * Bootstraps a Component into an existing host element and returns an instance\r\n * of the component.\r\n *\r\n * Use this function to bootstrap a component into the DOM tree. Each invocation\r\n * of this function will create a separate tree of components, injectors and\r\n * change detection cycles and lifetimes. To dynamically insert a new component\r\n * into an existing tree such that it shares the same injection, change detection\r\n * and object lifetime, use {\\@link ViewContainer#createComponent}.\r\n *\r\n * @template T\r\n * @param {?} componentType Component to bootstrap\r\n * @param {?=} opts\r\n * @return {?}\r\n */\r\nfunction renderComponent(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts) {\r\n    if (opts === void 0) { opts = {}; }\r\n    ngDevMode && assertComponentType(componentType);\r\n    var /** @type {?} */ rendererFactory = opts.rendererFactory || domRendererFactory3;\r\n    var /** @type {?} */ componentDef = /** @type {?} */ ((/** @type {?} */ (componentType)).ngComponentDef);\r\n    if (componentDef.type != componentType)\r\n        componentDef.type = componentType;\r\n    var /** @type {?} */ component;\r\n    // TODO: Replace when flattening CssSelector type\r\n    var /** @type {?} */ componentTag = /** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((componentDef.selector))[0]))[0]))[0];\r\n    var /** @type {?} */ hostNode = locateHostElement(rendererFactory, opts.host || componentTag);\r\n    var /** @type {?} */ rootContext = {\r\n        // Incomplete initialization due to circular reference.\r\n        component: /** @type {?} */ ((null)),\r\n        scheduler: opts.scheduler || requestAnimationFrame,\r\n        clean: CLEAN_PROMISE,\r\n    };\r\n    var /** @type {?} */ rootView = createLView(-1, rendererFactory.createRenderer(hostNode, componentDef.rendererType), createTView(null, null), null, rootContext, componentDef.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */);\r\n    var /** @type {?} */ oldView = enterView(rootView, /** @type {?} */ ((null)));\r\n    var /** @type {?} */ elementNode;\r\n    try {\r\n        if (rendererFactory.begin)\r\n            rendererFactory.begin();\r\n        // Create element node at index 0 in data array\r\n        elementNode = hostElement(componentTag, hostNode, componentDef);\r\n        // Create directive instance with factory() and store at index 0 in directives array\r\n        component = rootContext.component = /** @type {?} */ (baseDirectiveCreate(0, componentDef.factory(), componentDef));\r\n        initChangeDetectorIfExisting(elementNode.nodeInjector, component, /** @type {?} */ ((elementNode.data)));\r\n        opts.hostFeatures && opts.hostFeatures.forEach(function (feature) { return feature(component, componentDef); });\r\n        executeInitAndContentHooks();\r\n        setHostBindings(ROOT_DIRECTIVE_INDICES);\r\n        detectChangesInternal(/** @type {?} */ (elementNode.data), elementNode, componentDef, component);\r\n    }\r\n    finally {\r\n        leaveView(oldView);\r\n        if (rendererFactory.end)\r\n            rendererFactory.end();\r\n    }\r\n    return component;\r\n}\r\n/**\r\n * Used to enable lifecycle hooks on the root component.\r\n *\r\n * Include this feature when calling `renderComponent` if the root component\r\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\r\n * be called properly.\r\n *\r\n * Example:\r\n *\r\n * ```\r\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\r\n * ```\r\n * @param {?} component\r\n * @param {?} def\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * Retrieve the host element of the component.\r\n *\r\n * Use this function to retrieve the host element of the component. The host\r\n * element is the element which the component is associated with.\r\n *\r\n * @template T\r\n * @param {?} component Component for which the host element should be retrieved.\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * Retrieves the rendered text for a given component.\r\n *\r\n * This function retrieves the host element of a component and\r\n * and then returns the `textContent` for that element. This implies\r\n * that the text returned will include re-projected content of\r\n * the component as well.\r\n *\r\n * @param {?} component The component to return the content text for.\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * Wait on component until it is rendered.\r\n *\r\n * This function returns a `Promise` which is resolved when the component's\r\n * change detection is executed. This is determined by finding the scheduler\r\n * associated with the `component`'s render tree and waiting until the scheduler\r\n * flushes. If nothing is scheduled, the function returns a resolved promise.\r\n *\r\n * Example:\r\n * ```\r\n * await whenRendered(myComponent);\r\n * ```\r\n *\r\n * @param {?} component Component to wait upon\r\n * @return {?} Promise which resolves when the component is rendered.\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * If a directive is diPublic, bloomAdd sets a property on the instance with this constant as\r\n * the key and the directive's unique ID as the value. This allows us to map directives to their\r\n * bloom filter bit for DI.\r\n */\r\nvar NG_ELEMENT_ID = '__NG_ELEMENT_ID__';\r\n/**\r\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\r\n * directives that will share slots, and thus, the fewer false positives when checking for\r\n * the existence of a directive.\r\n */\r\nvar BLOOM_SIZE = 256;\r\n/**\r\n * Counter used to generate unique IDs for directives.\r\n */\r\nvar nextNgElementId = 0;\r\n/**\r\n * Registers this directive as present in its node's injector by flipping the directive's\r\n * corresponding bit in the injector's bloom filter.\r\n *\r\n * @param {?} injector The node injector in which the directive should be registered\r\n * @param {?} type The directive to register\r\n * @return {?}\r\n */\r\nfunction bloomAdd(injector, type) {\r\n    var /** @type {?} */ id = (/** @type {?} */ (type))[NG_ELEMENT_ID];\r\n    // Set a unique ID on the directive type, so if something tries to inject the directive,\r\n    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\r\n    if (id == null) {\r\n        id = (/** @type {?} */ (type))[NG_ELEMENT_ID] = nextNgElementId++;\r\n    }\r\n    // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\r\n    // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\r\n    // This means that after 255, some directives will share slots, leading to some false positives\r\n    // when checking for a directive's presence.\r\n    var /** @type {?} */ bloomBit = id % BLOOM_SIZE;\r\n    // Create a mask that targets the specific bit associated with the directive.\r\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\r\n    // to bit positions 0 - 31 in a 32 bit integer.\r\n    var /** @type {?} */ mask = 1 << bloomBit;\r\n    // Use the raw bloomBit number to determine which bloom filter bucket we should check\r\n    // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc\r\n    if (bloomBit < 128) {\r\n        // Then use the mask to flip on the bit (0-31) associated with the directive in that bucket\r\n        bloomBit < 64 ? (bloomBit < 32 ? (injector.bf0 |= mask) : (injector.bf1 |= mask)) :\r\n            (bloomBit < 96 ? (injector.bf2 |= mask) : (injector.bf3 |= mask));\r\n    }\r\n    else {\r\n        bloomBit < 192 ? (bloomBit < 160 ? (injector.bf4 |= mask) : (injector.bf5 |= mask)) :\r\n            (bloomBit < 224 ? (injector.bf6 |= mask) : (injector.bf7 |= mask));\r\n    }\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction getOrCreateNodeInjector() {\r\n    ngDevMode && assertPreviousIsParent();\r\n    return getOrCreateNodeInjectorForNode(/** @type {?} */ (getPreviousOrParentNode()));\r\n}\r\n/**\r\n * Creates (or gets an existing) injector for a given element or container.\r\n *\r\n * @param {?} node for which an injector should be retrieved / created.\r\n * @return {?} Node injector\r\n */\r\nfunction getOrCreateNodeInjectorForNode(node) {\r\n    var /** @type {?} */ nodeInjector = node.nodeInjector;\r\n    var /** @type {?} */ parentInjector = node.parent && node.parent.nodeInjector;\r\n    if (nodeInjector != parentInjector) {\r\n        return /** @type {?} */ ((nodeInjector));\r\n    }\r\n    return node.nodeInjector = {\r\n        parent: parentInjector,\r\n        node: node,\r\n        bf0: 0,\r\n        bf1: 0,\r\n        bf2: 0,\r\n        bf3: 0,\r\n        bf4: 0,\r\n        bf5: 0,\r\n        bf6: 0,\r\n        bf7: 0,\r\n        cbf0: parentInjector == null ? 0 : parentInjector.cbf0 | parentInjector.bf0,\r\n        cbf1: parentInjector == null ? 0 : parentInjector.cbf1 | parentInjector.bf1,\r\n        cbf2: parentInjector == null ? 0 : parentInjector.cbf2 | parentInjector.bf2,\r\n        cbf3: parentInjector == null ? 0 : parentInjector.cbf3 | parentInjector.bf3,\r\n        cbf4: parentInjector == null ? 0 : parentInjector.cbf4 | parentInjector.bf4,\r\n        cbf5: parentInjector == null ? 0 : parentInjector.cbf5 | parentInjector.bf5,\r\n        cbf6: parentInjector == null ? 0 : parentInjector.cbf6 | parentInjector.bf6,\r\n        cbf7: parentInjector == null ? 0 : parentInjector.cbf7 | parentInjector.bf7,\r\n        injector: null,\r\n        templateRef: null,\r\n        viewContainerRef: null,\r\n        elementRef: null,\r\n        changeDetectorRef: null\r\n    };\r\n}\r\n/**\r\n * Constructs an injection error with the given text and token.\r\n *\r\n * @param {?} text The text of the error\r\n * @param {?} token The token associated with the error\r\n * @return {?} The error that was created\r\n */\r\nfunction createInjectionError(text$$1, token) {\r\n    return new Error(\"ElementInjector: \" + text$$1 + \" [\" + stringify$1(token) + \"]\");\r\n}\r\n/**\r\n * Makes a directive public to the DI system by adding it to an injector's bloom filter.\r\n *\r\n * @param {?} di The node injector in which a directive will be added\r\n * @param {?} def The definition of the directive to be made public\r\n * @return {?}\r\n */\r\nfunction diPublicInInjector(di, def) {\r\n    bloomAdd(di, def.type);\r\n}\r\n/**\r\n * Makes a directive public to the DI system by adding it to an injector's bloom filter.\r\n *\r\n * @param {?} def The definition of the directive to be made public\r\n * @return {?}\r\n */\r\nfunction diPublic(def) {\r\n    diPublicInInjector(getOrCreateNodeInjector(), def);\r\n}\r\n/**\r\n * Searches for an instance of the given type up the injector tree and returns\r\n * that instance if found.\r\n *\r\n * If not found, it will propagate up to the next parent injector until the token\r\n * is found or the top is reached.\r\n *\r\n * Usage example (in factory function):\r\n *\r\n * class SomeDirective {\r\n *   constructor(directive: DirectiveA) {}\r\n *\r\n *   static ngDirectiveDef = defineDirective({\r\n *     type: SomeDirective,\r\n *     factory: () => new SomeDirective(directiveInject(DirectiveA))\r\n *   });\r\n * }\r\n *\r\n * NOTE: use `directiveInject` with `\\@Directive`, `\\@Component`, and `\\@Pipe`. For\r\n * all other injection use `inject` which does not walk the DOM render tree.\r\n *\r\n * @template T\r\n * @param {?} token The directive type to search for\r\n * @param {?=} flags Injection flags (e.g. CheckParent)\r\n * @param {?=} defaultValue\r\n * @return {?} The instance found\r\n */\r\nfunction directiveInject(token, flags, defaultValue) {\r\n    return getOrCreateInjectable(getOrCreateNodeInjector(), token, flags, defaultValue);\r\n}\r\n/**\r\n * Creates an ElementRef and stores it on the injector.\r\n * Or, if the ElementRef already exists, retrieves the existing ElementRef.\r\n *\r\n * @return {?} The ElementRef instance to use\r\n */\r\n\r\n/**\r\n * Creates a TemplateRef and stores it on the injector. Or, if the TemplateRef already\r\n * exists, retrieves the existing TemplateRef.\r\n *\r\n * @template T\r\n * @return {?} The TemplateRef instance to use\r\n */\r\nfunction injectTemplateRef() {\r\n    return getOrCreateTemplateRef(getOrCreateNodeInjector());\r\n}\r\n/**\r\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\r\n * already exists, retrieves the existing ViewContainerRef.\r\n *\r\n * @return {?} The ViewContainerRef instance to use\r\n */\r\nfunction injectViewContainerRef() {\r\n    return getOrCreateContainerRef(getOrCreateNodeInjector());\r\n}\r\n/**\r\n * Returns a ChangeDetectorRef (a.k.a. a ViewRef)\r\n * @return {?}\r\n */\r\nfunction injectChangeDetectorRef() {\r\n    return getOrCreateChangeDetectorRef(getOrCreateNodeInjector(), null);\r\n}\r\n/**\r\n * Inject static attribute value into directive constructor.\r\n *\r\n * This method is used with `factory` functions which are generated as part of\r\n * `defineDirective` or `defineComponent`. The method retrieves the static value\r\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\r\n *  at the time of injection and can change over time.)\r\n *\r\n * # Example\r\n * Given:\r\n * ```\r\n * \\@Component(...)\r\n * class MyComponent {\r\n *   constructor(\\@Attribute('title') title: string) { ... }\r\n * }\r\n * ```\r\n * When instantiated with\r\n * ```\r\n * <my-component title=\"Hello\"></my-component>\r\n * ```\r\n *\r\n * Then factory method generated is:\r\n * ```\r\n * MyComponent.ngComponentDef = defineComponent({\r\n *   factory: () => new MyComponent(injectAttribute('title'))\r\n *   ...\r\n * })\r\n * ```\r\n *\r\n * \\@experimental\r\n * @param {?} attrName\r\n * @return {?}\r\n */\r\nfunction injectAttribute(attrName) {\r\n    ngDevMode && assertPreviousIsParent();\r\n    var /** @type {?} */ lElement = /** @type {?} */ (getPreviousOrParentNode());\r\n    ngDevMode && assertNodeType(lElement, 3 /* Element */);\r\n    var /** @type {?} */ tElement = /** @type {?} */ ((lElement.tNode));\r\n    ngDevMode && assertNotNull(tElement, 'expecting tNode');\r\n    var /** @type {?} */ attrs = tElement.attrs;\r\n    if (attrs) {\r\n        for (var /** @type {?} */ i = 0; i < attrs.length; i = i + 2) {\r\n            if (attrs[i] == attrName) {\r\n                return attrs[i + 1];\r\n            }\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\r\n * Or, if it already exists, retrieves the existing instance.\r\n *\r\n * @param {?} di\r\n * @param {?} context\r\n * @return {?} The ChangeDetectorRef to use\r\n */\r\nfunction getOrCreateChangeDetectorRef(di, context) {\r\n    if (di.changeDetectorRef)\r\n        return di.changeDetectorRef;\r\n    var /** @type {?} */ currentNode = di.node;\r\n    if (isComponent(/** @type {?} */ ((currentNode.tNode)))) {\r\n        return di.changeDetectorRef = createViewRef(/** @type {?} */ (currentNode.data), context);\r\n    }\r\n    else if (currentNode.type === 3 /* Element */) {\r\n        return di.changeDetectorRef = getOrCreateHostChangeDetector(currentNode.view.node);\r\n    }\r\n    return /** @type {?} */ ((null));\r\n}\r\n/**\r\n * Gets or creates ChangeDetectorRef for the closest host component\r\n * @param {?} currentNode\r\n * @return {?}\r\n */\r\nfunction getOrCreateHostChangeDetector(currentNode) {\r\n    var /** @type {?} */ hostNode = getClosestComponentAncestor(currentNode);\r\n    var /** @type {?} */ hostInjector = hostNode.nodeInjector;\r\n    var /** @type {?} */ existingRef = hostInjector && hostInjector.changeDetectorRef;\r\n    return existingRef ?\r\n        existingRef :\r\n        createViewRef(/** @type {?} */ (hostNode.data), /** @type {?} */ ((hostNode.view.directives))[/** @type {?} */ ((hostNode.tNode)).flags >> 13 /* INDX_SHIFT */]);\r\n}\r\n/**\r\n * If the node is an embedded view, traverses up the view tree to return the closest\r\n * ancestor view that is attached to a component. If it's already a component node,\r\n * returns itself.\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction getClosestComponentAncestor(node) {\r\n    while (node.type === 2 /* View */) {\r\n        node = node.view.node;\r\n    }\r\n    return /** @type {?} */ (node);\r\n}\r\n/**\r\n * Searches for an instance of the given directive type up the injector tree and returns\r\n * that instance if found.\r\n *\r\n * Specifically, it gets the bloom filter bit associated with the directive (see bloomHashBit),\r\n * checks that bit against the bloom filter structure to identify an injector that might have\r\n * the directive (see bloomFindPossibleInjector), then searches the directives on that injector\r\n * for a match.\r\n *\r\n * If not found, it will propagate up to the next parent injector until the token\r\n * is found or the top is reached.\r\n *\r\n * @template T\r\n * @param {?} di Node injector where the search should start\r\n * @param {?} token The directive type to search for\r\n * @param {?=} flags Injection flags (e.g. CheckParent)\r\n * @param {?=} defaultValue\r\n * @return {?} The instance found\r\n */\r\nfunction getOrCreateInjectable(di, token, flags, defaultValue) {\r\n    var /** @type {?} */ bloomHash = bloomHashBit(token);\r\n    // If the token has a bloom hash, then it is a directive that is public to the injection system\r\n    // (diPublic). If there is no hash, fall back to the module injector.\r\n    if (bloomHash === null) {\r\n        var /** @type {?} */ moduleInjector = di.injector;\r\n        if (!moduleInjector) {\r\n            if (defaultValue != null) {\r\n                return defaultValue;\r\n            }\r\n            throw createInjectionError('NotFound', token);\r\n        }\r\n        moduleInjector.get(token);\r\n    }\r\n    else {\r\n        var /** @type {?} */ injector = di;\r\n        while (injector) {\r\n            // Get the closest potential matching injector (upwards in the injector tree) that\r\n            // *potentially* has the token.\r\n            injector = bloomFindPossibleInjector(injector, bloomHash);\r\n            // If no injector is found, we *know* that there is no ancestor injector that contains the\r\n            // token, so we abort.\r\n            if (!injector) {\r\n                break;\r\n            }\r\n            // At this point, we have an injector which *may* contain the token, so we step through the\r\n            // directives associated with the injector's corresponding node to get the directive instance.\r\n            var /** @type {?} */ node = injector.node;\r\n            // The size of the node's directive's list is stored in certain bits of the node's flags,\r\n            // so exact it with a mask and shift it back such that the bits reflect the real value.\r\n            var /** @type {?} */ flags_1 = /** @type {?} */ ((node.tNode)).flags;\r\n            var /** @type {?} */ size = (flags_1 & 8190 /* SIZE_MASK */) >> 1;\r\n            if (size !== 0) {\r\n                // The start index of the directives list is also part of the node's flags, but there is\r\n                // nothing to the \"left\" of it so it doesn't need a mask.\r\n                var /** @type {?} */ start = flags_1 >> 13;\r\n                var /** @type {?} */ defs = /** @type {?} */ ((node.view.tView.directives));\r\n                for (var /** @type {?} */ i = start, /** @type {?} */ ii = start + size; i < ii; i++) {\r\n                    // Get the definition for the directive at this index and, if it is injectable (diPublic),\r\n                    // and matches the given token, return the directive instance.\r\n                    var /** @type {?} */ directiveDef = /** @type {?} */ (defs[i]);\r\n                    if (directiveDef.diPublic && directiveDef.type == token) {\r\n                        return getDirectiveInstance(/** @type {?} */ ((node.view.directives))[i]);\r\n                    }\r\n                }\r\n            }\r\n            // If we *didn't* find the directive for the token from the candidate injector, we had a false\r\n            // positive. Traverse up the tree and continue.\r\n            injector = injector.parent;\r\n        }\r\n    }\r\n    // No directive was found for the given token.\r\n    // TODO: implement optional, check-self, and check-parent.\r\n    throw createInjectionError('Not found', token);\r\n}\r\n/**\r\n * Given a directive type, this function returns the bit in an injector's bloom filter\r\n * that should be used to determine whether or not the directive is present.\r\n *\r\n * When the directive was added to the bloom filter, it was given a unique ID that can be\r\n * retrieved on the class. Since there are only BLOOM_SIZE slots per bloom filter, the directive's\r\n * ID must be modulo-ed by BLOOM_SIZE to get the correct bloom bit (directives share slots after\r\n * BLOOM_SIZE is reached).\r\n *\r\n * @param {?} type The directive type\r\n * @return {?} The bloom bit to check for the directive\r\n */\r\nfunction bloomHashBit(type) {\r\n    var /** @type {?} */ id = (/** @type {?} */ (type))[NG_ELEMENT_ID];\r\n    return typeof id === 'number' ? id % BLOOM_SIZE : null;\r\n}\r\n/**\r\n * Finds the closest injector that might have a certain directive.\r\n *\r\n * Each directive corresponds to a bit in an injector's bloom filter. Given the bloom bit to\r\n * check and a starting injector, this function traverses up injectors until it finds an\r\n * injector that contains a 1 for that bit in its bloom filter. A 1 indicates that the\r\n * injector may have that directive. It only *may* have the directive because directives begin\r\n * to share bloom filter bits after the BLOOM_SIZE is reached, and it could correspond to a\r\n * different directive sharing the bit.\r\n *\r\n * Note: We can skip checking further injectors up the tree if an injector's cbf structure\r\n * has a 0 for that bloom bit. Since cbf contains the merged value of all the parent\r\n * injectors, a 0 in the bloom bit indicates that the parents definitely do not contain\r\n * the directive and do not need to be checked.\r\n *\r\n * @param {?} startInjector\r\n * @param {?} bloomBit The bit to check in each injector's bloom filter\r\n * @return {?} An injector that might have the directive\r\n */\r\nfunction bloomFindPossibleInjector(startInjector, bloomBit) {\r\n    // Create a mask that targets the specific bit associated with the directive we're looking for.\r\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\r\n    // to bit positions 0 - 31 in a 32 bit integer.\r\n    var /** @type {?} */ mask = 1 << bloomBit;\r\n    // Traverse up the injector tree until we find a potential match or until we know there *isn't* a\r\n    // match.\r\n    var /** @type {?} */ injector = startInjector;\r\n    while (injector) {\r\n        // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:\r\n        // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.\r\n        // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.\r\n        var /** @type {?} */ value = void 0;\r\n        if (bloomBit < 128) {\r\n            value = bloomBit < 64 ? (bloomBit < 32 ? injector.bf0 : injector.bf1) :\r\n                (bloomBit < 96 ? injector.bf2 : injector.bf3);\r\n        }\r\n        else {\r\n            value = bloomBit < 192 ? (bloomBit < 160 ? injector.bf4 : injector.bf5) :\r\n                (bloomBit < 224 ? injector.bf6 : injector.bf7);\r\n        }\r\n        // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\r\n        // this injector is a potential match.\r\n        if ((value & mask) === mask) {\r\n            return injector;\r\n        }\r\n        // If the current injector does not have the directive, check the bloom filters for the ancestor\r\n        // injectors (cbf0 - cbf7). These filters capture *all* ancestor injectors.\r\n        if (bloomBit < 128) {\r\n            value = bloomBit < 64 ? (bloomBit < 32 ? injector.cbf0 : injector.cbf1) :\r\n                (bloomBit < 96 ? injector.cbf2 : injector.cbf3);\r\n        }\r\n        else {\r\n            value = bloomBit < 192 ? (bloomBit < 160 ? injector.cbf4 : injector.cbf5) :\r\n                (bloomBit < 224 ? injector.cbf6 : injector.cbf7);\r\n        }\r\n        // If the ancestor bloom filter value has the bit corresponding to the directive, traverse up to\r\n        // find the specific injector. If the ancestor bloom filter does not have the bit, we can abort.\r\n        injector = (value & mask) ? injector.parent : null;\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @template T\r\n */\r\nvar ReadFromInjectorFn = /** @class */ (function () {\r\n    function ReadFromInjectorFn(read) {\r\n        this.read = read;\r\n    }\r\n    return ReadFromInjectorFn;\r\n}());\r\n/**\r\n * Creates an ElementRef for a given node injector and stores it on the injector.\r\n * Or, if the ElementRef already exists, retrieves the existing ElementRef.\r\n *\r\n * @param {?} di The node injector where we should store a created ElementRef\r\n * @return {?} The ElementRef instance to use\r\n */\r\nfunction getOrCreateElementRef(di) {\r\n    return di.elementRef || (di.elementRef = new ElementRef$1(di.node.type === 0 /* Container */ ? null : di.node.native));\r\n}\r\nvar QUERY_READ_TEMPLATE_REF = /** @type {?} */ ((/** @type {?} */ (new ReadFromInjectorFn(function (injector) { return getOrCreateTemplateRef(injector); }))));\r\nvar QUERY_READ_CONTAINER_REF = /** @type {?} */ ((/** @type {?} */ (new ReadFromInjectorFn(function (injector) { return getOrCreateContainerRef(injector); }))));\r\nvar QUERY_READ_ELEMENT_REF = /** @type {?} */ ((/** @type {?} */ (new ReadFromInjectorFn(function (injector) { return getOrCreateElementRef(injector); }))));\r\nvar QUERY_READ_FROM_NODE = (/** @type {?} */ ((new ReadFromInjectorFn(function (injector, node, directiveIdx) {\r\n    ngDevMode && assertNodeOfPossibleTypes(node, 0 /* Container */, 3 /* Element */);\r\n    if (directiveIdx > -1) {\r\n        return /** @type {?} */ ((node.view.directives))[directiveIdx];\r\n    }\r\n    else if (node.type === 3 /* Element */) {\r\n        return getOrCreateElementRef(injector);\r\n    }\r\n    else if (node.type === 0 /* Container */) {\r\n        return getOrCreateTemplateRef(injector);\r\n    }\r\n    throw new Error('fail');\r\n}))));\r\n/**\r\n * A ref to a node's native element.\r\n */\r\nvar ElementRef$1 = /** @class */ (function () {\r\n    function ElementRef(nativeElement) {\r\n        this.nativeElement = nativeElement;\r\n    }\r\n    return ElementRef;\r\n}());\r\n/**\r\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\r\n * already exists, retrieves the existing ViewContainerRef.\r\n *\r\n * @param {?} di\r\n * @return {?} The ViewContainerRef instance to use\r\n */\r\nfunction getOrCreateContainerRef(di) {\r\n    return di.viewContainerRef ||\r\n        (di.viewContainerRef = new ViewContainerRef$1(/** @type {?} */ (di.node)));\r\n}\r\n/**\r\n * A ref to a container that enables adding and removing views from that container\r\n * imperatively.\r\n */\r\nvar ViewContainerRef$1 = /** @class */ (function () {\r\n    function ViewContainerRef(_node) {\r\n        this._node = _node;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ViewContainerRef.prototype.clear = /**\r\n     * @return {?}\r\n     */\r\n    function () { throw notImplemented(); };\r\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    ViewContainerRef.prototype.get = /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    function (index) { throw notImplemented(); };\r\n    /**\r\n     * @template C\r\n     * @param {?} templateRef\r\n     * @param {?=} context\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    ViewContainerRef.prototype.createEmbeddedView = /**\r\n     * @template C\r\n     * @param {?} templateRef\r\n     * @param {?=} context\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    function (templateRef, context, index) {\r\n        var /** @type {?} */ viewRef = templateRef.createEmbeddedView(/** @type {?} */ ((context)));\r\n        this.insert(viewRef, index);\r\n        return viewRef;\r\n    };\r\n    /**\r\n     * @template C\r\n     * @param {?} componentFactory\r\n     * @param {?=} index\r\n     * @param {?=} injector\r\n     * @param {?=} projectableNodes\r\n     * @param {?=} ngModule\r\n     * @return {?}\r\n     */\r\n    ViewContainerRef.prototype.createComponent = /**\r\n     * @template C\r\n     * @param {?} componentFactory\r\n     * @param {?=} index\r\n     * @param {?=} injector\r\n     * @param {?=} projectableNodes\r\n     * @param {?=} ngModule\r\n     * @return {?}\r\n     */\r\n    function (componentFactory, index, injector, projectableNodes, ngModule) {\r\n        throw notImplemented();\r\n    };\r\n    /**\r\n     * @param {?} viewRef\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    ViewContainerRef.prototype.insert = /**\r\n     * @param {?} viewRef\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    function (viewRef, index) {\r\n        if (index == null) {\r\n            index = this._node.data.views.length;\r\n        }\r\n        else {\r\n            // +1 because it's legal to insert at the end.\r\n            ngDevMode && assertLessThan(index, this._node.data.views.length + 1, 'index');\r\n        }\r\n        var /** @type {?} */ lView = (/** @type {?} */ (viewRef))._lViewNode;\r\n        insertView(this._node, lView, index);\r\n        // TODO(pk): this is a temporary index adjustment so imperativelly inserted (through\r\n        // ViewContainerRef) views\r\n        // are not removed in the containerRefreshEnd instruction.\r\n        // The final fix will consist of creating a dedicated container node for views inserted through\r\n        // ViewContainerRef.\r\n        // Such container should not be trimmed as it is the case in the containerRefreshEnd\r\n        // instruction.\r\n        this._node.data.nextIndex = this._node.data.views.length;\r\n        // If the view is dynamic (has a template), it needs to be counted both at the container\r\n        // level and at the node above the container.\r\n        if (lView.data.template !== null) {\r\n            // Increment the container view count.\r\n            this._node.data.dynamicViewCount++;\r\n            // Look for the parent node and increment its dynamic view count.\r\n            if (this._node.parent !== null && this._node.parent.data !== null) {\r\n                ngDevMode &&\r\n                    assertNodeOfPossibleTypes(this._node.parent, 2 /* View */, 3 /* Element */);\r\n                this._node.parent.data.dynamicViewCount++;\r\n            }\r\n        }\r\n        return viewRef;\r\n    };\r\n    /**\r\n     * @param {?} viewRef\r\n     * @param {?} currentIndex\r\n     * @return {?}\r\n     */\r\n    ViewContainerRef.prototype.move = /**\r\n     * @param {?} viewRef\r\n     * @param {?} currentIndex\r\n     * @return {?}\r\n     */\r\n    function (viewRef, currentIndex) {\r\n        throw notImplemented();\r\n    };\r\n    /**\r\n     * @param {?} viewRef\r\n     * @return {?}\r\n     */\r\n    ViewContainerRef.prototype.indexOf = /**\r\n     * @param {?} viewRef\r\n     * @return {?}\r\n     */\r\n    function (viewRef) { throw notImplemented(); };\r\n    /**\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    ViewContainerRef.prototype.remove = /**\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    function (index) { throw notImplemented(); };\r\n    /**\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    ViewContainerRef.prototype.detach = /**\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    function (index) { throw notImplemented(); };\r\n    return ViewContainerRef;\r\n}());\r\n/**\r\n * Creates a TemplateRef and stores it on the injector. Or, if the TemplateRef already\r\n * exists, retrieves the existing TemplateRef.\r\n *\r\n * @template T\r\n * @param {?} di The node injector where we should store a created TemplateRef\r\n * @return {?} The TemplateRef instance to use\r\n */\r\nfunction getOrCreateTemplateRef(di) {\r\n    ngDevMode && assertNodeType(di.node, 0 /* Container */);\r\n    var /** @type {?} */ data = (/** @type {?} */ (di.node)).data;\r\n    return di.templateRef || (di.templateRef = new TemplateRef$1(getOrCreateElementRef(di), /** @type {?} */ ((data.template)), getRenderer()));\r\n}\r\n/**\r\n * @template T\r\n */\r\nvar TemplateRef$1 = /** @class */ (function () {\r\n    function TemplateRef(elementRef, template, _renderer) {\r\n        this._renderer = _renderer;\r\n        this.elementRef = elementRef;\r\n        this._template = template;\r\n    }\r\n    /**\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    TemplateRef.prototype.createEmbeddedView = /**\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    function (context) {\r\n        var /** @type {?} */ viewNode = renderEmbeddedTemplate(null, this._template, context, this._renderer);\r\n        return addDestroyable(new EmbeddedViewRef$1(viewNode, this._template, context));\r\n    };\r\n    return TemplateRef;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Create a component definition object.\r\n *\r\n *\r\n * # Example\r\n * ```\r\n * class MyDirective {\r\n *   // Generated by Angular Template Compiler\r\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\r\n *   static ngComponentDef = defineComponent({\r\n *     ...\r\n *   });\r\n * }\r\n * ```\r\n * @template T\r\n * @param {?} componentDefinition\r\n * @return {?}\r\n */\r\nfunction defineComponent(componentDefinition) {\r\n    var /** @type {?} */ type = componentDefinition.type;\r\n    var /** @type {?} */ def = /** @type {?} */ ({\r\n        type: type,\r\n        diPublic: null,\r\n        factory: componentDefinition.factory,\r\n        template: componentDefinition.template || /** @type {?} */ ((null)),\r\n        hostBindings: componentDefinition.hostBindings || null,\r\n        attributes: componentDefinition.attributes || null,\r\n        inputs: invertObject(componentDefinition.inputs),\r\n        outputs: invertObject(componentDefinition.outputs),\r\n        rendererType: resolveRendererType2(componentDefinition.rendererType) || null,\r\n        exportAs: componentDefinition.exportAs,\r\n        onInit: type.prototype.ngOnInit || null,\r\n        doCheck: type.prototype.ngDoCheck || null,\r\n        afterContentInit: type.prototype.ngAfterContentInit || null,\r\n        afterContentChecked: type.prototype.ngAfterContentChecked || null,\r\n        afterViewInit: type.prototype.ngAfterViewInit || null,\r\n        afterViewChecked: type.prototype.ngAfterViewChecked || null,\r\n        onDestroy: type.prototype.ngOnDestroy || null,\r\n        onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\r\n        directiveDefs: componentDefinition.directiveDefs || null,\r\n        pipeDefs: componentDefinition.pipeDefs || null,\r\n        selector: componentDefinition.selector\r\n    });\r\n    var /** @type {?} */ feature = componentDefinition.features;\r\n    feature && feature.forEach(function (fn) { return fn(def); });\r\n    return def;\r\n}\r\nvar PRIVATE_PREFIX = '__ngOnChanges_';\r\n/**\r\n * Creates an NgOnChangesFeature function for a component's features list.\r\n *\r\n * It accepts an optional map of minified input property names to original property names,\r\n * if any input properties have a public alias.\r\n *\r\n * The NgOnChangesFeature function that is returned decorates a component with support for\r\n * the ngOnChanges lifecycle hook, so it should be included in any component that implements\r\n * that hook.\r\n *\r\n * Example usage:\r\n *\r\n * ```\r\n * static ngComponentDef = defineComponent({\r\n *   ...\r\n *   inputs: {name: 'publicName'},\r\n *   features: [NgOnChangesFeature({name: 'name'})]\r\n * });\r\n * ```\r\n *\r\n * @param {?=} inputPropertyNames Map of input property names, if they are aliased\r\n * @return {?} DirectiveDefFeature\r\n */\r\nfunction NgOnChangesFeature(inputPropertyNames) {\r\n    return function (definition) {\r\n        var /** @type {?} */ inputs = definition.inputs;\r\n        var /** @type {?} */ proto = definition.type.prototype;\r\n        // Place where we will store SimpleChanges if there is a change\r\n        Object.defineProperty(proto, PRIVATE_PREFIX, { value: undefined, writable: true });\r\n        var _loop_1 = function (pubKey) {\r\n            var /** @type {?} */ minKey = inputs[pubKey];\r\n            var /** @type {?} */ propertyName = inputPropertyNames && inputPropertyNames[minKey] || pubKey;\r\n            var /** @type {?} */ privateMinKey = PRIVATE_PREFIX + minKey;\r\n            // Create a place where the actual value will be stored and make it non-enumerable\r\n            Object.defineProperty(proto, privateMinKey, { value: undefined, writable: true });\r\n            var /** @type {?} */ existingDesc = Object.getOwnPropertyDescriptor(proto, minKey);\r\n            // create a getter and setter for property\r\n            Object.defineProperty(proto, minKey, {\r\n                get: function () {\r\n                    return (existingDesc && existingDesc.get) ? existingDesc.get.call(this) :\r\n                        this[privateMinKey];\r\n                },\r\n                set: function (value) {\r\n                    var /** @type {?} */ simpleChanges = this[PRIVATE_PREFIX];\r\n                    var /** @type {?} */ isFirstChange = simpleChanges === undefined;\r\n                    if (simpleChanges == null) {\r\n                        simpleChanges = this[PRIVATE_PREFIX] = {};\r\n                    }\r\n                    simpleChanges[propertyName] = new SimpleChange(this[privateMinKey], value, isFirstChange);\r\n                    (existingDesc && existingDesc.set) ? existingDesc.set.call(this, value) :\r\n                        this[privateMinKey] = value;\r\n                }\r\n            });\r\n        };\r\n        for (var /** @type {?} */ pubKey in inputs) {\r\n            _loop_1(pubKey);\r\n        }\r\n        // If an onInit hook is defined, it will need to wrap the ngOnChanges call\r\n        // so the call order is changes-init-check in creation mode. In subsequent\r\n        // change detection runs, only the check wrapper will be called.\r\n        if (definition.onInit != null) {\r\n            definition.onInit = onChangesWrapper(definition.onInit);\r\n        }\r\n        definition.doCheck = onChangesWrapper(definition.doCheck);\r\n    };\r\n    /**\r\n     * @param {?} delegateHook\r\n     * @return {?}\r\n     */\r\n    function onChangesWrapper(delegateHook) {\r\n        return function () {\r\n            var /** @type {?} */ simpleChanges = this[PRIVATE_PREFIX];\r\n            if (simpleChanges != null) {\r\n                this.ngOnChanges(simpleChanges);\r\n                this[PRIVATE_PREFIX] = null;\r\n            }\r\n            delegateHook && delegateHook.apply(this);\r\n        };\r\n    }\r\n}\r\n/**\r\n * @template T\r\n * @param {?} definition\r\n * @return {?}\r\n */\r\nfunction PublicFeature(definition) {\r\n    definition.diPublic = diPublic;\r\n}\r\nvar EMPTY$1 = {};\r\n/**\r\n * Swaps the keys and values of an object.\r\n * @param {?} obj\r\n * @return {?}\r\n */\r\nfunction invertObject(obj) {\r\n    if (obj == null)\r\n        return EMPTY$1;\r\n    var /** @type {?} */ newObj = {};\r\n    for (var /** @type {?} */ minifiedKey in obj) {\r\n        newObj[obj[minifiedKey]] = minifiedKey;\r\n    }\r\n    return newObj;\r\n}\r\n/**\r\n * Create a directive definition object.\r\n *\r\n * # Example\r\n * ```\r\n * class MyDirective {\r\n *   // Generated by Angular Template Compiler\r\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\r\n *   static ngDirectiveDef = defineDirective({\r\n *     ...\r\n *   });\r\n * }\r\n * ```\r\n */\r\nvar defineDirective = /** @type {?} */ ((defineComponent));\r\n/**\r\n * Create a pipe definition object.\r\n *\r\n * # Example\r\n * ```\r\n * class MyPipe implements PipeTransform {\r\n *   // Generated by Angular Template Compiler\r\n *   static ngPipeDef = definePipe({\r\n *     ...\r\n *   });\r\n * }\r\n * ```\r\n * @template T\r\n * @param {?} pipeDef Pipe definition generated by the compiler\r\n * @return {?}\r\n */\r\nfunction definePipe(pipeDef) {\r\n    return /** @type {?} */ ({\r\n        name: pipeDef.name,\r\n        n: pipeDef.factory,\r\n        pure: pipeDef.pure !== false,\r\n        onDestroy: pipeDef.type.prototype.ngOnDestroy || null\r\n    });\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * If the value hasn't been saved, calls the pure function to store and return the\r\n * value. If it has been saved, returns the saved value.\r\n *\r\n * @template T\r\n * @param {?} pureFn Function that returns a value\r\n * @param {?=} thisArg\r\n * @return {?} value\r\n */\r\nfunction pureFunction0(pureFn, thisArg) {\r\n    return getCreationMode() ? checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg) : pureFn()) :\r\n        consumeBinding();\r\n}\r\n/**\r\n * If the value of the provided exp has changed, calls the pure function to return\r\n * an updated value. Or if the value has not changed, returns cached value.\r\n *\r\n * @param {?} pureFn Function that returns an updated value\r\n * @param {?} exp Updated expression value\r\n * @param {?=} thisArg\r\n * @return {?} Updated value\r\n */\r\nfunction pureFunction1(pureFn, exp, thisArg) {\r\n    return bindingUpdated(exp) ?\r\n        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\r\n        consumeBinding();\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param {?} pureFn\r\n * @param {?} exp1\r\n * @param {?} exp2\r\n * @param {?=} thisArg\r\n * @return {?} Updated value\r\n */\r\nfunction pureFunction2(pureFn, exp1, exp2, thisArg) {\r\n    return bindingUpdated2(exp1, exp2) ?\r\n        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\r\n        consumeBinding();\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param {?} pureFn\r\n * @param {?} exp1\r\n * @param {?} exp2\r\n * @param {?} exp3\r\n * @param {?=} thisArg\r\n * @return {?} Updated value\r\n */\r\nfunction pureFunction3(pureFn, exp1, exp2, exp3, thisArg) {\r\n    var /** @type {?} */ different = bindingUpdated2(exp1, exp2);\r\n    return bindingUpdated(exp3) || different ?\r\n        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\r\n        consumeBinding();\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param {?} pureFn\r\n * @param {?} exp1\r\n * @param {?} exp2\r\n * @param {?} exp3\r\n * @param {?} exp4\r\n * @param {?=} thisArg\r\n * @return {?} Updated value\r\n */\r\nfunction pureFunction4(pureFn, exp1, exp2, exp3, exp4, thisArg) {\r\n    return bindingUpdated4(exp1, exp2, exp3, exp4) ?\r\n        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\r\n        consumeBinding();\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param {?} pureFn\r\n * @param {?} exp1\r\n * @param {?} exp2\r\n * @param {?} exp3\r\n * @param {?} exp4\r\n * @param {?} exp5\r\n * @param {?=} thisArg\r\n * @return {?} Updated value\r\n */\r\nfunction pureFunction5(pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\r\n    var /** @type {?} */ different = bindingUpdated4(exp1, exp2, exp3, exp4);\r\n    return bindingUpdated(exp5) || different ?\r\n        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\r\n            pureFn(exp1, exp2, exp3, exp4, exp5)) :\r\n        consumeBinding();\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param {?} pureFn\r\n * @param {?} exp1\r\n * @param {?} exp2\r\n * @param {?} exp3\r\n * @param {?} exp4\r\n * @param {?} exp5\r\n * @param {?} exp6\r\n * @param {?=} thisArg\r\n * @return {?} Updated value\r\n */\r\nfunction pureFunction6(pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\r\n    var /** @type {?} */ different = bindingUpdated4(exp1, exp2, exp3, exp4);\r\n    return bindingUpdated2(exp5, exp6) || different ?\r\n        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\r\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\r\n        consumeBinding();\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param {?} pureFn\r\n * @param {?} exp1\r\n * @param {?} exp2\r\n * @param {?} exp3\r\n * @param {?} exp4\r\n * @param {?} exp5\r\n * @param {?} exp6\r\n * @param {?} exp7\r\n * @param {?=} thisArg\r\n * @return {?} Updated value\r\n */\r\nfunction pureFunction7(pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\r\n    var /** @type {?} */ different = bindingUpdated4(exp1, exp2, exp3, exp4);\r\n    different = bindingUpdated2(exp5, exp6) || different;\r\n    return bindingUpdated(exp7) || different ?\r\n        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\r\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\r\n        consumeBinding();\r\n}\r\n/**\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param {?} pureFn\r\n * @param {?} exp1\r\n * @param {?} exp2\r\n * @param {?} exp3\r\n * @param {?} exp4\r\n * @param {?} exp5\r\n * @param {?} exp6\r\n * @param {?} exp7\r\n * @param {?} exp8\r\n * @param {?=} thisArg\r\n * @return {?} Updated value\r\n */\r\nfunction pureFunction8(pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\r\n    var /** @type {?} */ different = bindingUpdated4(exp1, exp2, exp3, exp4);\r\n    return bindingUpdated4(exp5, exp6, exp7, exp8) || different ?\r\n        checkAndUpdateBinding$1(thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\r\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\r\n        consumeBinding();\r\n}\r\n/**\r\n * pureFunction instruction that can support any number of bindings.\r\n *\r\n * If the value of any provided exp has changed, calls the pure function to return\r\n * an updated value. Or if no values have changed, returns cached value.\r\n *\r\n * @param {?} pureFn A pure function that takes binding values and builds an object or array\r\n * containing those values.\r\n * @param {?} exps\r\n * @param {?=} thisArg\r\n * @return {?} Updated value\r\n */\r\nfunction pureFunctionV(pureFn, exps, thisArg) {\r\n    var /** @type {?} */ different = false;\r\n    for (var /** @type {?} */ i = 0; i < exps.length; i++) {\r\n        bindingUpdated(exps[i]) && (different = true);\r\n    }\r\n    return different ? checkAndUpdateBinding$1(pureFn.apply(thisArg, exps)) : consumeBinding();\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Create a pipe.\r\n *\r\n * @param {?} index Pipe index where the pipe will be stored.\r\n * @param {?} pipeName\r\n * @param {?=} firstInstance (optional) The first instance of the pipe that can be reused for pure pipes.\r\n * @return {?} T the instance of the pipe.\r\n */\r\nfunction pipe(index, pipeName, firstInstance) {\r\n    var /** @type {?} */ tView = getTView();\r\n    var /** @type {?} */ pipeDef;\r\n    if (tView.firstTemplatePass) {\r\n        pipeDef = getPipeDef(pipeName, tView.pipeRegistry);\r\n        tView.data[index] = pipeDef;\r\n        if (pipeDef.onDestroy) {\r\n            (tView.pipeDestroyHooks || (tView.pipeDestroyHooks = [])).push(index, pipeDef.onDestroy);\r\n        }\r\n    }\r\n    else {\r\n        pipeDef = /** @type {?} */ (tView.data[index]);\r\n    }\r\n    var /** @type {?} */ pipeInstance = pipeDef.pure && firstInstance ? firstInstance : pipeDef.n();\r\n    store(index, pipeInstance);\r\n    return pipeInstance;\r\n}\r\n/**\r\n * Searches the pipe registry for a pipe with the given name. If one is found,\r\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\r\n *\r\n * @param {?} name Name of pipe to resolve\r\n * @param {?} registry Full list of available pipes\r\n * @return {?} Matching PipeDef\r\n */\r\nfunction getPipeDef(name, registry) {\r\n    if (registry) {\r\n        for (var /** @type {?} */ i = 0; i < registry.length; i++) {\r\n            var /** @type {?} */ pipeDef = registry[i];\r\n            if (name === pipeDef.name) {\r\n                return pipeDef;\r\n            }\r\n        }\r\n    }\r\n    throw new Error(\"Pipe with name '\" + name + \"' not found!\");\r\n}\r\n/**\r\n * Invokes a pipe with 1 arguments.\r\n *\r\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param {?} index Pipe index where the pipe was stored on creation.\r\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\r\n * @return {?}\r\n */\r\nfunction pipeBind1(index, v1) {\r\n    var /** @type {?} */ pipeInstance = load(index);\r\n    return isPure(index) ? pureFunction1(pipeInstance.transform, v1, pipeInstance) :\r\n        pipeInstance.transform(v1);\r\n}\r\n/**\r\n * Invokes a pipe with 2 arguments.\r\n *\r\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param {?} index Pipe index where the pipe was stored on creation.\r\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\r\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\r\n * @return {?}\r\n */\r\nfunction pipeBind2(index, v1, v2) {\r\n    var /** @type {?} */ pipeInstance = load(index);\r\n    return isPure(index) ? pureFunction2(pipeInstance.transform, v1, v2, pipeInstance) :\r\n        pipeInstance.transform(v1, v2);\r\n}\r\n/**\r\n * Invokes a pipe with 3 arguments.\r\n *\r\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param {?} index Pipe index where the pipe was stored on creation.\r\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\r\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\r\n * @param {?} v3 4rd argument to {\\@link PipeTransform#transform}.\r\n * @return {?}\r\n */\r\nfunction pipeBind3(index, v1, v2, v3) {\r\n    var /** @type {?} */ pipeInstance = load(index);\r\n    return isPure(index) ? pureFunction3(pipeInstance.transform.bind(pipeInstance), v1, v2, v3) :\r\n        pipeInstance.transform(v1, v2, v3);\r\n}\r\n/**\r\n * Invokes a pipe with 4 arguments.\r\n *\r\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param {?} index Pipe index where the pipe was stored on creation.\r\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\r\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\r\n * @param {?} v3 3rd argument to {\\@link PipeTransform#transform}.\r\n * @param {?} v4 4th argument to {\\@link PipeTransform#transform}.\r\n * @return {?}\r\n */\r\nfunction pipeBind4(index, v1, v2, v3, v4) {\r\n    var /** @type {?} */ pipeInstance = load(index);\r\n    return isPure(index) ? pureFunction4(pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\r\n        pipeInstance.transform(v1, v2, v3, v4);\r\n}\r\n/**\r\n * Invokes a pipe with variable number of arguments.\r\n *\r\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\r\n * the pipe only when an input to the pipe changes.\r\n *\r\n * @param {?} index Pipe index where the pipe was stored on creation.\r\n * @param {?} values Array of arguments to pass to {\\@link PipeTransform#transform} method.\r\n * @return {?}\r\n */\r\nfunction pipeBindV(index, values) {\r\n    var /** @type {?} */ pipeInstance = load(index);\r\n    return isPure(index) ? pureFunctionV(pipeInstance.transform, values, pipeInstance) :\r\n        pipeInstance.transform.apply(pipeInstance, values);\r\n}\r\n/**\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction isPure(index) {\r\n    return (/** @type {?} */ (getTView().data[index])).pure;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A subclass of `Type` which has a static `ngComponentDef`:`ComponentDef` field making it\r\n * consumable for rendering.\r\n * @record\r\n * @template T\r\n */\r\n\r\n/**\r\n * A subclass of `Type` which has a static `ngDirectiveDef`:`DirectiveDef` field making it\r\n * consumable for rendering.\r\n * @record\r\n * @template T\r\n */\r\n\r\n/**\r\n * A subclass of `Type` which has a static `ngPipeDef`:`PipeDef` field making it\r\n * consumable for rendering.\r\n * @record\r\n * @template T\r\n */\r\n\r\n/**\r\n * Runtime link information for Directives.\r\n *\r\n * This is internal data structure used by the render to link\r\n * directives into templates.\r\n *\r\n * NOTE: Always use `defineDirective` function to create this object,\r\n * never create the object directly since the shape of this object\r\n * can change between versions.\r\n *\r\n * See: {\\@link defineDirective}\r\n * @record\r\n * @template T\r\n */\r\n\r\n/**\r\n * Runtime link information for Components.\r\n *\r\n * This is internal data structure used by the render to link\r\n * components into templates.\r\n *\r\n * NOTE: Always use `defineComponent` function to create this object,\r\n * never create the object directly since the shape of this object\r\n * can change between versions.\r\n *\r\n * See: {\\@link defineComponent}\r\n * @record\r\n * @template T\r\n */\r\n\r\n/**\r\n * Runtime link information for Pipes.\r\n *\r\n * This is internal data structure used by the renderer to link\r\n * pipes into templates.\r\n *\r\n * NOTE: Always use `definePipe` function to create this object,\r\n * never create the object directly since the shape of this object\r\n * can change between versions.\r\n *\r\n * See: {\\@link definePipe}\r\n * @record\r\n * @template T\r\n */\r\n\r\n// Note: This hack is necessary so we don't erroneously get a circular dependency\r\n// failure based on types.\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @record\r\n */\r\n\r\n// Note: This hack is necessary so we don't erroneously get a circular dependency\r\n// failure based on types.\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Used for tracking queries (e.g. ViewChild, ContentChild).\r\n * @record\r\n */\r\n\r\n// Note: This hack is necessary so we don't erroneously get a circular dependency\r\n// failure based on types.\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A predicate which determines if a given element/directive should be included in the query\r\n * results.\r\n * @record\r\n * @template T\r\n */\r\n\r\n/**\r\n * An object representing a query, which is a combination of:\r\n * - query predicate to determines if a given element/directive should be included in the query\r\n * - values collected based on a predicate\r\n * - `QueryList` to which collected values should be reported\r\n * @record\r\n * @template T\r\n */\r\n\r\nvar LQueries_ = /** @class */ (function () {\r\n    function LQueries_(deep) {\r\n        this.shallow = null;\r\n        this.deep = null;\r\n        this.deep = deep == null ? null : deep;\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} queryList\r\n     * @param {?} predicate\r\n     * @param {?=} descend\r\n     * @param {?=} read\r\n     * @return {?}\r\n     */\r\n    LQueries_.prototype.track = /**\r\n     * @template T\r\n     * @param {?} queryList\r\n     * @param {?} predicate\r\n     * @param {?=} descend\r\n     * @param {?=} read\r\n     * @return {?}\r\n     */\r\n    function (queryList, predicate, descend, read) {\r\n        // TODO(misko): This is not right. In case of inherited state, a calling track will incorrectly\r\n        // mutate parent.\r\n        if (descend) {\r\n            this.deep = createQuery$1(this.deep, queryList, predicate, read != null ? read : null);\r\n        }\r\n        else {\r\n            this.shallow = createQuery$1(this.shallow, queryList, predicate, read != null ? read : null);\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    LQueries_.prototype.child = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.deep === null) {\r\n            // if we don't have any deep queries then no need to track anything more.\r\n            return null;\r\n        }\r\n        if (this.shallow === null) {\r\n            // DeepQuery: We can reuse the current state if the child state would be same as current\r\n            // state.\r\n            return this;\r\n        }\r\n        else {\r\n            // We need to create new state\r\n            return new LQueries_(this.deep);\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    LQueries_.prototype.container = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var /** @type {?} */ result = null;\r\n        var /** @type {?} */ query = this.deep;\r\n        while (query) {\r\n            var /** @type {?} */ containerValues = []; // prepare room for views\r\n            query.values.push(containerValues);\r\n            var /** @type {?} */ clonedQuery = { next: null, list: query.list, predicate: query.predicate, values: containerValues };\r\n            clonedQuery.next = result;\r\n            result = clonedQuery;\r\n            query = query.next;\r\n        }\r\n        return result ? new LQueries_(result) : null;\r\n    };\r\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    LQueries_.prototype.enterView = /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    function (index) {\r\n        var /** @type {?} */ result = null;\r\n        var /** @type {?} */ query = this.deep;\r\n        while (query) {\r\n            var /** @type {?} */ viewValues = []; // prepare room for view nodes\r\n            query.values.splice(index, 0, viewValues);\r\n            var /** @type {?} */ clonedQuery = { next: null, list: query.list, predicate: query.predicate, values: viewValues };\r\n            clonedQuery.next = result;\r\n            result = clonedQuery;\r\n            query = query.next;\r\n        }\r\n        return result ? new LQueries_(result) : null;\r\n    };\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    LQueries_.prototype.addNode = /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    function (node) {\r\n        add(this.shallow, node);\r\n        add(this.deep, node);\r\n    };\r\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    LQueries_.prototype.removeView = /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    function (index) {\r\n        var /** @type {?} */ query = this.deep;\r\n        while (query) {\r\n            var /** @type {?} */ removed = query.values.splice(index, 1);\r\n            // mark a query as dirty only when removed view had matching modes\r\n            ngDevMode && assertEqual(removed.length, 1, 'removed.length');\r\n            if (removed[0].length) {\r\n                query.list.setDirty();\r\n            }\r\n            query = query.next;\r\n        }\r\n    };\r\n    return LQueries_;\r\n}());\r\n/**\r\n * Iterates over local names for a given node and returns directive index\r\n * (or -1 if a local name points to an element).\r\n *\r\n * @param {?} tNode static data of a node to check\r\n * @param {?} selector selector to match\r\n * @return {?} directive index, -1 or null if a selector didn't match any of the local names\r\n */\r\nfunction getIdxOfMatchingSelector(tNode, selector) {\r\n    var /** @type {?} */ localNames = tNode.localNames;\r\n    if (localNames) {\r\n        for (var /** @type {?} */ i = 0; i < localNames.length; i += 2) {\r\n            if (localNames[i] === selector) {\r\n                return /** @type {?} */ (localNames[i + 1]);\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Iterates over all the directives for a node and returns index of a directive for a given type.\r\n *\r\n * @param {?} node Node on which directives are present.\r\n * @param {?} type Type of a directive to look for.\r\n * @return {?} Index of a found directive or null when none found.\r\n */\r\nfunction geIdxOfMatchingDirective(node, type) {\r\n    var /** @type {?} */ defs = /** @type {?} */ ((node.view.tView.directives));\r\n    var /** @type {?} */ flags = /** @type {?} */ ((node.tNode)).flags;\r\n    var /** @type {?} */ size = (flags & 8190 /* SIZE_MASK */) >> 1;\r\n    for (var /** @type {?} */ i = flags >> 13 /* INDX_SHIFT */, /** @type {?} */ ii = i + size; i < ii; i++) {\r\n        var /** @type {?} */ def = /** @type {?} */ (defs[i]);\r\n        if (def.diPublic && def.type === type) {\r\n            return i;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @param {?} nodeInjector\r\n * @param {?} node\r\n * @param {?} read\r\n * @param {?} directiveIdx\r\n * @return {?}\r\n */\r\nfunction readFromNodeInjector(nodeInjector, node, read, directiveIdx) {\r\n    if (read instanceof ReadFromInjectorFn) {\r\n        return read.read(nodeInjector, node, directiveIdx);\r\n    }\r\n    else {\r\n        var /** @type {?} */ matchingIdx = geIdxOfMatchingDirective(node, /** @type {?} */ (read));\r\n        if (matchingIdx !== null) {\r\n            return /** @type {?} */ ((node.view.directives))[matchingIdx];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @param {?} query\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction add(query, node) {\r\n    var /** @type {?} */ nodeInjector = getOrCreateNodeInjectorForNode(/** @type {?} */ (node));\r\n    while (query) {\r\n        var /** @type {?} */ predicate = query.predicate;\r\n        var /** @type {?} */ type = predicate.type;\r\n        if (type) {\r\n            var /** @type {?} */ directiveIdx = geIdxOfMatchingDirective(node, type);\r\n            if (directiveIdx !== null) {\r\n                // a node is matching a predicate - determine what to read\r\n                // if read token and / or strategy is not specified, use type as read token\r\n                var /** @type {?} */ result = readFromNodeInjector(nodeInjector, node, predicate.read || type, directiveIdx);\r\n                if (result !== null) {\r\n                    addMatch(query, result);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var /** @type {?} */ selector = /** @type {?} */ ((predicate.selector));\r\n            for (var /** @type {?} */ i = 0; i < selector.length; i++) {\r\n                ngDevMode && assertNotNull(node.tNode, 'node.tNode');\r\n                var /** @type {?} */ directiveIdx = getIdxOfMatchingSelector(/** @type {?} */ ((node.tNode)), selector[i]);\r\n                if (directiveIdx !== null) {\r\n                    // a node is matching a predicate - determine what to read\r\n                    // note that queries using name selector must specify read strategy\r\n                    ngDevMode && assertNotNull(predicate.read, 'the node should have a predicate');\r\n                    var /** @type {?} */ result = readFromNodeInjector(nodeInjector, node, /** @type {?} */ ((predicate.read)), directiveIdx);\r\n                    if (result !== null) {\r\n                        addMatch(query, result);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        query = query.next;\r\n    }\r\n}\r\n/**\r\n * @param {?} query\r\n * @param {?} matchingValue\r\n * @return {?}\r\n */\r\nfunction addMatch(query, matchingValue) {\r\n    query.values.push(matchingValue);\r\n    query.list.setDirty();\r\n}\r\n/**\r\n * @template T\r\n * @param {?} predicate\r\n * @param {?} read\r\n * @return {?}\r\n */\r\nfunction createPredicate(predicate, read) {\r\n    var /** @type {?} */ isArray = Array.isArray(predicate);\r\n    return {\r\n        type: isArray ? null : /** @type {?} */ (predicate),\r\n        selector: isArray ? /** @type {?} */ (predicate) : null,\r\n        read: read\r\n    };\r\n}\r\n/**\r\n * @template T\r\n * @param {?} previous\r\n * @param {?} queryList\r\n * @param {?} predicate\r\n * @param {?} read\r\n * @return {?}\r\n */\r\nfunction createQuery$1(previous, queryList, predicate, read) {\r\n    return {\r\n        next: previous,\r\n        list: queryList,\r\n        predicate: createPredicate(predicate, read),\r\n        values: (/** @type {?} */ ((queryList)))._valuesTree\r\n    };\r\n}\r\n/**\r\n * @template T\r\n */\r\nvar QueryList_ = /** @class */ (function () {\r\n    function QueryList_() {\r\n        this.dirty = true;\r\n        this.changes = new EventEmitter();\r\n        this._values = [];\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._valuesTree = [];\r\n    }\r\n    Object.defineProperty(QueryList_.prototype, \"length\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return this._values.length; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QueryList_.prototype, \"first\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var /** @type {?} */ values = this._values;\r\n            return values.length ? values[0] : null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QueryList_.prototype, \"last\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var /** @type {?} */ values = this._values;\r\n            return values.length ? values[values.length - 1] : null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * See\r\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n     */\r\n    /**\r\n     * See\r\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n     * @template U\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    QueryList_.prototype.map = /**\r\n     * See\r\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n     * @template U\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) { return this._values.map(fn); };\r\n    /**\r\n     * See\r\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\r\n     */\r\n    /**\r\n     * See\r\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    QueryList_.prototype.filter = /**\r\n     * See\r\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        return this._values.filter(fn);\r\n    };\r\n    /**\r\n     * See\r\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\r\n     */\r\n    /**\r\n     * See\r\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    QueryList_.prototype.find = /**\r\n     * See\r\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        return this._values.find(fn);\r\n    };\r\n    /**\r\n     * See\r\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\r\n     */\r\n    /**\r\n     * See\r\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\r\n     * @template U\r\n     * @param {?} fn\r\n     * @param {?} init\r\n     * @return {?}\r\n     */\r\n    QueryList_.prototype.reduce = /**\r\n     * See\r\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\r\n     * @template U\r\n     * @param {?} fn\r\n     * @param {?} init\r\n     * @return {?}\r\n     */\r\n    function (fn, init) {\r\n        return this._values.reduce(fn, init);\r\n    };\r\n    /**\r\n     * See\r\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n     */\r\n    /**\r\n     * See\r\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    QueryList_.prototype.forEach = /**\r\n     * See\r\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) { this._values.forEach(fn); };\r\n    /**\r\n     * See\r\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\r\n     */\r\n    /**\r\n     * See\r\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    QueryList_.prototype.some = /**\r\n     * See\r\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        return this._values.some(fn);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    QueryList_.prototype.toArray = /**\r\n     * @return {?}\r\n     */\r\n    function () { return this._values.slice(0); };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    QueryList_.prototype[getSymbolIterator()] = /**\r\n     * @return {?}\r\n     */\r\n    function () { return (/** @type {?} */ (this._values))[getSymbolIterator()](); };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    QueryList_.prototype.toString = /**\r\n     * @return {?}\r\n     */\r\n    function () { return this._values.toString(); };\r\n    /**\r\n     * @param {?} res\r\n     * @return {?}\r\n     */\r\n    QueryList_.prototype.reset = /**\r\n     * @param {?} res\r\n     * @return {?}\r\n     */\r\n    function (res) {\r\n        this._values = flatten$1(res);\r\n        (/** @type {?} */ (this)).dirty = false;\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    QueryList_.prototype.notifyOnChanges = /**\r\n     * @return {?}\r\n     */\r\n    function () { (/** @type {?} */ (this.changes)).emit(this); };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    QueryList_.prototype.setDirty = /**\r\n     * @return {?}\r\n     */\r\n    function () { (/** @type {?} */ (this)).dirty = true; };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    QueryList_.prototype.destroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        (/** @type {?} */ (this.changes)).complete();\r\n        (/** @type {?} */ (this.changes)).unsubscribe();\r\n    };\r\n    return QueryList_;\r\n}());\r\nvar QueryList$1 = /** @type {?} */ (QueryList_);\r\n/**\r\n * Creates and returns a QueryList.\r\n *\r\n * @template T\r\n * @param {?} memoryIndex The index in memory where the QueryList should be saved. If null,\r\n * this is is a content query and the QueryList will be saved later through directiveCreate.\r\n * @param {?} predicate The type for which the query will search\r\n * @param {?=} descend Whether or not to descend into children\r\n * @param {?=} read What to save in the query\r\n * @return {?} QueryList<T>\r\n */\r\nfunction query(memoryIndex, predicate, descend, read) {\r\n    ngDevMode && assertPreviousIsParent();\r\n    var /** @type {?} */ queryList = new QueryList$1();\r\n    var /** @type {?} */ queries = getCurrentQueries(LQueries_);\r\n    queries.track(queryList, predicate, descend, read);\r\n    if (memoryIndex != null) {\r\n        store(memoryIndex, queryList);\r\n    }\r\n    return queryList;\r\n}\r\n/**\r\n * Refreshes a query by combining matches from all active views and removing matches from deleted\r\n * views.\r\n * Returns true if a query got dirty during change detection, false otherwise.\r\n * @param {?} queryList\r\n * @return {?}\r\n */\r\nfunction queryRefresh(queryList) {\r\n    var /** @type {?} */ queryListImpl = (/** @type {?} */ ((queryList)));\r\n    if (queryList.dirty) {\r\n        queryList.reset(queryListImpl._valuesTree);\r\n        queryList.notifyOnChanges();\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar BRAND = '__SANITIZER_TRUSTED_BRAND__';\r\n/**\r\n * A branded trusted string used with sanitization.\r\n *\r\n * See: {\\@link TrustedHtmlString}, {\\@link TrustedResourceUrlString}, {\\@link TrustedScriptString},\r\n * {\\@link TrustedStyleString}, {\\@link TrustedUrlString}\r\n * @record\r\n */\r\n\r\n/**\r\n * A branded trusted string used with sanitization of `html` strings.\r\n *\r\n * See: {\\@link bypassSanitizationTrustHtml} and {\\@link htmlSanitizer}.\r\n * @record\r\n */\r\n\r\n/**\r\n * A branded trusted string used with sanitization of `style` strings.\r\n *\r\n * See: {\\@link bypassSanitizationTrustStyle} and {\\@link styleSanitizer}.\r\n * @record\r\n */\r\n\r\n/**\r\n * A branded trusted string used with sanitization of `url` strings.\r\n *\r\n * See: {\\@link bypassSanitizationTrustScript} and {\\@link scriptSanitizer}.\r\n * @record\r\n */\r\n\r\n/**\r\n * A branded trusted string used with sanitization of `url` strings.\r\n *\r\n * See: {\\@link bypassSanitizationTrustUrl} and {\\@link urlSanitizer}.\r\n * @record\r\n */\r\n\r\n/**\r\n * A branded trusted string used with sanitization of `resourceUrl` strings.\r\n *\r\n * See: {\\@link bypassSanitizationTrustResourceUrl} and {\\@link resourceUrlSanitizer}.\r\n * @record\r\n */\r\n\r\n/**\r\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\r\n * dangerous content.\r\n *\r\n * This method parses the `html` and locates potentially dangerous content (such as urls and\r\n * javascript) and removes it.\r\n *\r\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustHtml}.\r\n *\r\n * @param {?} unsafeHtml untrusted `html`, typically from the user.\r\n * @return {?} `html` string which is safe to display to user, because all of the dangerous javascript\r\n * and urls have been removed.\r\n */\r\nfunction sanitizeHtml(unsafeHtml) {\r\n    if (unsafeHtml instanceof String && (/** @type {?} */ (unsafeHtml))[BRAND] === 'Html') {\r\n        return unsafeHtml.toString();\r\n    }\r\n    return _sanitizeHtml(document, stringify$1(unsafeHtml));\r\n}\r\n/**\r\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\r\n * dangerous content.\r\n *\r\n * This method parses the `style` and locates potentially dangerous content (such as urls and\r\n * javascript) and removes it.\r\n *\r\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustStyle}.\r\n *\r\n * @param {?} unsafeStyle untrusted `style`, typically from the user.\r\n * @return {?} `style` string which is safe to bind to the `style` properties, because all of the\r\n * dangerous javascript and urls have been removed.\r\n */\r\nfunction sanitizeStyle(unsafeStyle) {\r\n    if (unsafeStyle instanceof String && (/** @type {?} */ (unsafeStyle))[BRAND] === 'Style') {\r\n        return unsafeStyle.toString();\r\n    }\r\n    return _sanitizeStyle(stringify$1(unsafeStyle));\r\n}\r\n/**\r\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\r\n * dangerous\r\n * content.\r\n *\r\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\r\n * removes it.\r\n *\r\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustUrl}.\r\n *\r\n * @param {?} unsafeUrl untrusted `url`, typically from the user.\r\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\r\n * all of the dangerous javascript has been removed.\r\n */\r\nfunction sanitizeUrl(unsafeUrl) {\r\n    if (unsafeUrl instanceof String && (/** @type {?} */ (unsafeUrl))[BRAND] === 'Url') {\r\n        return unsafeUrl.toString();\r\n    }\r\n    return _sanitizeUrl(stringify$1(unsafeUrl));\r\n}\r\n/**\r\n * A `url` sanitizer which only lets trusted `url`s through.\r\n *\r\n * This passes only `url`s marked trusted by calling {\\@link bypassSanitizationTrustResourceUrl}.\r\n *\r\n * @param {?} unsafeResourceUrl untrusted `url`, typically from the user.\r\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\r\n * only trusted `url`s have been allowed to pass.\r\n */\r\nfunction sanitizeResourceUrl(unsafeResourceUrl) {\r\n    if (unsafeResourceUrl instanceof String &&\r\n        (/** @type {?} */ (unsafeResourceUrl))[BRAND] === 'ResourceUrl') {\r\n        return unsafeResourceUrl.toString();\r\n    }\r\n    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\r\n}\r\n/**\r\n * A `script` sanitizer which only lets trusted javascript through.\r\n *\r\n * This passes only `script`s marked trusted by calling {\\@link bypassSanitizationTrustScript}.\r\n *\r\n * @param {?} unsafeScript untrusted `script`, typically from the user.\r\n * @return {?} `url` string which is safe to bind to the `<script>` element such as `<img src>`,\r\n * because only trusted `scripts`s have been allowed to pass.\r\n */\r\n\r\n/**\r\n * Mark `html` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {\\@link htmlSanitizer} to be trusted implicitly.\r\n *\r\n * @param {?} trustedHtml `html` string which needs to be implicitly trusted.\r\n * @return {?} a `html` `String` which has been branded to be implicitly trusted.\r\n */\r\nfunction bypassSanitizationTrustHtml(trustedHtml) {\r\n    return bypassSanitizationTrustString(trustedHtml, 'Html');\r\n}\r\n/**\r\n * Mark `style` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {\\@link styleSanitizer} to be trusted implicitly.\r\n *\r\n * @param {?} trustedStyle `style` string which needs to be implicitly trusted.\r\n * @return {?} a `style` `String` which has been branded to be implicitly trusted.\r\n */\r\nfunction bypassSanitizationTrustStyle(trustedStyle) {\r\n    return bypassSanitizationTrustString(trustedStyle, 'Style');\r\n}\r\n/**\r\n * Mark `script` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {\\@link scriptSanitizer} to be trusted implicitly.\r\n *\r\n * @param {?} trustedScript `script` string which needs to be implicitly trusted.\r\n * @return {?} a `script` `String` which has been branded to be implicitly trusted.\r\n */\r\nfunction bypassSanitizationTrustScript(trustedScript) {\r\n    return bypassSanitizationTrustString(trustedScript, 'Script');\r\n}\r\n/**\r\n * Mark `url` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {\\@link urlSanitizer} to be trusted implicitly.\r\n *\r\n * @param {?} trustedUrl `url` string which needs to be implicitly trusted.\r\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\r\n */\r\nfunction bypassSanitizationTrustUrl(trustedUrl) {\r\n    return bypassSanitizationTrustString(trustedUrl, 'Url');\r\n}\r\n/**\r\n * Mark `url` string as trusted.\r\n *\r\n * This function wraps the trusted string in `String` and brands it in a way which makes it\r\n * recognizable to {\\@link resourceUrlSanitizer} to be trusted implicitly.\r\n *\r\n * @param {?} trustedResourceUrl `url` string which needs to be implicitly trusted.\r\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\r\n */\r\nfunction bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\r\n    return bypassSanitizationTrustString(trustedResourceUrl, 'ResourceUrl');\r\n}\r\n/**\r\n * @param {?} trustedString\r\n * @param {?} mode\r\n * @return {?}\r\n */\r\nfunction bypassSanitizationTrustString(trustedString, mode) {\r\n    var /** @type {?} */ trusted = /** @type {?} */ (new String(trustedString));\r\n    trusted[BRAND] = mode;\r\n    return trusted;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n// clang-format on\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * Entry point from which you should import all public core APIs.\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs of this package.\r\n */\r\n\r\n// This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { createPlatform, assertPlatform, destroyPlatform, getPlatform, PlatformRef, ApplicationRef, enableProdMode, isDevMode, createPlatformFactory, NgProbeToken, APP_ID, PACKAGE_ROOT_URL, PLATFORM_INITIALIZER, PLATFORM_ID, APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, ApplicationInitStatus, DebugElement, DebugNode, asNativeElements, getDebugNode, Testability, TestabilityRegistry, setTestabilityGetter, TRANSLATIONS, TRANSLATIONS_FORMAT, LOCALE_ID, MissingTranslationStrategy, ApplicationModule, wtfCreateScope, wtfLeave, wtfStartTimeRange, wtfEndTimeRange, Type, EventEmitter, ErrorHandler, Sanitizer, SecurityContext, ANALYZE_FOR_ENTRY_COMPONENTS, Attribute, ContentChild, ContentChildren, Query, ViewChild, ViewChildren, Component, Directive, HostBinding, HostListener, Input, Output, Pipe, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, NgModule, ViewEncapsulation, Version, VERSION, forwardRef, resolveForwardRef, Injectable, inject, INJECTOR, Injector, ReflectiveInjector, createInjector, ResolvedReflectiveFactory, ReflectiveKey, InjectionToken, Inject, Optional, Self, SkipSelf, Host, defineInjectable, defineInjector, NgZone, RenderComponentType, Renderer, Renderer2, RendererFactory2, RendererStyleFlags2, RootRenderer, COMPILER_OPTIONS, Compiler, CompilerFactory, ModuleWithComponentFactories, ComponentFactory, ComponentRef, ComponentFactoryResolver, ElementRef, NgModuleFactory, NgModuleRef, NgModuleFactoryLoader, getModuleFactory, QueryList, SystemJsNgModuleLoader, SystemJsNgModuleLoaderConfig, TemplateRef, ViewContainerRef, EmbeddedViewRef, ViewRef, ChangeDetectionStrategy, ChangeDetectorRef, DefaultIterableDiffer, IterableDiffers, KeyValueDiffers, SimpleChange, WrappedValue, platformCore, ALLOW_MULTIPLE_PLATFORMS as ɵALLOW_MULTIPLE_PLATFORMS, APP_ID_RANDOM_PROVIDER as ɵAPP_ID_RANDOM_PROVIDER, devModeEqual as ɵdevModeEqual, isListLikeIterable as ɵisListLikeIterable, ChangeDetectorStatus as ɵChangeDetectorStatus, isDefaultChangeDetectionStrategy as ɵisDefaultChangeDetectionStrategy, Console as ɵConsole, setCurrentInjector as ɵsetCurrentInjector, APP_ROOT as ɵAPP_ROOT, ComponentFactory as ɵComponentFactory, CodegenComponentFactoryResolver as ɵCodegenComponentFactoryResolver, ReflectionCapabilities as ɵReflectionCapabilities, RenderDebugInfo as ɵRenderDebugInfo, _sanitizeHtml as ɵ_sanitizeHtml, _sanitizeStyle as ɵ_sanitizeStyle, _sanitizeUrl as ɵ_sanitizeUrl, _global as ɵglobal, looseIdentical as ɵlooseIdentical, stringify as ɵstringify, makeDecorator as ɵmakeDecorator, isObservable as ɵisObservable, isPromise as ɵisPromise, clearOverrides as ɵclearOverrides, overrideComponentView as ɵoverrideComponentView, overrideProvider as ɵoverrideProvider, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, defineComponent as ɵdefineComponent, defineDirective as ɵdefineDirective, definePipe as ɵdefinePipe, detectChanges as ɵdetectChanges, renderComponent as ɵrenderComponent, directiveInject as ɵdirectiveInject, injectTemplateRef as ɵinjectTemplateRef, injectViewContainerRef as ɵinjectViewContainerRef, injectChangeDetectorRef as ɵinjectChangeDetectorRef, injectAttribute as ɵinjectAttribute, PublicFeature as ɵPublicFeature, NgOnChangesFeature as ɵNgOnChangesFeature, NO_CHANGE as ɵNC, container as ɵC, elementStart as ɵE, listener as ɵL, text as ɵT, embeddedViewStart as ɵV, query as ɵQ, loadDirective as ɵd, projection as ɵP, bind as ɵb, interpolation1 as ɵi1, interpolation2 as ɵi2, interpolation3 as ɵi3, interpolation4 as ɵi4, interpolation5 as ɵi5, interpolation6 as ɵi6, interpolation7 as ɵi7, interpolation8 as ɵi8, interpolationV as ɵiV, pipeBind1 as ɵpb1, pipeBind2 as ɵpb2, pipeBind3 as ɵpb3, pipeBind4 as ɵpb4, pipeBindV as ɵpbV, pureFunction0 as ɵf0, pureFunction1 as ɵf1, pureFunction2 as ɵf2, pureFunction3 as ɵf3, pureFunction4 as ɵf4, pureFunction5 as ɵf5, pureFunction6 as ɵf6, pureFunction7 as ɵf7, pureFunction8 as ɵf8, pureFunctionV as ɵfV, containerRefreshStart as ɵcR, containerRefreshEnd as ɵcr, queryRefresh as ɵqR, elementEnd as ɵe, elementProperty as ɵp, projectionDef as ɵpD, elementAttribute as ɵa, elementStyle as ɵs, elementStyleNamed as ɵsn, elementClass as ɵk, elementClassNamed as ɵkn, textBinding as ɵt, embeddedViewEnd as ɵv, store as ɵst, load as ɵld, pipe as ɵPp, bypassSanitizationTrustHtml as ɵbypassSanitizationTrustHtml, bypassSanitizationTrustStyle as ɵbypassSanitizationTrustStyle, bypassSanitizationTrustScript as ɵbypassSanitizationTrustScript, bypassSanitizationTrustUrl as ɵbypassSanitizationTrustUrl, bypassSanitizationTrustResourceUrl as ɵbypassSanitizationTrustResourceUrl, sanitizeHtml as ɵsanitizeHtml, sanitizeStyle as ɵsanitizeStyle, sanitizeUrl as ɵsanitizeUrl, sanitizeResourceUrl as ɵsanitizeResourceUrl, registerModuleFactory as ɵregisterModuleFactory, EMPTY_ARRAY$2 as ɵEMPTY_ARRAY, EMPTY_MAP as ɵEMPTY_MAP, anchorDef as ɵand, createComponentFactory as ɵccf, createNgModuleFactory as ɵcmf, createRendererType2 as ɵcrt, directiveDef as ɵdid, elementDef as ɵeld, elementEventFullName as ɵelementEventFullName, getComponentViewDefinitionFactory as ɵgetComponentViewDefinitionFactory, inlineInterpolate as ɵinlineInterpolate, interpolate as ɵinterpolate, moduleDef as ɵmod, moduleProvideDef as ɵmpd, ngContentDef as ɵncd, nodeValue as ɵnov, pipeDef as ɵpid, providerDef as ɵprd, pureArrayDef as ɵpad, pureObjectDef as ɵpod, purePipeDef as ɵppd, queryDef as ɵqud, textDef as ɵted, unwrapValue as ɵunv, viewDef as ɵvid, _iterableDiffersFactory as ɵq, _keyValueDiffersFactory as ɵr, _localeFactory as ɵu, _appIdRandomProviderFactory as ɵj, defaultIterableDiffers as ɵl, defaultKeyValueDiffers as ɵm, DefaultIterableDifferFactory as ɵn, DefaultKeyValueDifferFactory as ɵo, ReflectiveInjector_ as ɵg, ReflectiveDependency as ɵh, resolveReflectiveProviders as ɵi, wtfEnabled as ɵw, createScope as ɵy, detectWTF as ɵx, endTimeRange as ɵbb, leave as ɵz, startTimeRange as ɵba, getOrCreateChangeDetectorRef as ɵbf, getOrCreateContainerRef as ɵbh, getOrCreateInjectable as ɵbg, getOrCreateNodeInjector as ɵbe, getOrCreateTemplateRef as ɵbi, bindingUpdated as ɵbl, bindingUpdated2 as ɵbn, bindingUpdated4 as ɵbo, checkAndUpdateBinding$1 as ɵbm, consumeBinding as ɵbk, getCreationMode as ɵbj, makeParamDecorator as ɵc, makePropDecorator as ɵf, _def as ɵbc, DebugContext as ɵbd };\r\n//# sourceMappingURL=core.js.map\r\n","import * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle(openings, closingSelector) {\n    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };\n}\nvar WindowToggleOperator = /** @class */ (function () {\n    function WindowToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    WindowToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return WindowToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowToggleSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(WindowToggleSubscriber, _super);\n    function WindowToggleSubscriber(destination, openings, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.openings = openings;\n        _this.closingSelector = closingSelector;\n        _this.contexts = [];\n        _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));\n        return _this;\n    }\n    WindowToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        if (contexts) {\n            var len = contexts.length;\n            for (var i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context_1 = contexts[index];\n                context_1.window.error(err);\n                context_1.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._error.call(this, err);\n    };\n    WindowToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context_2 = contexts[index];\n                context_2.window.complete();\n                context_2.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    WindowToggleSubscriber.prototype._unsubscribe = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context_3 = contexts[index];\n                context_3.window.unsubscribe();\n                context_3.subscription.unsubscribe();\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = tryCatch(closingSelector)(innerValue);\n            if (closingNotifier === errorObject) {\n                return this.error(errorObject.e);\n            }\n            else {\n                var window_1 = new Subject();\n                var subscription = new Subscription();\n                var context_4 = { window: window_1, subscription: subscription };\n                this.contexts.push(context_4);\n                var innerSubscription = subscribeToResult(this, closingNotifier, context_4);\n                if (innerSubscription.closed) {\n                    this.closeWindow(this.contexts.length - 1);\n                }\n                else {\n                    innerSubscription.context = context_4;\n                    subscription.add(innerSubscription);\n                }\n                this.destination.next(window_1);\n            }\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyError = function (err) {\n        this.error(err);\n    };\n    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    };\n    WindowToggleSubscriber.prototype.closeWindow = function (index) {\n        if (index === -1) {\n            return;\n        }\n        var contexts = this.contexts;\n        var context = contexts[index];\n        var window = context.window, subscription = context.subscription;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    };\n    return WindowToggleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=windowToggle.js.map","import * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen(closingSelector) {\n    return function windowWhenOperatorFunction(source) {\n        return source.lift(new WindowOperator(closingSelector));\n    };\n}\nvar WindowOperator = /** @class */ (function () {\n    function WindowOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.closingSelector = closingSelector;\n        _this.openWindow();\n        return _this;\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n        if (this.closingNotification) {\n            this.closingNotification.unsubscribe();\n        }\n    };\n    WindowSubscriber.prototype.openWindow = function (innerSub) {\n        if (innerSub === void 0) { innerSub = null; }\n        if (innerSub) {\n            this.remove(innerSub);\n            innerSub.unsubscribe();\n        }\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var window = this.window = new Subject();\n        this.destination.next(window);\n        var closingNotifier = tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject) {\n            var err = errorObject.e;\n            this.destination.error(err);\n            this.window.error(err);\n        }\n        else {\n            this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n        }\n    };\n    return WindowSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=windowWhen.js.map","import * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nvar WithLatestFromOperator = /** @class */ (function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = /** @class */ (function (_super) {\n    tslib_1.__extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.observables = observables;\n        _this.project = project;\n        _this.toRespond = [];\n        var len = observables.length;\n        _this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            _this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            _this.add(subscribeToResult(_this, observable, observable, i));\n        }\n        return _this;\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=withLatestFrom.js.map","import { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../../internal/operators/mergeAll';\nimport { fromArray } from './fromArray';\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(fromArray(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMap(identity, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map","import { connectableObservableDescriptor } from '../observable/ConnectableObservable';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nvar MulticastOperator = /** @class */ (function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\nexport { MulticastOperator };\n//# sourceMappingURL=multicast.js.map","import { Component, ɵrenderComponent as renderComponent } from '@angular/core';\r\nimport * as i0 from \"@angular/core\";\r\nexport class HelloWorld {\r\n    constructor() {\r\n        this.name = 'World!';\r\n    }\r\n}\r\n/** @nocollapse */\r\nHelloWorld.ctorParameters = () => [];\r\nHelloWorld.ngComponentDef = i0.ɵdefineComponent({ type: HelloWorld, selector: [[[\"hello-world\"], null]], factory: function HelloWorld_Factory() { return new HelloWorld(); }, template: function HelloWorld_Template(ctx, cm) { if (cm) {\r\n        i0.ɵE(0, \"h3\");\r\n        i0.ɵT(1);\r\n        i0.ɵe();\r\n    } i0.ɵt(1, i0.ɵi1(\"Hello \", ctx.name, \"\")); } });\r\nrenderComponent(HelloWorld);\r\n"],"names":["extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","this","constructor","prototype","create","__","__assign","assign","t","s","i","n","arguments","length","call","isFunction","x","_enable_super_gross_mode_that_will_cause_bad_things","config","Promise","undefined","useDeprecatedSynchronousErrorHandling","value","console","warn","Error","stack","log","hostReportError","err","setTimeout","empty","closed","next","error","complete","isArray","isObject","tryCatchTarget","errorObject","e","tryCatcher","apply","tryCatch","fn","UnsubscriptionError","_super","errors","_this","map","join","name","tslib_1.__extends","Subscription","unsubscribe","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","index","len","remove","flattenUnsubscriptionErrors","sub","concat","push","add","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","parent","reduce","errs","rxSubscriber","Symbol","for","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","emptyObserver","SafeSubscriber","rxSubscriberSymbol","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","_parentSubscriber","observerOrNext","context","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","observable","noop","Observable","subscribe","_isScalar","_subscribe","lift","operator","source","sink","nextOrObserver","toSubscriber","_trySubscribe","forEach","promiseCtor","getPromiseCtor","resolve","reject","Symbol_observable","pipe","fns","operations","_i","input","prev","toPromise","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","Subject","hasError","thrownError","AnonymousSubject","copy","slice","asObservable","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","connectableProto","subjectFactory","_isComplete","ConnectableObservable","getSubject","_subject","ConnectableSubscriber","higherOrderRefCount","connectableObservableDescriptor","writable","AsyncAction","BehaviorSubject","_value","defineProperty","get","getValue","enumerable","configurable","scheduler","work","pending","schedule","state","delay","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","Action","QueueAction","AsyncScheduler","active","scheduled","action","shift","SchedulerAction","now","Scheduler","Date","queue","QueueScheduler","emptyScheduled","isScheduler","subscribeToArray","array","fromArray","Notification","kind","hasValue","observe","observer","do","accept","toObservable","args","result","pop","of","createNext","undefinedValueNotification","createError","createComplete","completeNotification","ObserveOnSubscriber","dispatch","arg","notification","scheduleMessage","ObserveOnMessage","ReplayEvent","bufferSize","windowTime","Number","_events","_bufferSize","_windowTime","ReplaySubject","_getNow","_trimBufferThenGetEvents","eventsCount","spliceCount","time","Math","max","nextHandle","AsyncSubject","hasNext","hasCompleted","tasksByHandle","AsapAction","cb","handle","then","runIfPresent","asap","AsapScheduler","count","AnimationFrameAction","requestAnimationFrame","cancelAnimationFrame","VirtualAction","AnimationFrameScheduler","VirtualTimeScheduler","maxFrames","frame","frameTimeFactor","sort","sortActions","a","identity","ArgumentOutOfRangeError","EmptyError","OuterSubscriber","TimeoutError","notifyNext","outerValue","innerValue","notifyError","notifyComplete","InnerSubscriber","outerIndex","iterator","subscribeTo","promise","Symbol_iterator","iterable","item","done","return","obj","obs","TypeError","subscribeToResult","outerSubscriber","NONE","project","values","observables","CombineLatestSubscriber","toRespond","_tryProject","MergeMapOperator","concurrent","MergeMapSubscriber","buffer","_tryNext","_innerSub","ish","innerSub","ForkJoinSubscriber","sources","completed","haveValues","innerSubscription","innerIndex","_hasValue","hasFirst","RaceSubscriber","iterators","ZipSubscriber","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","Context","durationSelector","AuditSubscriber","throttled","duration","clearThrottle","closingNotifier","BufferSubscriber","BufferCountSubscriber","startBufferEvery","buffers","BufferSkipCountSubscriber","prevContext","closeContext","openContext","closeAction","bufferTimeSpan","bufferCreationInterval","dispatchBufferClose","debouncedNext","maxBufferSize","contexts","timespanOnly","dispatchBufferTimeSpanOnly","creationState","dispatchBufferCreation","BufferTimeSubscriber","filledBufferContext","context_1","onBufferFull","context_2","openings","closingSelector","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","subscribing","BufferWhenSubscriber","closingSubscription","selector","caught","CatchSubscriber","err2","predicate","CountSubscriber","_tryPredicate","durationSubscription","DebounceSubscriber","emitValue","dueTime","debouncedSubscription","lastValue","DebounceTimeSubscriber","clearDebounce","dispatchNext","defaultValue","isEmpty","DefaultIfEmptySubscriber","DelaySubscriber","delay_1","_schedule","scheduleNotification","message","DelayMessage","SubscriptionDelaySubscriber","delayDurationSelector","delayNotifierSubscriptions","DelayWhenSubscriber","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","subscriptionDelay","SubscriptionDelayObservable","sourceSubscribed","subscribeToSource","DeMaterializeSubscriber","Set","keySelector","flushes","DistinctSubscriber","clear","_useKeySelector","_finalizeNext","key","has","compare","hasKey","DistinctUntilChangedSubscriber","y","ElementAtSubscriber","thisArg","EverySubscriber","everyValueMatch","hasSubscription","SwitchFirstSubscriber","SwitchFirstMapSubscriber","tryNext","ExpandSubscriber","subscribeToProjection","FilterSubscriber","callback","yieldIndex","FindValueSubscriber","_emitted","FirstSubscriber","_emit","Map","elementSelector","subjectSelector","groups","attemptedToUnsubscribe","GroupBySubscriber","_group","element","group","set","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","delete","groupSubject","refCountSubscription","InnerRefCountSubscription","period","IgnoreElementsSubscriber","IsEmptySubscriber","LastSubscriber","MapSubscriber","MapToSubscriber","MaterializeSubscriber","accumulator","_seed","hasSeed","ScanSubscriber","seed","total","ring","TakeLastSubscriber","idx","acc","MergeScanSubscriber","nextSources","OnErrorResumeNextSubscriber","subscribeToNextSource","hasPrev","PairwiseSubscriber","RepeatSubscriber","notifier","sourceIsBeingSubscribedTo","RepeatWhenSubscriber","retries","retriesSubscription","subscribeToRetries","notifications","RetrySubscriber","RetryWhenSubscriber","SampleSubscriber","dispatchNotification","SampleTimeSubscriber","compareTo","comparor","_a","_b","_oneComplete","SequenceEqualCompareToSubscriber","SequenceEqualSubscriber","emit","checkValues","areEqual","nextB","shareSubjectFactory","seenValue","SingleSubscriber","applySingleValue","singleValue","SkipSubscriber","_skipCount","_count","_ring","SkipLastSubscriber","skipCount","currentIndex","oldValue","isInnerStopped","SkipUntilSubscriber","skipping","SkipWhileSubscriber","tryCallPredicate","SubscribeOnObservable","delayTime","val","parseFloat","SwitchMapSubscriber","inner","SwitchMapToSubscriber","TakeSubscriber","TakeUntilSubscriber","TakeWhileSubscriber","nextOrComplete","predicateResult","_tapNext","_tapError","_tapComplete","TapSubscriber","_leading","_trailing","_hasTrailingValue","ThrottleSubscriber","_trailingValue","tryDurationSelector","_sendTrailing","leading","trailing","ThrottleTimeSubscriber","CountedSubject","lastTime","TimeIntervalSubscriber","span","interval","absoluteTimeout","waitFor","errorInstance","scheduleTimeout","TimeoutSubscriber","dispatchTimeout","withObservable","TimeoutWithSubscriber","window","WindowSubscriber","openWindow","prevWindow","newWindow","windowSize","startWindowEvery","windows","WindowCountSubscriber","c","window_1","_numberOfNextedValues","windowTimeSpan","closeWindow","windowCreationInterval","dispatchWindowClose","opts","providedIn","factory","maxWindowSize","dispatchWindowCreation","dispatchWindowTimeSpanOnly","WindowTimeSubscriber","numberOfNextedValues","window_2","openSubscription","WindowToggleSubscriber","context_3","context_4","unsubscribeClosingNotification","closingNotification","WithLatestFromSubscriber","found","InjectionToken","_desc","options","ngMetadataName","ngInjectableDef","defineInjectable","toString","ANNOTATIONS","PARAMETERS","PROP_METADATA","props","parentClass","chainFn","typeFn","metaCtor","makeMetadataCtor","DecoratorFactory","annotationInstance","TypeDecorator","cls","annotationCls","propName","ParamDecoratorFactory","annotation","ParamDecorator","unusedKey","parameters","PropDecoratorFactory","decoratorInstance","target","meta","unshift","makeParamDecorator","attributeName","Query","ChangeDetectionStrategy","makePropDecorator","data","first","isViewQuery","descendants","OnPush","Default","Type","makeDecorator","changeDetection","dir","pure","bindingPropertyName","hostPropertyName","eventName","Function","v","__window","__self","self","WorkerGlobalScope","__global","global","_global","Zone","current","scheduleMicroTask","token","stringify","overriddenName","res","newLineIndex","substring","DELEGATE_CTOR","INHERITED_CLASS","INHERITED_CLASS_WITH_CTOR","ReflectionCapabilities","reflect","_reflect","isReflectionEnabled","_zipTypesAndAnnotations","paramTypes","paramAnnotations","_ownParameters","type","parentCtor","typeStr","exec","tsickleCtorParams","ctorParameters","paramTypes_1","ctorParam","paramAnnotations_1","convertTsickleDecoratorIntoMetadata","decorators","getOwnMetadata","fill","isType","getParentCtor","_ownAnnotations","typeOrFunc","annotations","ownAnnotations","_ownPropMetadata","propMetadata","propDecorators","propDecorators_1","propMetadata_1","keys","prop","parentPropMetadata_1","ownPropMetadata","hasLifecycleHook","lcProperty","guards","getter","setter","method","importUri","resourceUri","resolveIdentifier","moduleUrl","members","runtime","resolveEnum","enumIdentifier","decoratorInvocations","decoratorInvocation","ctor","parentProto","getPrototypeOf","forwardRefFn","__forward_ref__","forwardRef","Inject","Optional","Self","SkipSelf","SOURCE","_THROW_IF_NOT_FOUND","INJECTOR","NullInjector","notFoundValue","Injector","StaticInjector","providers","THROW_IF_NOT_FOUND","NULL","inject","IDENT","CIRCULAR","MULTI_PROVIDER_FN","GET_PROPERTY_NAME$1","USE_VALUE$1","objWithPropertyToExtract","getClosureSafeProperty$1","provide","String","useValue","NULL_INJECTOR","NEW_LINE","NO_NEW_LINE","records","_records","deps","useNew","provider","resolveForwardRef","recursivelyProcessProviders","staticError","resolvedProvider","providerDeps","j","useExisting","computeDeps","useFactory","useClass","resolveProvider","multi","multiProvider","multiProviderMixError","record","flags","depRecords","depRecord","childRecord","tryResolveToken","resolveToken","tokenPath","formatError","tokens","text","charAt","substr","parts","JSON","replace","_currentInjector","types","GET_PROPERTY_NAME","USE_VALUE","getClosureSafeProperty","EMPTY_ARRAY","deps_1","reflectionCapabilities","injectArgs","valueProvider_1","existingProvider_1","factoryProvider_1","classProvider_1","deps_2","deps_3","injectableType","convertInjectableProviderToFactory","ngModule","moduleType","metadata","imports","exports","ngInjectorDef","ViewEncapsulation","Emulated","Native","None","ERROR_DEBUG_CONTEXT","full","major","minor","patch","ERROR_ORIGINAL_ERROR","ErrorHandler","_console","handleError","originalError","_findOriginalError","_findContext","errorLogger","defaultErrorLogger","getErrorLogger","getDebugContext","getOriginalError","ReflectiveKey","displayName","_globalKeyRegistry","numberOfKeys","_allKeys","KeyRegistry","newKey","size","Reflector","updateCapabilities","caps","identifier","trace","events","wtf","ApplicationInitStatus","appInits","initialized","donePromise","rej","runInitializers","asyncInitPromises","initResult","isPromise","all","catch","PLATFORM_ID","APP_BOOTSTRAP_LISTENER","Console","CompilerFactory","ComponentFactory","ComponentFactoryBoundToModule","componentType","ngContentSelectors","inputs","outputs","__extends","injector","projectableNodes","rootSelectorOrNode","NgModuleRef","wtfEnabled","wtfCreateScope","signature","createScope","noopScope","wtfLeave","scope","returnValue","leaveScope","r","EventEmitter","isAsync","__isAsync","generatorOrNext","schedulerFn","errorFn","completeFn","NgZone","zone","enableLongStackTrace","hasPendingMicrotasks","hasPendingMacrotasks","isStable","onUnstable","onMicrotaskEmpty","onStable","onError","assertZonePatched","_nesting","_outer","_inner","fork","properties","isAngularZone","onInvokeTask","delegate","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","onInvoke","invoke","onHasTask","hasTaskState","hasTask","change","microTask","checkStable","macroTask","onHandleError","runOutsideAngular","isInAngularZone","assertInAngularZone","assertNotInAngularZone","run","runTask","scheduleEventTask","EMPTY_PAYLOAD","cancelTask","runGuarded","NoopNgZone","Testability","_ngZone","_pendingCount","_isZoneStable","_didWork","_callbacks","_watchAngularEvents","taskTrackingZone","_runCallbacksIfReady","increasePendingRequestCount","decreasePendingRequestCount","clearTimeout","timeoutId","doneCb","pending_1","getPendingTasks","filter","updateCb","macroTasks","isPeriodic","creationLocation","xhr","addCallback","timeout","whenStable","getPendingRequestCount","findProviders","TestabilityRegistry","_applications","_testabilityGetter","addToWindow","registerApplication","testability","unregisterApplication","unregisterAllApplications","getTestability","elem","getAllTestabilities","from","getAllRootElements","findTestabilityInTree","findInAncestors","_NoopGetTestability","_devMode","PlatformRef","_injector","_modules","_destroyListeners","_destroyed","bootstrapModuleFactory","moduleFactory","ngZoneOption","ngZone","isDevMode","ngZoneInjector","moduleRef","exceptionHandler","onDestroy","errorHandler","initStatus","_moduleDoBootstrap","_callAndReportToErrorHandler","bootstrapModule","compilerOptions","compilerFactory","optionsReducer","createCompiler","compileModuleAsync","appRef","ApplicationRef","_bootstrapComponents","f","bootstrap","instance","ngDoBootstrap","destroy","module","listener","dst","objs","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_bootstrapListeners","_views","_runningTick","_enforceNoNewChanges","_stable","componentTypes","components","tick","isCurrentlyStable","stableSub","unstableSub","last","mergeMap","mergeAll","merge","subjectOrSubjectFactory","componentOrFactory","componentFactory","resolveComponentFactory","compRef","_unloadComponent","location","nativeElement","_loadComponent","_tickScope","view","detectChanges","checkNoChanges","attachView","viewRef","attachToAppRef","detachView","detachFromAppRef","componentRef","hostView","ngOnDestroy","list","el","Renderer2","tags","split","sets","sets_1","VOID_ELEMENTS","tagSet","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","merge$1","_tokenKeyCache","_renderCompCount","def","tView","afterContentInit","contentHooks","afterContentChecked","contentCheckHooks","afterViewInit","viewHooks","afterViewChecked","viewCheckHooks","destroyHooks","allHooks","checkHooks","creationMode","hooksToCall","arr","callHooks","WeakMap","tokenKey","NG_PROJECT_AS_ATTR_NAME","renderer","domRendererFactory3","createRenderer","document","node","pNextOrParent","initialNode","rootNode","nextNode","getNextLNodeWithProjection","native","childContainerData","views","child","head","getNextOrParentSiblingNode","currentView","canInsertNativeNode","isProceduralRenderer","appendChild","tNode","noOfSelectorParts","tagNameInSelector","tagName","attrs","nodeClassAttrVal","cssClassToMatch","nodeClassesLen","matchIndex","matchEndIdx","attrsInNode","attrNameInSelector","attrIdxInNode","attrValInSelector","attrValInNode","positiveSelector","isNodeMatchingSimpleSelector","negativeSelectors","isNodeMatchingSelectorWithNegations","rendererFactory","previousOrParentNode","isParent","tData","currentQueries","directives","bindingIndex","NG_HOST_SYMBOL","_CLEAN_PROMISE","_ROOT_DIRECTIVE_INDICES","checkNoChangesMode","firstTemplatePass","newView","host","oldView","bindingStartIndex","queries","executeHooks","lifecycleStage","enterView","executeInitAndContentHooks","setHostBindings","hostBindings","componentRefresh","refreshChildComponents","bindings","defs","dirIndex","initHooks","executeInitHooks","viewId","template","cleanup","tail","dynamicViewCount","isState","nodeInjector","viewNode","_isParent","_previousOrParentNode","cm","createLNode","createLView","createTView","directiveRegistry","pipeRegistry","refreshDynamicChildren","refreshDirectives","leaveView","component","changeDetectorRef","_setComponentContext","exportsMap","exportAs","pipes","ngPrivateData","pipeDestroyHooks","isProc","attrName","attrVal","setAttribute","elementOrSelector","defaultRenderer","selectRootElement","querySelector","localNames","initialInputs","elementIndex","directive","directiveDef","elIndex","baseDirectiveCreate","getOrCreateTView","directiveDefs","pipeDefs","rendererType","onPush","initChangeDetectorIfExisting","addComponentLogic","onInit","doCheck","queueInitHooks","directiveIndex","initialInputData","minifiedInputName","generateInitialInputs","setInputsFromAttrs","diPublic","attributes","setUpAttributes","container_1","renderEmbeddedTemplate","instanceOrArray","detectChangesInternal","hostNode","_getComponentHostLElementNode","NO_CHANGE","CLEAN_PROMISE","ROOT_DIRECTIVE_INDICES","_lViewNode","_view","ViewRef","markForCheck","rootContext","res_1","clean","rootView","begin","end","renderComponentOrTemplate","lView","getRootView","markViewDirty","detach","reattach","componentDefinition","feature","EMPTY$1","newObj","minifiedKey","[object Object]","HelloWorld","ngComponentDef","ctx","textNode","v0","createElement","createTNode","registry","startIndex","componentFlag","isNodeMatchingSelector","throwMultipleComponentError","buildTNodeFlags","cacheMatchingDirectivesForNode","endIndex","tDirectives","directiveCreate","saveNameToExportMap","saveResolvedLocalsInData","hack_declareDirectives","i0.ɵE","addNode","start","queueContentHooks","queueViewHooks","queueDestroyHooks","queueLifecycleHooks","i0.ɵe","existingNode","setValue","stringify$1","textContent","createText","createTextNode","nativeSibling","currentNode","nativeNode","findFirstRNode","currentSibling","parentNode","parentType","findNextRNodeSibling","insertBefore","insertChild","i0.ɵt","msg","throwErrorIfNoChangesMode","bindingUpdated","invertObject","encapsulation","styles","resolveRendererType2","ngOnInit","ngDoCheck","ngAfterContentInit","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","features","componentDef","elementNode","componentTag","locateHostElement","tag","rNode","hostElement","hostFeatures","renderComponent"],"mappings":"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"}